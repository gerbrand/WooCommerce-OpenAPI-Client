/*
 * wc/v3
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Batch;
import org.openapitools.client.model.Batch1;
import org.openapitools.client.model.Batch10;
import org.openapitools.client.model.Batch11;
import org.openapitools.client.model.Batch12;
import org.openapitools.client.model.Batch13;
import org.openapitools.client.model.Batch14;
import org.openapitools.client.model.Batch15;
import org.openapitools.client.model.Batch16;
import org.openapitools.client.model.Batch17;
import org.openapitools.client.model.Batch18;
import org.openapitools.client.model.Batch19;
import org.openapitools.client.model.Batch2;
import org.openapitools.client.model.Batch20;
import org.openapitools.client.model.Batch21;
import org.openapitools.client.model.Batch22;
import org.openapitools.client.model.Batch23;
import org.openapitools.client.model.Batch24;
import org.openapitools.client.model.Batch25;
import org.openapitools.client.model.Batch26;
import org.openapitools.client.model.Batch27;
import org.openapitools.client.model.Batch28;
import org.openapitools.client.model.Batch29;
import org.openapitools.client.model.Batch3;
import org.openapitools.client.model.Batch30;
import org.openapitools.client.model.Batch31;
import org.openapitools.client.model.Batch32;
import org.openapitools.client.model.Batch33;
import org.openapitools.client.model.Batch34;
import org.openapitools.client.model.Batch35;
import org.openapitools.client.model.Batch36;
import org.openapitools.client.model.Batch37;
import org.openapitools.client.model.Batch38;
import org.openapitools.client.model.Batch39;
import org.openapitools.client.model.Batch4;
import org.openapitools.client.model.Batch5;
import org.openapitools.client.model.Batch6;
import org.openapitools.client.model.Batch7;
import org.openapitools.client.model.Batch8;
import org.openapitools.client.model.Batch9;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Customer1;
import org.openapitools.client.model.Customer2;
import org.openapitools.client.model.Customer3;
import org.openapitools.client.model.Customer4;
import org.openapitools.client.model.CustomerDownload;
import org.openapitools.client.model.DataContinents;
import org.openapitools.client.model.DataCountries;
import org.openapitools.client.model.DataCurrencies;
import org.openapitools.client.model.DataIndex;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.OrderNote;
import org.openapitools.client.model.OrderNote1;
import org.openapitools.client.model.PaymentGateway;
import org.openapitools.client.model.PaymentGateway1;
import org.openapitools.client.model.PaymentGateway2;
import org.openapitools.client.model.PaymentGateway3;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.Product1;
import org.openapitools.client.model.Product2;
import org.openapitools.client.model.Product3;
import org.openapitools.client.model.Product4;
import org.openapitools.client.model.ProductAttribute;
import org.openapitools.client.model.ProductAttribute1;
import org.openapitools.client.model.ProductAttribute2;
import org.openapitools.client.model.ProductAttribute3;
import org.openapitools.client.model.ProductAttribute4;
import org.openapitools.client.model.ProductAttributeTerm;
import org.openapitools.client.model.ProductAttributeTerm1;
import org.openapitools.client.model.ProductAttributeTerm2;
import org.openapitools.client.model.ProductAttributeTerm3;
import org.openapitools.client.model.ProductAttributeTerm4;
import org.openapitools.client.model.ProductCat;
import org.openapitools.client.model.ProductCat1;
import org.openapitools.client.model.ProductCat2;
import org.openapitools.client.model.ProductCat3;
import org.openapitools.client.model.ProductCat4;
import org.openapitools.client.model.ProductReview;
import org.openapitools.client.model.ProductReview1;
import org.openapitools.client.model.ProductReview2;
import org.openapitools.client.model.ProductReview3;
import org.openapitools.client.model.ProductReview4;
import org.openapitools.client.model.ProductShippingClass;
import org.openapitools.client.model.ProductShippingClass1;
import org.openapitools.client.model.ProductShippingClass2;
import org.openapitools.client.model.ProductShippingClass3;
import org.openapitools.client.model.ProductShippingClass4;
import org.openapitools.client.model.ProductTag;
import org.openapitools.client.model.ProductTag1;
import org.openapitools.client.model.ProductTag2;
import org.openapitools.client.model.ProductTag3;
import org.openapitools.client.model.ProductTag4;
import org.openapitools.client.model.ProductVariation;
import org.openapitools.client.model.ProductVariation1;
import org.openapitools.client.model.ProductVariation2;
import org.openapitools.client.model.ProductVariation3;
import org.openapitools.client.model.ProductVariation4;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportCouponTotal;
import org.openapitools.client.model.ReportCustomerTotal;
import org.openapitools.client.model.ReportOrderTotal;
import org.openapitools.client.model.ReportProductTotal;
import org.openapitools.client.model.ReportReviewTotal;
import org.openapitools.client.model.SalesReport;
import org.openapitools.client.model.ShippingMethod;
import org.openapitools.client.model.ShippingZone;
import org.openapitools.client.model.ShippingZone1;
import org.openapitools.client.model.ShippingZone2;
import org.openapitools.client.model.ShippingZone3;
import org.openapitools.client.model.ShippingZone4;
import org.openapitools.client.model.ShippingZoneLocation;
import org.openapitools.client.model.ShippingZoneLocation1;
import org.openapitools.client.model.ShippingZoneLocation2;
import org.openapitools.client.model.ShippingZoneLocation3;
import org.openapitools.client.model.ShippingZoneMethod;
import org.openapitools.client.model.ShippingZoneMethod1;
import org.openapitools.client.model.ShippingZoneMethod2;
import org.openapitools.client.model.ShippingZoneMethod3;
import org.openapitools.client.model.ShippingZoneMethod4;
import org.openapitools.client.model.ShopCoupon;
import org.openapitools.client.model.ShopCoupon1;
import org.openapitools.client.model.ShopCoupon2;
import org.openapitools.client.model.ShopCoupon3;
import org.openapitools.client.model.ShopCoupon4;
import org.openapitools.client.model.ShopOrder;
import org.openapitools.client.model.ShopOrder1;
import org.openapitools.client.model.ShopOrder2;
import org.openapitools.client.model.ShopOrder3;
import org.openapitools.client.model.ShopOrder4;
import org.openapitools.client.model.ShopOrderRefund;
import org.openapitools.client.model.ShopOrderRefund1;
import org.openapitools.client.model.SystemStatus;
import org.openapitools.client.model.SystemStatusTool;
import org.openapitools.client.model.SystemStatusTool1;
import org.openapitools.client.model.SystemStatusTool2;
import org.openapitools.client.model.SystemStatusTool3;
import org.openapitools.client.model.Tax;
import org.openapitools.client.model.Tax1;
import org.openapitools.client.model.Tax2;
import org.openapitools.client.model.Tax3;
import org.openapitools.client.model.Tax4;
import org.openapitools.client.model.TaxClass;
import org.openapitools.client.model.TaxClass1;
import org.openapitools.client.model.TopSellersReport;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.Webhook1;
import org.openapitools.client.model.Webhook2;
import org.openapitools.client.model.Webhook3;
import org.openapitools.client.model.Webhook4;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsBatchPatchTest() throws ApiException {
        Batch3 batch3 = null;
                Batch response = api.couponsBatchPatch(batch3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsBatchPostTest() throws ApiException {
        Batch2 batch2 = null;
                Batch response = api.couponsBatchPost(batch2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsBatchPutTest() throws ApiException {
        Batch1 batch1 = null;
                Batch response = api.couponsBatchPut(batch1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        Boolean datesAreGmt = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        String code = null;
                List<ShopCoupon> response = api.couponsGet(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, code);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ShopCoupon response = api.couponsIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ShopCoupon response = api.couponsIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsIdPatchTest() throws ApiException {
        Integer id = null;
        ShopCoupon4 shopCoupon4 = null;
                ShopCoupon response = api.couponsIdPatch(id, shopCoupon4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsIdPostTest() throws ApiException {
        Integer id = null;
        ShopCoupon3 shopCoupon3 = null;
                ShopCoupon response = api.couponsIdPost(id, shopCoupon3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsIdPutTest() throws ApiException {
        Integer id = null;
        ShopCoupon2 shopCoupon2 = null;
                ShopCoupon response = api.couponsIdPut(id, shopCoupon2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void couponsPostTest() throws ApiException {
        ShopCoupon1 shopCoupon1 = null;
                ShopCoupon response = api.couponsPost(shopCoupon1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersBatchPatchTest() throws ApiException {
        Batch6 batch6 = null;
                Batch response = api.customersBatchPatch(batch6);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersBatchPostTest() throws ApiException {
        Batch5 batch5 = null;
                Batch response = api.customersBatchPost(batch5);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersBatchPutTest() throws ApiException {
        Batch4 batch4 = null;
                Batch response = api.customersBatchPut(batch4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersCustomerIdDownloadsGetTest() throws ApiException {
        Integer customerId = null;
        String context = null;
                List<CustomerDownload> response = api.customersCustomerIdDownloadsGet(customerId, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        String email = null;
        String role = null;
                List<Customer> response = api.customersGet(context, page, perPage, search, exclude, include, offset, order, orderby, email, role);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
        Integer reassign = null;
                Customer response = api.customersIdDelete(id, force, reassign);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                Customer response = api.customersIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersIdPatchTest() throws ApiException {
        Integer id = null;
        Customer4 customer4 = null;
                Customer response = api.customersIdPatch(id, customer4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersIdPostTest() throws ApiException {
        Integer id = null;
        Customer3 customer3 = null;
                Customer response = api.customersIdPost(id, customer3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersIdPutTest() throws ApiException {
        Integer id = null;
        Customer2 customer2 = null;
                Customer response = api.customersIdPut(id, customer2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customersPostTest() throws ApiException {
        Customer1 customer1 = null;
                Customer response = api.customersPost(customer1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataContinentsGetTest() throws ApiException {
                List<DataContinents> response = api.dataContinentsGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataContinentsLocationGetTest() throws ApiException {
        String location = null;
                DataContinents response = api.dataContinentsLocationGet(location);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataCountriesGetTest() throws ApiException {
                List<DataCountries> response = api.dataCountriesGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataCountriesLocationGetTest() throws ApiException {
        String location = null;
                DataCountries response = api.dataCountriesLocationGet(location);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataCurrenciesCurrencyGetTest() throws ApiException {
        String currency = null;
                DataCurrencies response = api.dataCurrenciesCurrencyGet(currency);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataCurrenciesCurrentGetTest() throws ApiException {
                DataCurrencies response = api.dataCurrenciesCurrentGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataCurrenciesGetTest() throws ApiException {
                List<DataCurrencies> response = api.dataCurrenciesGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataGetTest() throws ApiException {
                DataIndex response = api.dataGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersBatchPatchTest() throws ApiException {
        Batch9 batch9 = null;
                Batch response = api.ordersBatchPatch(batch9);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersBatchPostTest() throws ApiException {
        Batch8 batch8 = null;
                Batch response = api.ordersBatchPost(batch8);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersBatchPutTest() throws ApiException {
        Batch7 batch7 = null;
                Batch response = api.ordersBatchPut(batch7);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        Boolean datesAreGmt = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        List<Integer> parent = null;
        List<Integer> parentExclude = null;
        List<String> status = null;
        Integer customer = null;
        Integer product = null;
        Integer dp = null;
                List<ShopOrder> response = api.ordersGet(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ShopOrder response = api.ordersIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ShopOrder response = api.ordersIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersIdPatchTest() throws ApiException {
        Integer id = null;
        ShopOrder4 shopOrder4 = null;
                ShopOrder response = api.ordersIdPatch(id, shopOrder4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersIdPostTest() throws ApiException {
        Integer id = null;
        ShopOrder3 shopOrder3 = null;
                ShopOrder response = api.ordersIdPost(id, shopOrder3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersIdPutTest() throws ApiException {
        Integer id = null;
        ShopOrder2 shopOrder2 = null;
                ShopOrder response = api.ordersIdPut(id, shopOrder2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdNotesGetTest() throws ApiException {
        Integer orderId = null;
        String context = null;
        String type = null;
                List<OrderNote> response = api.ordersOrderIdNotesGet(orderId, context, type);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdNotesIdDeleteTest() throws ApiException {
        Integer id = null;
        Integer orderId = null;
        Boolean force = null;
                OrderNote response = api.ordersOrderIdNotesIdDelete(id, orderId, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdNotesIdGetTest() throws ApiException {
        Integer id = null;
        Integer orderId = null;
        String context = null;
                OrderNote response = api.ordersOrderIdNotesIdGet(id, orderId, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdNotesPostTest() throws ApiException {
        Integer orderId = null;
        OrderNote1 orderNote1 = null;
                OrderNote response = api.ordersOrderIdNotesPost(orderId, orderNote1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdRefundsGetTest() throws ApiException {
        Integer orderId = null;
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        Boolean datesAreGmt = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        List<Integer> parent = null;
        List<Integer> parentExclude = null;
        Integer dp = null;
                List<ShopOrderRefund> response = api.ordersOrderIdRefundsGet(orderId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, dp);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdRefundsIdDeleteTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
        Boolean force = null;
                ShopOrderRefund response = api.ordersOrderIdRefundsIdDelete(orderId, id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdRefundsIdGetTest() throws ApiException {
        Integer orderId = null;
        Integer id = null;
        String context = null;
                ShopOrderRefund response = api.ordersOrderIdRefundsIdGet(orderId, id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersOrderIdRefundsPostTest() throws ApiException {
        Integer orderId = null;
        ShopOrderRefund1 shopOrderRefund1 = null;
                ShopOrderRefund response = api.ordersOrderIdRefundsPost(orderId, shopOrderRefund1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ordersPostTest() throws ApiException {
        ShopOrder1 shopOrder1 = null;
                ShopOrder response = api.ordersPost(shopOrder1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentGatewaysGetTest() throws ApiException {
        String context = null;
                List<PaymentGateway> response = api.paymentGatewaysGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentGatewaysIdGetTest() throws ApiException {
        String id = null;
        String context = null;
                PaymentGateway response = api.paymentGatewaysIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentGatewaysIdPatchTest() throws ApiException {
        String id = null;
        PaymentGateway3 paymentGateway3 = null;
                PaymentGateway response = api.paymentGatewaysIdPatch(id, paymentGateway3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentGatewaysIdPostTest() throws ApiException {
        String id = null;
        PaymentGateway2 paymentGateway2 = null;
                PaymentGateway response = api.paymentGatewaysIdPost(id, paymentGateway2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentGatewaysIdPutTest() throws ApiException {
        String id = null;
        PaymentGateway1 paymentGateway1 = null;
                PaymentGateway response = api.paymentGatewaysIdPut(id, paymentGateway1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsBatchPatchTest() throws ApiException {
        Integer attributeId = null;
        Batch12 batch12 = null;
                Batch response = api.productsAttributesAttributeIdTermsBatchPatch(attributeId, batch12);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsBatchPostTest() throws ApiException {
        Integer attributeId = null;
        Batch11 batch11 = null;
                Batch response = api.productsAttributesAttributeIdTermsBatchPost(attributeId, batch11);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsBatchPutTest() throws ApiException {
        Integer attributeId = null;
        Batch10 batch10 = null;
                Batch response = api.productsAttributesAttributeIdTermsBatchPut(attributeId, batch10);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsGetTest() throws ApiException {
        Integer attributeId = null;
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        Boolean hideEmpty = null;
        Integer parent = null;
        Integer product = null;
        String slug = null;
                List<ProductAttributeTerm> response = api.productsAttributesAttributeIdTermsGet(attributeId, context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsIdDeleteTest() throws ApiException {
        Integer id = null;
        Integer attributeId = null;
        Boolean force = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsIdDelete(id, attributeId, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsIdGetTest() throws ApiException {
        Integer id = null;
        Integer attributeId = null;
        String context = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsIdGet(id, attributeId, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsIdPatchTest() throws ApiException {
        Integer id = null;
        Integer attributeId = null;
        ProductAttributeTerm4 productAttributeTerm4 = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsIdPatch(id, attributeId, productAttributeTerm4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsIdPostTest() throws ApiException {
        Integer id = null;
        Integer attributeId = null;
        ProductAttributeTerm3 productAttributeTerm3 = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsIdPost(id, attributeId, productAttributeTerm3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsIdPutTest() throws ApiException {
        Integer id = null;
        Integer attributeId = null;
        ProductAttributeTerm2 productAttributeTerm2 = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsIdPut(id, attributeId, productAttributeTerm2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesAttributeIdTermsPostTest() throws ApiException {
        Integer attributeId = null;
        ProductAttributeTerm1 productAttributeTerm1 = null;
                ProductAttributeTerm response = api.productsAttributesAttributeIdTermsPost(attributeId, productAttributeTerm1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesBatchPatchTest() throws ApiException {
        Batch15 batch15 = null;
                Batch response = api.productsAttributesBatchPatch(batch15);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesBatchPostTest() throws ApiException {
        Batch14 batch14 = null;
                Batch response = api.productsAttributesBatchPost(batch14);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesBatchPutTest() throws ApiException {
        Batch13 batch13 = null;
                Batch response = api.productsAttributesBatchPut(batch13);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesGetTest() throws ApiException {
        String context = null;
                List<ProductAttribute> response = api.productsAttributesGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ProductAttribute response = api.productsAttributesIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ProductAttribute response = api.productsAttributesIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesIdPatchTest() throws ApiException {
        Integer id = null;
        ProductAttribute4 productAttribute4 = null;
                ProductAttribute response = api.productsAttributesIdPatch(id, productAttribute4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesIdPostTest() throws ApiException {
        Integer id = null;
        ProductAttribute3 productAttribute3 = null;
                ProductAttribute response = api.productsAttributesIdPost(id, productAttribute3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesIdPutTest() throws ApiException {
        Integer id = null;
        ProductAttribute2 productAttribute2 = null;
                ProductAttribute response = api.productsAttributesIdPut(id, productAttribute2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsAttributesPostTest() throws ApiException {
        ProductAttribute1 productAttribute1 = null;
                ProductAttribute response = api.productsAttributesPost(productAttribute1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsBatchPatchTest() throws ApiException {
        Batch30 batch30 = null;
                Batch response = api.productsBatchPatch(batch30);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsBatchPostTest() throws ApiException {
        Batch29 batch29 = null;
                Batch response = api.productsBatchPost(batch29);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsBatchPutTest() throws ApiException {
        Batch28 batch28 = null;
                Batch response = api.productsBatchPut(batch28);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesBatchPatchTest() throws ApiException {
        Batch18 batch18 = null;
                Batch response = api.productsCategoriesBatchPatch(batch18);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesBatchPostTest() throws ApiException {
        Batch17 batch17 = null;
                Batch response = api.productsCategoriesBatchPost(batch17);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesBatchPutTest() throws ApiException {
        Batch16 batch16 = null;
                Batch response = api.productsCategoriesBatchPut(batch16);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        Boolean hideEmpty = null;
        Integer parent = null;
        Integer product = null;
        String slug = null;
                List<ProductCat> response = api.productsCategoriesGet(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ProductCat response = api.productsCategoriesIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ProductCat response = api.productsCategoriesIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesIdPatchTest() throws ApiException {
        Integer id = null;
        ProductCat4 productCat4 = null;
                ProductCat response = api.productsCategoriesIdPatch(id, productCat4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesIdPostTest() throws ApiException {
        Integer id = null;
        ProductCat3 productCat3 = null;
                ProductCat response = api.productsCategoriesIdPost(id, productCat3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesIdPutTest() throws ApiException {
        Integer id = null;
        ProductCat2 productCat2 = null;
                ProductCat response = api.productsCategoriesIdPut(id, productCat2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsCategoriesPostTest() throws ApiException {
        ProductCat1 productCat1 = null;
                ProductCat response = api.productsCategoriesPost(productCat1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        Boolean datesAreGmt = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        List<Integer> parent = null;
        List<Integer> parentExclude = null;
        String slug = null;
        String status = null;
        String type = null;
        String sku = null;
        Boolean featured = null;
        String category = null;
        String tag = null;
        String shippingClass = null;
        String attribute = null;
        String attributeTerm = null;
        Boolean onSale = null;
        String minPrice = null;
        String maxPrice = null;
        String stockStatus = null;
                List<Product> response = api.productsGet(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, type, sku, featured, category, tag, shippingClass, attribute, attributeTerm, onSale, minPrice, maxPrice, stockStatus);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                Product response = api.productsIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                Product response = api.productsIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsIdPatchTest() throws ApiException {
        Integer id = null;
        Product4 product4 = null;
                Product response = api.productsIdPatch(id, product4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsIdPostTest() throws ApiException {
        Integer id = null;
        Product3 product3 = null;
                Product response = api.productsIdPost(id, product3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsIdPutTest() throws ApiException {
        Integer id = null;
        Product2 product2 = null;
                Product response = api.productsIdPut(id, product2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsPostTest() throws ApiException {
        Product1 product1 = null;
                Product response = api.productsPost(product1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsBatchPatchTest() throws ApiException {
        Integer productId = null;
        Batch33 batch33 = null;
                Batch response = api.productsProductIdVariationsBatchPatch(productId, batch33);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsBatchPostTest() throws ApiException {
        Integer productId = null;
        Batch32 batch32 = null;
                Batch response = api.productsProductIdVariationsBatchPost(productId, batch32);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsBatchPutTest() throws ApiException {
        Integer productId = null;
        Batch31 batch31 = null;
                Batch response = api.productsProductIdVariationsBatchPut(productId, batch31);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsGetTest() throws ApiException {
        Integer productId = null;
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        String modifiedAfter = null;
        String modifiedBefore = null;
        Boolean datesAreGmt = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        List<Integer> parent = null;
        List<Integer> parentExclude = null;
        String slug = null;
        String status = null;
        String sku = null;
        Boolean onSale = null;
        String minPrice = null;
        String maxPrice = null;
        String stockStatus = null;
                List<ProductVariation> response = api.productsProductIdVariationsGet(productId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, sku, onSale, minPrice, maxPrice, stockStatus);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsIdDeleteTest() throws ApiException {
        Integer productId = null;
        Integer id = null;
        Boolean force = null;
                ProductVariation response = api.productsProductIdVariationsIdDelete(productId, id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsIdGetTest() throws ApiException {
        Integer productId = null;
        Integer id = null;
        String context = null;
                ProductVariation response = api.productsProductIdVariationsIdGet(productId, id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsIdPatchTest() throws ApiException {
        Integer productId = null;
        Integer id = null;
        ProductVariation4 productVariation4 = null;
                ProductVariation response = api.productsProductIdVariationsIdPatch(productId, id, productVariation4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsIdPostTest() throws ApiException {
        Integer productId = null;
        Integer id = null;
        ProductVariation3 productVariation3 = null;
                ProductVariation response = api.productsProductIdVariationsIdPost(productId, id, productVariation3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsIdPutTest() throws ApiException {
        Integer productId = null;
        Integer id = null;
        ProductVariation2 productVariation2 = null;
                ProductVariation response = api.productsProductIdVariationsIdPut(productId, id, productVariation2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsProductIdVariationsPostTest() throws ApiException {
        Integer productId = null;
        ProductVariation1 productVariation1 = null;
                ProductVariation response = api.productsProductIdVariationsPost(productId, productVariation1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsBatchPatchTest() throws ApiException {
        Batch21 batch21 = null;
                Batch response = api.productsReviewsBatchPatch(batch21);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsBatchPostTest() throws ApiException {
        Batch20 batch20 = null;
                Batch response = api.productsReviewsBatchPost(batch20);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsBatchPutTest() throws ApiException {
        Batch19 batch19 = null;
                Batch response = api.productsReviewsBatchPut(batch19);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        List<Integer> reviewer = null;
        List<Integer> reviewerExclude = null;
        String reviewerEmail = null;
        List<Integer> product = null;
        String status = null;
                List<ProductReview> response = api.productsReviewsGet(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ProductReview response = api.productsReviewsIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ProductReview response = api.productsReviewsIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsIdPatchTest() throws ApiException {
        Integer id = null;
        ProductReview4 productReview4 = null;
                ProductReview response = api.productsReviewsIdPatch(id, productReview4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsIdPostTest() throws ApiException {
        Integer id = null;
        ProductReview3 productReview3 = null;
                ProductReview response = api.productsReviewsIdPost(id, productReview3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsIdPutTest() throws ApiException {
        Integer id = null;
        ProductReview2 productReview2 = null;
                ProductReview response = api.productsReviewsIdPut(id, productReview2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsReviewsPostTest() throws ApiException {
        ProductReview1 productReview1 = null;
                ProductReview response = api.productsReviewsPost(productReview1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesBatchPatchTest() throws ApiException {
        Batch24 batch24 = null;
                Batch response = api.productsShippingClassesBatchPatch(batch24);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesBatchPostTest() throws ApiException {
        Batch23 batch23 = null;
                Batch response = api.productsShippingClassesBatchPost(batch23);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesBatchPutTest() throws ApiException {
        Batch22 batch22 = null;
                Batch response = api.productsShippingClassesBatchPut(batch22);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        Boolean hideEmpty = null;
        Integer parent = null;
        Integer product = null;
        String slug = null;
                List<ProductShippingClass> response = api.productsShippingClassesGet(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ProductShippingClass response = api.productsShippingClassesIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ProductShippingClass response = api.productsShippingClassesIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesIdPatchTest() throws ApiException {
        Integer id = null;
        ProductShippingClass4 productShippingClass4 = null;
                ProductShippingClass response = api.productsShippingClassesIdPatch(id, productShippingClass4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesIdPostTest() throws ApiException {
        Integer id = null;
        ProductShippingClass3 productShippingClass3 = null;
                ProductShippingClass response = api.productsShippingClassesIdPost(id, productShippingClass3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesIdPutTest() throws ApiException {
        Integer id = null;
        ProductShippingClass2 productShippingClass2 = null;
                ProductShippingClass response = api.productsShippingClassesIdPut(id, productShippingClass2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsShippingClassesPostTest() throws ApiException {
        ProductShippingClass1 productShippingClass1 = null;
                ProductShippingClass response = api.productsShippingClassesPost(productShippingClass1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsBatchPatchTest() throws ApiException {
        Batch27 batch27 = null;
                Batch response = api.productsTagsBatchPatch(batch27);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsBatchPostTest() throws ApiException {
        Batch26 batch26 = null;
                Batch response = api.productsTagsBatchPost(batch26);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsBatchPutTest() throws ApiException {
        Batch25 batch25 = null;
                Batch response = api.productsTagsBatchPut(batch25);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        Boolean hideEmpty = null;
        Integer parent = null;
        Integer product = null;
        String slug = null;
                List<ProductTag> response = api.productsTagsGet(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ProductTag response = api.productsTagsIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                ProductTag response = api.productsTagsIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsIdPatchTest() throws ApiException {
        Integer id = null;
        ProductTag4 productTag4 = null;
                ProductTag response = api.productsTagsIdPatch(id, productTag4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsIdPostTest() throws ApiException {
        Integer id = null;
        ProductTag3 productTag3 = null;
                ProductTag response = api.productsTagsIdPost(id, productTag3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsIdPutTest() throws ApiException {
        Integer id = null;
        ProductTag2 productTag2 = null;
                ProductTag response = api.productsTagsIdPut(id, productTag2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsTagsPostTest() throws ApiException {
        ProductTag1 productTag1 = null;
                ProductTag response = api.productsTagsPost(productTag1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsCouponsTotalsGetTest() throws ApiException {
        String context = null;
                List<ReportCouponTotal> response = api.reportsCouponsTotalsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsCustomersTotalsGetTest() throws ApiException {
        String context = null;
                List<ReportCustomerTotal> response = api.reportsCustomersTotalsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsGetTest() throws ApiException {
        String context = null;
                List<Report> response = api.reportsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsOrdersTotalsGetTest() throws ApiException {
        String context = null;
                List<ReportOrderTotal> response = api.reportsOrdersTotalsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsProductsTotalsGetTest() throws ApiException {
        String context = null;
                List<ReportProductTotal> response = api.reportsProductsTotalsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsReviewsTotalsGetTest() throws ApiException {
        String context = null;
                List<ReportReviewTotal> response = api.reportsReviewsTotalsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsSalesGetTest() throws ApiException {
        String context = null;
        String period = null;
        LocalDate dateMin = null;
        LocalDate dateMax = null;
                List<SalesReport> response = api.reportsSalesGet(context, period, dateMin, dateMax);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsTopSellersGetTest() throws ApiException {
        String context = null;
        String period = null;
        LocalDate dateMin = null;
        LocalDate dateMax = null;
                List<TopSellersReport> response = api.reportsTopSellersGet(context, period, dateMin, dateMax);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rootGetTest() throws ApiException {
        String namespace = null;
        String context = null;
                api.rootGet(namespace, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingMethodsGetTest() throws ApiException {
        String context = null;
                List<ShippingMethod> response = api.shippingMethodsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingMethodsIdGetTest() throws ApiException {
        String id = null;
        String context = null;
                ShippingMethod response = api.shippingMethodsIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesGetTest() throws ApiException {
                List<ShippingZone> response = api.shippingZonesGet();
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                ShippingZone response = api.shippingZonesIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdGetTest() throws ApiException {
        Integer id = null;
                ShippingZone response = api.shippingZonesIdGet(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdLocationsGetTest() throws ApiException {
        Integer id = null;
                List<ShippingZoneLocation> response = api.shippingZonesIdLocationsGet(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdLocationsPatchTest() throws ApiException {
        Integer id = null;
        ShippingZoneLocation3 shippingZoneLocation3 = null;
                ShippingZoneLocation response = api.shippingZonesIdLocationsPatch(id, shippingZoneLocation3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdLocationsPostTest() throws ApiException {
        Integer id = null;
        ShippingZoneLocation2 shippingZoneLocation2 = null;
                ShippingZoneLocation response = api.shippingZonesIdLocationsPost(id, shippingZoneLocation2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdLocationsPutTest() throws ApiException {
        Integer id = null;
        ShippingZoneLocation1 shippingZoneLocation1 = null;
                ShippingZoneLocation response = api.shippingZonesIdLocationsPut(id, shippingZoneLocation1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdPatchTest() throws ApiException {
        Integer id = null;
        ShippingZone4 shippingZone4 = null;
                ShippingZone response = api.shippingZonesIdPatch(id, shippingZone4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdPostTest() throws ApiException {
        Integer id = null;
        ShippingZone3 shippingZone3 = null;
                ShippingZone response = api.shippingZonesIdPost(id, shippingZone3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesIdPutTest() throws ApiException {
        Integer id = null;
        ShippingZone2 shippingZone2 = null;
                ShippingZone response = api.shippingZonesIdPut(id, shippingZone2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesPostTest() throws ApiException {
        ShippingZone1 shippingZone1 = null;
                ShippingZone response = api.shippingZonesPost(shippingZone1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsGetTest() throws ApiException {
        Integer zoneId = null;
                List<ShippingZoneMethod> response = api.shippingZonesZoneIdMethodsGet(zoneId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsInstanceIdDeleteTest() throws ApiException {
        Integer zoneId = null;
        Integer instanceId = null;
        Boolean force = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsInstanceIdDelete(zoneId, instanceId, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsInstanceIdGetTest() throws ApiException {
        Integer zoneId = null;
        Integer instanceId = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsInstanceIdGet(zoneId, instanceId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsInstanceIdPatchTest() throws ApiException {
        Integer zoneId = null;
        Integer instanceId = null;
        ShippingZoneMethod4 shippingZoneMethod4 = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsInstanceIdPatch(zoneId, instanceId, shippingZoneMethod4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsInstanceIdPostTest() throws ApiException {
        Integer zoneId = null;
        Integer instanceId = null;
        ShippingZoneMethod3 shippingZoneMethod3 = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsInstanceIdPost(zoneId, instanceId, shippingZoneMethod3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsInstanceIdPutTest() throws ApiException {
        Integer zoneId = null;
        Integer instanceId = null;
        ShippingZoneMethod2 shippingZoneMethod2 = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsInstanceIdPut(zoneId, instanceId, shippingZoneMethod2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shippingZonesZoneIdMethodsPostTest() throws ApiException {
        Integer zoneId = null;
        ShippingZoneMethod1 shippingZoneMethod1 = null;
                ShippingZoneMethod response = api.shippingZonesZoneIdMethodsPost(zoneId, shippingZoneMethod1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusGetTest() throws ApiException {
        String context = null;
                SystemStatus response = api.systemStatusGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusToolsGetTest() throws ApiException {
        String context = null;
                List<SystemStatusTool> response = api.systemStatusToolsGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusToolsIdGetTest() throws ApiException {
        String id = null;
                SystemStatusTool response = api.systemStatusToolsIdGet(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusToolsIdPatchTest() throws ApiException {
        String id = null;
        SystemStatusTool3 systemStatusTool3 = null;
                SystemStatusTool response = api.systemStatusToolsIdPatch(id, systemStatusTool3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusToolsIdPostTest() throws ApiException {
        String id = null;
        SystemStatusTool2 systemStatusTool2 = null;
                SystemStatusTool response = api.systemStatusToolsIdPost(id, systemStatusTool2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusToolsIdPutTest() throws ApiException {
        String id = null;
        SystemStatusTool1 systemStatusTool1 = null;
                SystemStatusTool response = api.systemStatusToolsIdPut(id, systemStatusTool1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesBatchPatchTest() throws ApiException {
        Batch36 batch36 = null;
                Batch response = api.taxesBatchPatch(batch36);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesBatchPostTest() throws ApiException {
        Batch35 batch35 = null;
                Batch response = api.taxesBatchPost(batch35);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesBatchPutTest() throws ApiException {
        Batch34 batch34 = null;
                Batch response = api.taxesBatchPut(batch34);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesClassesGetTest() throws ApiException {
        String context = null;
                List<TaxClass> response = api.taxesClassesGet(context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesClassesPostTest() throws ApiException {
        TaxClass1 taxClass1 = null;
                TaxClass response = api.taxesClassesPost(taxClass1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesClassesSlugDeleteTest() throws ApiException {
        String slug = null;
        Boolean force = null;
                TaxClass response = api.taxesClassesSlugDelete(slug, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesClassesSlugGetTest() throws ApiException {
        String slug = null;
                TaxClass response = api.taxesClassesSlugGet(slug);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        String propertyClass = null;
                List<Tax> response = api.taxesGet(context, page, perPage, offset, order, orderby, propertyClass);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                Tax response = api.taxesIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                Tax response = api.taxesIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesIdPatchTest() throws ApiException {
        Integer id = null;
        Tax4 tax4 = null;
                Tax response = api.taxesIdPatch(id, tax4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesIdPostTest() throws ApiException {
        Integer id = null;
        Tax3 tax3 = null;
                Tax response = api.taxesIdPost(id, tax3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesIdPutTest() throws ApiException {
        Integer id = null;
        Tax2 tax2 = null;
                Tax response = api.taxesIdPut(id, tax2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taxesPostTest() throws ApiException {
        Tax1 tax1 = null;
                Tax response = api.taxesPost(tax1);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksBatchPatchTest() throws ApiException {
        Batch39 batch39 = null;
                Batch response = api.webhooksBatchPatch(batch39);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksBatchPostTest() throws ApiException {
        Batch38 batch38 = null;
                Batch response = api.webhooksBatchPost(batch38);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksBatchPutTest() throws ApiException {
        Batch37 batch37 = null;
                Batch response = api.webhooksBatchPut(batch37);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksGetTest() throws ApiException {
        String context = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String after = null;
        String before = null;
        List<Integer> exclude = null;
        List<Integer> include = null;
        Integer offset = null;
        String order = null;
        String orderby = null;
        String status = null;
                List<Webhook> response = api.webhooksGet(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, status);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksIdDeleteTest() throws ApiException {
        Integer id = null;
        Boolean force = null;
                Webhook response = api.webhooksIdDelete(id, force);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksIdGetTest() throws ApiException {
        Integer id = null;
        String context = null;
                Webhook response = api.webhooksIdGet(id, context);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksIdPatchTest() throws ApiException {
        Integer id = null;
        Webhook4 webhook4 = null;
                Webhook response = api.webhooksIdPatch(id, webhook4);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksIdPostTest() throws ApiException {
        Integer id = null;
        Webhook3 webhook3 = null;
                Webhook response = api.webhooksIdPost(id, webhook3);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksIdPutTest() throws ApiException {
        Integer id = null;
        Webhook2 webhook2 = null;
                Webhook response = api.webhooksIdPut(id, webhook2);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void webhooksPostTest() throws ApiException {
        Webhook1 webhook1 = null;
                Webhook response = api.webhooksPost(webhook1);
        // TODO: test validations
    }
    
}
