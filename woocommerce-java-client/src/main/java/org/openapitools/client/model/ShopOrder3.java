/*
 * wc/v3
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CouponsMetaData;
import org.openapitools.client.model.OrdersBilling;
import org.openapitools.client.model.OrdersCouponLines;
import org.openapitools.client.model.OrdersFeeLines;
import org.openapitools.client.model.OrdersLineItems;
import org.openapitools.client.model.OrdersShipping;
import org.openapitools.client.model.OrdersShippingLines;

/**
 * ShopOrder3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-03T11:14:37.017890013+01:00[Europe/Amsterdam]")
public class ShopOrder3 {
  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  /**
   * Order status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    PROCESSING("processing"),
    
    ON_HOLD("on-hold"),
    
    COMPLETED("completed"),
    
    CANCELLED("cancelled"),
    
    REFUNDED("refunded"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Currency the order was created with, in ISO format.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    AED("AED"),
    
    AFN("AFN"),
    
    ALL("ALL"),
    
    AMD("AMD"),
    
    ANG("ANG"),
    
    AOA("AOA"),
    
    ARS("ARS"),
    
    AUD("AUD"),
    
    AWG("AWG"),
    
    AZN("AZN"),
    
    BAM("BAM"),
    
    BBD("BBD"),
    
    BDT("BDT"),
    
    BGN("BGN"),
    
    BHD("BHD"),
    
    BIF("BIF"),
    
    BMD("BMD"),
    
    BND("BND"),
    
    BOB("BOB"),
    
    BRL("BRL"),
    
    BSD("BSD"),
    
    BTC("BTC"),
    
    BTN("BTN"),
    
    BWP("BWP"),
    
    BYR("BYR"),
    
    BYN("BYN"),
    
    BZD("BZD"),
    
    CAD("CAD"),
    
    CDF("CDF"),
    
    CHF("CHF"),
    
    CLP("CLP"),
    
    CNY("CNY"),
    
    COP("COP"),
    
    CRC("CRC"),
    
    CUC("CUC"),
    
    CUP("CUP"),
    
    CVE("CVE"),
    
    CZK("CZK"),
    
    DJF("DJF"),
    
    DKK("DKK"),
    
    DOP("DOP"),
    
    DZD("DZD"),
    
    EGP("EGP"),
    
    ERN("ERN"),
    
    ETB("ETB"),
    
    EUR("EUR"),
    
    FJD("FJD"),
    
    FKP("FKP"),
    
    GBP("GBP"),
    
    GEL("GEL"),
    
    GGP("GGP"),
    
    GHS("GHS"),
    
    GIP("GIP"),
    
    GMD("GMD"),
    
    GNF("GNF"),
    
    GTQ("GTQ"),
    
    GYD("GYD"),
    
    HKD("HKD"),
    
    HNL("HNL"),
    
    HRK("HRK"),
    
    HTG("HTG"),
    
    HUF("HUF"),
    
    IDR("IDR"),
    
    ILS("ILS"),
    
    IMP("IMP"),
    
    INR("INR"),
    
    IQD("IQD"),
    
    IRR("IRR"),
    
    IRT("IRT"),
    
    ISK("ISK"),
    
    JEP("JEP"),
    
    JMD("JMD"),
    
    JOD("JOD"),
    
    JPY("JPY"),
    
    KES("KES"),
    
    KGS("KGS"),
    
    KHR("KHR"),
    
    KMF("KMF"),
    
    KPW("KPW"),
    
    KRW("KRW"),
    
    KWD("KWD"),
    
    KYD("KYD"),
    
    KZT("KZT"),
    
    LAK("LAK"),
    
    LBP("LBP"),
    
    LKR("LKR"),
    
    LRD("LRD"),
    
    LSL("LSL"),
    
    LYD("LYD"),
    
    MAD("MAD"),
    
    MDL("MDL"),
    
    MGA("MGA"),
    
    MKD("MKD"),
    
    MMK("MMK"),
    
    MNT("MNT"),
    
    MOP("MOP"),
    
    MRU("MRU"),
    
    MUR("MUR"),
    
    MVR("MVR"),
    
    MWK("MWK"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    MZN("MZN"),
    
    NAD("NAD"),
    
    NGN("NGN"),
    
    NIO("NIO"),
    
    NOK("NOK"),
    
    NPR("NPR"),
    
    NZD("NZD"),
    
    OMR("OMR"),
    
    PAB("PAB"),
    
    PEN("PEN"),
    
    PGK("PGK"),
    
    PHP("PHP"),
    
    PKR("PKR"),
    
    PLN("PLN"),
    
    PRB("PRB"),
    
    PYG("PYG"),
    
    QAR("QAR"),
    
    RON("RON"),
    
    RSD("RSD"),
    
    RUB("RUB"),
    
    RWF("RWF"),
    
    SAR("SAR"),
    
    SBD("SBD"),
    
    SCR("SCR"),
    
    SDG("SDG"),
    
    SEK("SEK"),
    
    SGD("SGD"),
    
    SHP("SHP"),
    
    SLL("SLL"),
    
    SOS("SOS"),
    
    SRD("SRD"),
    
    SSP("SSP"),
    
    STN("STN"),
    
    SYP("SYP"),
    
    SZL("SZL"),
    
    THB("THB"),
    
    TJS("TJS"),
    
    TMT("TMT"),
    
    TND("TND"),
    
    TOP("TOP"),
    
    TRY("TRY"),
    
    TTD("TTD"),
    
    TWD("TWD"),
    
    TZS("TZS"),
    
    UAH("UAH"),
    
    UGX("UGX"),
    
    USD("USD"),
    
    UYU("UYU"),
    
    UZS("UZS"),
    
    VEF("VEF"),
    
    VES("VES"),
    
    VND("VND"),
    
    VUV("VUV"),
    
    WST("WST"),
    
    XAF("XAF"),
    
    XCD("XCD"),
    
    XOF("XOF"),
    
    XPF("XPF"),
    
    YER("YER"),
    
    ZAR("ZAR"),
    
    ZMW("ZMW");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NOTE = "customer_note";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NOTE)
  private String customerNote;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private OrdersBilling billing;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private OrdersShipping shipping;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_TITLE = "payment_method_title";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_TITLE)
  private String paymentMethodTitle;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_META_DATA = "meta_data";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private List<CouponsMetaData> metaData = null;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrdersLineItems> lineItems = null;

  public static final String SERIALIZED_NAME_SHIPPING_LINES = "shipping_lines";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LINES)
  private List<OrdersShippingLines> shippingLines = null;

  public static final String SERIALIZED_NAME_FEE_LINES = "fee_lines";
  @SerializedName(SERIALIZED_NAME_FEE_LINES)
  private List<OrdersFeeLines> feeLines = null;

  public static final String SERIALIZED_NAME_COUPON_LINES = "coupon_lines";
  @SerializedName(SERIALIZED_NAME_COUPON_LINES)
  private List<OrdersCouponLines> couponLines = null;

  public static final String SERIALIZED_NAME_SET_PAID = "set_paid";
  @SerializedName(SERIALIZED_NAME_SET_PAID)
  private Boolean setPaid;


  public ShopOrder3 parentId(Integer parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Parent order ID.
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parent order ID.")

  public Integer getParentId() {
    return parentId;
  }


  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public ShopOrder3 status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Order status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order status.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ShopOrder3 currency(CurrencyEnum currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency the order was created with, in ISO format.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency the order was created with, in ISO format.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public ShopOrder3 customerId(Integer customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * User ID who owns the order. 0 for guests.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User ID who owns the order. 0 for guests.")

  public Integer getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public ShopOrder3 customerNote(String customerNote) {
    
    this.customerNote = customerNote;
    return this;
  }

   /**
   * Note left by customer during checkout.
   * @return customerNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Note left by customer during checkout.")

  public String getCustomerNote() {
    return customerNote;
  }


  public void setCustomerNote(String customerNote) {
    this.customerNote = customerNote;
  }


  public ShopOrder3 billing(OrdersBilling billing) {
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrdersBilling getBilling() {
    return billing;
  }


  public void setBilling(OrdersBilling billing) {
    this.billing = billing;
  }


  public ShopOrder3 shipping(OrdersShipping shipping) {
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrdersShipping getShipping() {
    return shipping;
  }


  public void setShipping(OrdersShipping shipping) {
    this.shipping = shipping;
  }


  public ShopOrder3 paymentMethod(String paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method ID.
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method ID.")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public ShopOrder3 paymentMethodTitle(String paymentMethodTitle) {
    
    this.paymentMethodTitle = paymentMethodTitle;
    return this;
  }

   /**
   * Payment method title.
   * @return paymentMethodTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method title.")

  public String getPaymentMethodTitle() {
    return paymentMethodTitle;
  }


  public void setPaymentMethodTitle(String paymentMethodTitle) {
    this.paymentMethodTitle = paymentMethodTitle;
  }


  public ShopOrder3 transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Unique transaction ID.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique transaction ID.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ShopOrder3 metaData(List<CouponsMetaData> metaData) {
    
    this.metaData = metaData;
    return this;
  }

  public ShopOrder3 addMetaDataItem(CouponsMetaData metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new ArrayList<CouponsMetaData>();
    }
    this.metaData.add(metaDataItem);
    return this;
  }

   /**
   * Meta data.
   * @return metaData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Meta data.")

  public List<CouponsMetaData> getMetaData() {
    return metaData;
  }


  public void setMetaData(List<CouponsMetaData> metaData) {
    this.metaData = metaData;
  }


  public ShopOrder3 lineItems(List<OrdersLineItems> lineItems) {
    
    this.lineItems = lineItems;
    return this;
  }

  public ShopOrder3 addLineItemsItem(OrdersLineItems lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<OrdersLineItems>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Line items data.
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Line items data.")

  public List<OrdersLineItems> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<OrdersLineItems> lineItems) {
    this.lineItems = lineItems;
  }


  public ShopOrder3 shippingLines(List<OrdersShippingLines> shippingLines) {
    
    this.shippingLines = shippingLines;
    return this;
  }

  public ShopOrder3 addShippingLinesItem(OrdersShippingLines shippingLinesItem) {
    if (this.shippingLines == null) {
      this.shippingLines = new ArrayList<OrdersShippingLines>();
    }
    this.shippingLines.add(shippingLinesItem);
    return this;
  }

   /**
   * Shipping lines data.
   * @return shippingLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping lines data.")

  public List<OrdersShippingLines> getShippingLines() {
    return shippingLines;
  }


  public void setShippingLines(List<OrdersShippingLines> shippingLines) {
    this.shippingLines = shippingLines;
  }


  public ShopOrder3 feeLines(List<OrdersFeeLines> feeLines) {
    
    this.feeLines = feeLines;
    return this;
  }

  public ShopOrder3 addFeeLinesItem(OrdersFeeLines feeLinesItem) {
    if (this.feeLines == null) {
      this.feeLines = new ArrayList<OrdersFeeLines>();
    }
    this.feeLines.add(feeLinesItem);
    return this;
  }

   /**
   * Fee lines data.
   * @return feeLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fee lines data.")

  public List<OrdersFeeLines> getFeeLines() {
    return feeLines;
  }


  public void setFeeLines(List<OrdersFeeLines> feeLines) {
    this.feeLines = feeLines;
  }


  public ShopOrder3 couponLines(List<OrdersCouponLines> couponLines) {
    
    this.couponLines = couponLines;
    return this;
  }

  public ShopOrder3 addCouponLinesItem(OrdersCouponLines couponLinesItem) {
    if (this.couponLines == null) {
      this.couponLines = new ArrayList<OrdersCouponLines>();
    }
    this.couponLines.add(couponLinesItem);
    return this;
  }

   /**
   * Coupons line data.
   * @return couponLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupons line data.")

  public List<OrdersCouponLines> getCouponLines() {
    return couponLines;
  }


  public void setCouponLines(List<OrdersCouponLines> couponLines) {
    this.couponLines = couponLines;
  }


  public ShopOrder3 setPaid(Boolean setPaid) {
    
    this.setPaid = setPaid;
    return this;
  }

   /**
   * Define if the order is paid. It will set the status to processing and reduce stock items.
   * @return setPaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define if the order is paid. It will set the status to processing and reduce stock items.")

  public Boolean getSetPaid() {
    return setPaid;
  }


  public void setSetPaid(Boolean setPaid) {
    this.setPaid = setPaid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopOrder3 shopOrder3 = (ShopOrder3) o;
    return Objects.equals(this.parentId, shopOrder3.parentId) &&
        Objects.equals(this.status, shopOrder3.status) &&
        Objects.equals(this.currency, shopOrder3.currency) &&
        Objects.equals(this.customerId, shopOrder3.customerId) &&
        Objects.equals(this.customerNote, shopOrder3.customerNote) &&
        Objects.equals(this.billing, shopOrder3.billing) &&
        Objects.equals(this.shipping, shopOrder3.shipping) &&
        Objects.equals(this.paymentMethod, shopOrder3.paymentMethod) &&
        Objects.equals(this.paymentMethodTitle, shopOrder3.paymentMethodTitle) &&
        Objects.equals(this.transactionId, shopOrder3.transactionId) &&
        Objects.equals(this.metaData, shopOrder3.metaData) &&
        Objects.equals(this.lineItems, shopOrder3.lineItems) &&
        Objects.equals(this.shippingLines, shopOrder3.shippingLines) &&
        Objects.equals(this.feeLines, shopOrder3.feeLines) &&
        Objects.equals(this.couponLines, shopOrder3.couponLines) &&
        Objects.equals(this.setPaid, shopOrder3.setPaid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentId, status, currency, customerId, customerNote, billing, shipping, paymentMethod, paymentMethodTitle, transactionId, metaData, lineItems, shippingLines, feeLines, couponLines, setPaid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopOrder3 {\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerNote: ").append(toIndentedString(customerNote)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethodTitle: ").append(toIndentedString(paymentMethodTitle)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    shippingLines: ").append(toIndentedString(shippingLines)).append("\n");
    sb.append("    feeLines: ").append(toIndentedString(feeLines)).append("\n");
    sb.append("    couponLines: ").append(toIndentedString(couponLines)).append("\n");
    sb.append("    setPaid: ").append(toIndentedString(setPaid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

