/*
 * wc/v3
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Batch;
import org.openapitools.client.model.Batch1;
import org.openapitools.client.model.Batch10;
import org.openapitools.client.model.Batch11;
import org.openapitools.client.model.Batch12;
import org.openapitools.client.model.Batch13;
import org.openapitools.client.model.Batch14;
import org.openapitools.client.model.Batch15;
import org.openapitools.client.model.Batch16;
import org.openapitools.client.model.Batch17;
import org.openapitools.client.model.Batch18;
import org.openapitools.client.model.Batch19;
import org.openapitools.client.model.Batch2;
import org.openapitools.client.model.Batch20;
import org.openapitools.client.model.Batch21;
import org.openapitools.client.model.Batch22;
import org.openapitools.client.model.Batch23;
import org.openapitools.client.model.Batch24;
import org.openapitools.client.model.Batch25;
import org.openapitools.client.model.Batch26;
import org.openapitools.client.model.Batch27;
import org.openapitools.client.model.Batch28;
import org.openapitools.client.model.Batch29;
import org.openapitools.client.model.Batch3;
import org.openapitools.client.model.Batch30;
import org.openapitools.client.model.Batch31;
import org.openapitools.client.model.Batch32;
import org.openapitools.client.model.Batch33;
import org.openapitools.client.model.Batch34;
import org.openapitools.client.model.Batch35;
import org.openapitools.client.model.Batch36;
import org.openapitools.client.model.Batch37;
import org.openapitools.client.model.Batch38;
import org.openapitools.client.model.Batch39;
import org.openapitools.client.model.Batch4;
import org.openapitools.client.model.Batch5;
import org.openapitools.client.model.Batch6;
import org.openapitools.client.model.Batch7;
import org.openapitools.client.model.Batch8;
import org.openapitools.client.model.Batch9;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Customer1;
import org.openapitools.client.model.Customer2;
import org.openapitools.client.model.Customer3;
import org.openapitools.client.model.Customer4;
import org.openapitools.client.model.CustomerDownload;
import org.openapitools.client.model.DataContinents;
import org.openapitools.client.model.DataCountries;
import org.openapitools.client.model.DataCurrencies;
import org.openapitools.client.model.DataIndex;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.OrderNote;
import org.openapitools.client.model.OrderNote1;
import org.openapitools.client.model.PaymentGateway;
import org.openapitools.client.model.PaymentGateway1;
import org.openapitools.client.model.PaymentGateway2;
import org.openapitools.client.model.PaymentGateway3;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.Product1;
import org.openapitools.client.model.Product2;
import org.openapitools.client.model.Product3;
import org.openapitools.client.model.Product4;
import org.openapitools.client.model.ProductAttribute;
import org.openapitools.client.model.ProductAttribute1;
import org.openapitools.client.model.ProductAttribute2;
import org.openapitools.client.model.ProductAttribute3;
import org.openapitools.client.model.ProductAttribute4;
import org.openapitools.client.model.ProductAttributeTerm;
import org.openapitools.client.model.ProductAttributeTerm1;
import org.openapitools.client.model.ProductAttributeTerm2;
import org.openapitools.client.model.ProductAttributeTerm3;
import org.openapitools.client.model.ProductAttributeTerm4;
import org.openapitools.client.model.ProductCat;
import org.openapitools.client.model.ProductCat1;
import org.openapitools.client.model.ProductCat2;
import org.openapitools.client.model.ProductCat3;
import org.openapitools.client.model.ProductCat4;
import org.openapitools.client.model.ProductReview;
import org.openapitools.client.model.ProductReview1;
import org.openapitools.client.model.ProductReview2;
import org.openapitools.client.model.ProductReview3;
import org.openapitools.client.model.ProductReview4;
import org.openapitools.client.model.ProductShippingClass;
import org.openapitools.client.model.ProductShippingClass1;
import org.openapitools.client.model.ProductShippingClass2;
import org.openapitools.client.model.ProductShippingClass3;
import org.openapitools.client.model.ProductShippingClass4;
import org.openapitools.client.model.ProductTag;
import org.openapitools.client.model.ProductTag1;
import org.openapitools.client.model.ProductTag2;
import org.openapitools.client.model.ProductTag3;
import org.openapitools.client.model.ProductTag4;
import org.openapitools.client.model.ProductVariation;
import org.openapitools.client.model.ProductVariation1;
import org.openapitools.client.model.ProductVariation2;
import org.openapitools.client.model.ProductVariation3;
import org.openapitools.client.model.ProductVariation4;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportCouponTotal;
import org.openapitools.client.model.ReportCustomerTotal;
import org.openapitools.client.model.ReportOrderTotal;
import org.openapitools.client.model.ReportProductTotal;
import org.openapitools.client.model.ReportReviewTotal;
import org.openapitools.client.model.SalesReport;
import org.openapitools.client.model.ShippingMethod;
import org.openapitools.client.model.ShippingZone;
import org.openapitools.client.model.ShippingZone1;
import org.openapitools.client.model.ShippingZone2;
import org.openapitools.client.model.ShippingZone3;
import org.openapitools.client.model.ShippingZone4;
import org.openapitools.client.model.ShippingZoneLocation;
import org.openapitools.client.model.ShippingZoneLocation1;
import org.openapitools.client.model.ShippingZoneLocation2;
import org.openapitools.client.model.ShippingZoneLocation3;
import org.openapitools.client.model.ShippingZoneMethod;
import org.openapitools.client.model.ShippingZoneMethod1;
import org.openapitools.client.model.ShippingZoneMethod2;
import org.openapitools.client.model.ShippingZoneMethod3;
import org.openapitools.client.model.ShippingZoneMethod4;
import org.openapitools.client.model.ShopCoupon;
import org.openapitools.client.model.ShopCoupon1;
import org.openapitools.client.model.ShopCoupon2;
import org.openapitools.client.model.ShopCoupon3;
import org.openapitools.client.model.ShopCoupon4;
import org.openapitools.client.model.ShopOrder;
import org.openapitools.client.model.ShopOrder1;
import org.openapitools.client.model.ShopOrder2;
import org.openapitools.client.model.ShopOrder3;
import org.openapitools.client.model.ShopOrder4;
import org.openapitools.client.model.ShopOrderRefund;
import org.openapitools.client.model.ShopOrderRefund1;
import org.openapitools.client.model.SystemStatus;
import org.openapitools.client.model.SystemStatusTool;
import org.openapitools.client.model.SystemStatusTool1;
import org.openapitools.client.model.SystemStatusTool2;
import org.openapitools.client.model.SystemStatusTool3;
import org.openapitools.client.model.Tax;
import org.openapitools.client.model.Tax1;
import org.openapitools.client.model.Tax2;
import org.openapitools.client.model.Tax3;
import org.openapitools.client.model.Tax4;
import org.openapitools.client.model.TaxClass;
import org.openapitools.client.model.TaxClass1;
import org.openapitools.client.model.TopSellersReport;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.Webhook1;
import org.openapitools.client.model.Webhook2;
import org.openapitools.client.model.Webhook3;
import org.openapitools.client.model.Webhook4;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for couponsBatchPatch
     * @param batch3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPatchCall(Batch3 batch3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch3;

        // create path and map variables
        String localVarPath = "/coupons/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsBatchPatchValidateBeforeCall(Batch3 batch3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch3' is set
        if (batch3 == null) {
            throw new ApiException("Missing the required parameter 'batch3' when calling couponsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = couponsBatchPatchCall(batch3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch3  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch couponsBatchPatch(Batch3 batch3) throws ApiException {
        ApiResponse<Batch> localVarResp = couponsBatchPatchWithHttpInfo(batch3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch3  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> couponsBatchPatchWithHttpInfo(Batch3 batch3) throws ApiException {
        okhttp3.Call localVarCall = couponsBatchPatchValidateBeforeCall(batch3, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPatchAsync(Batch3 batch3, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsBatchPatchValidateBeforeCall(batch3, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsBatchPost
     * @param batch2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPostCall(Batch2 batch2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch2;

        // create path and map variables
        String localVarPath = "/coupons/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsBatchPostValidateBeforeCall(Batch2 batch2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch2' is set
        if (batch2 == null) {
            throw new ApiException("Missing the required parameter 'batch2' when calling couponsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = couponsBatchPostCall(batch2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch2  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch couponsBatchPost(Batch2 batch2) throws ApiException {
        ApiResponse<Batch> localVarResp = couponsBatchPostWithHttpInfo(batch2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch2  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> couponsBatchPostWithHttpInfo(Batch2 batch2) throws ApiException {
        okhttp3.Call localVarCall = couponsBatchPostValidateBeforeCall(batch2, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPostAsync(Batch2 batch2, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsBatchPostValidateBeforeCall(batch2, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsBatchPut
     * @param batch1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPutCall(Batch1 batch1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch1;

        // create path and map variables
        String localVarPath = "/coupons/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsBatchPutValidateBeforeCall(Batch1 batch1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch1' is set
        if (batch1 == null) {
            throw new ApiException("Missing the required parameter 'batch1' when calling couponsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = couponsBatchPutCall(batch1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch1  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch couponsBatchPut(Batch1 batch1) throws ApiException {
        ApiResponse<Batch> localVarResp = couponsBatchPutWithHttpInfo(batch1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch1  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> couponsBatchPutWithHttpInfo(Batch1 batch1) throws ApiException {
        okhttp3.Call localVarCall = couponsBatchPutValidateBeforeCall(batch1, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsBatchPutAsync(Batch1 batch1, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsBatchPutValidateBeforeCall(batch1, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param code Limit result set to resources with a specific code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsGetCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String code, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = couponsGetCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, code, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param code Limit result set to resources with a specific code. (optional)
     * @return List&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShopCoupon> couponsGet(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String code) throws ApiException {
        ApiResponse<List<ShopCoupon>> localVarResp = couponsGetWithHttpInfo(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, code);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param code Limit result set to resources with a specific code. (optional)
     * @return ApiResponse&lt;List&lt;ShopCoupon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShopCoupon>> couponsGetWithHttpInfo(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String code) throws ApiException {
        okhttp3.Call localVarCall = couponsGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, code, null);
        Type localVarReturnType = new TypeToken<List<ShopCoupon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param code Limit result set to resources with a specific code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsGetAsync(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String code, final ApiCallback<List<ShopCoupon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, code, _callback);
        Type localVarReturnType = new TypeToken<List<ShopCoupon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupons/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling couponsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = couponsIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = couponsIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupons/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling couponsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = couponsIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = couponsIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdGetAsync(Integer id, String context, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPatchCall(Integer id, ShopCoupon4 shopCoupon4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopCoupon4;

        // create path and map variables
        String localVarPath = "/coupons/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsIdPatchValidateBeforeCall(Integer id, ShopCoupon4 shopCoupon4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling couponsIdPatch(Async)");
        }
        
        // verify the required parameter 'shopCoupon4' is set
        if (shopCoupon4 == null) {
            throw new ApiException("Missing the required parameter 'shopCoupon4' when calling couponsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = couponsIdPatchCall(id, shopCoupon4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon4  (required)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsIdPatch(Integer id, ShopCoupon4 shopCoupon4) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsIdPatchWithHttpInfo(id, shopCoupon4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon4  (required)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsIdPatchWithHttpInfo(Integer id, ShopCoupon4 shopCoupon4) throws ApiException {
        okhttp3.Call localVarCall = couponsIdPatchValidateBeforeCall(id, shopCoupon4, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPatchAsync(Integer id, ShopCoupon4 shopCoupon4, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsIdPatchValidateBeforeCall(id, shopCoupon4, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsIdPost
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPostCall(Integer id, ShopCoupon3 shopCoupon3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopCoupon3;

        // create path and map variables
        String localVarPath = "/coupons/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsIdPostValidateBeforeCall(Integer id, ShopCoupon3 shopCoupon3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling couponsIdPost(Async)");
        }
        
        // verify the required parameter 'shopCoupon3' is set
        if (shopCoupon3 == null) {
            throw new ApiException("Missing the required parameter 'shopCoupon3' when calling couponsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = couponsIdPostCall(id, shopCoupon3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon3  (required)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsIdPost(Integer id, ShopCoupon3 shopCoupon3) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsIdPostWithHttpInfo(id, shopCoupon3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon3  (required)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsIdPostWithHttpInfo(Integer id, ShopCoupon3 shopCoupon3) throws ApiException {
        okhttp3.Call localVarCall = couponsIdPostValidateBeforeCall(id, shopCoupon3, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPostAsync(Integer id, ShopCoupon3 shopCoupon3, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsIdPostValidateBeforeCall(id, shopCoupon3, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsIdPut
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPutCall(Integer id, ShopCoupon2 shopCoupon2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopCoupon2;

        // create path and map variables
        String localVarPath = "/coupons/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsIdPutValidateBeforeCall(Integer id, ShopCoupon2 shopCoupon2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling couponsIdPut(Async)");
        }
        
        // verify the required parameter 'shopCoupon2' is set
        if (shopCoupon2 == null) {
            throw new ApiException("Missing the required parameter 'shopCoupon2' when calling couponsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = couponsIdPutCall(id, shopCoupon2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon2  (required)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsIdPut(Integer id, ShopCoupon2 shopCoupon2) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsIdPutWithHttpInfo(id, shopCoupon2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon2  (required)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsIdPutWithHttpInfo(Integer id, ShopCoupon2 shopCoupon2) throws ApiException {
        okhttp3.Call localVarCall = couponsIdPutValidateBeforeCall(id, shopCoupon2, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopCoupon2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsIdPutAsync(Integer id, ShopCoupon2 shopCoupon2, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsIdPutValidateBeforeCall(id, shopCoupon2, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for couponsPost
     * @param shopCoupon1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsPostCall(ShopCoupon1 shopCoupon1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopCoupon1;

        // create path and map variables
        String localVarPath = "/coupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call couponsPostValidateBeforeCall(ShopCoupon1 shopCoupon1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopCoupon1' is set
        if (shopCoupon1 == null) {
            throw new ApiException("Missing the required parameter 'shopCoupon1' when calling couponsPost(Async)");
        }
        

        okhttp3.Call localVarCall = couponsPostCall(shopCoupon1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param shopCoupon1  (required)
     * @return ShopCoupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopCoupon couponsPost(ShopCoupon1 shopCoupon1) throws ApiException {
        ApiResponse<ShopCoupon> localVarResp = couponsPostWithHttpInfo(shopCoupon1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param shopCoupon1  (required)
     * @return ApiResponse&lt;ShopCoupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopCoupon> couponsPostWithHttpInfo(ShopCoupon1 shopCoupon1) throws ApiException {
        okhttp3.Call localVarCall = couponsPostValidateBeforeCall(shopCoupon1, null);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param shopCoupon1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call couponsPostAsync(ShopCoupon1 shopCoupon1, final ApiCallback<ShopCoupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = couponsPostValidateBeforeCall(shopCoupon1, _callback);
        Type localVarReturnType = new TypeToken<ShopCoupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersBatchPatch
     * @param batch6  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPatchCall(Batch6 batch6, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch6;

        // create path and map variables
        String localVarPath = "/customers/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersBatchPatchValidateBeforeCall(Batch6 batch6, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch6' is set
        if (batch6 == null) {
            throw new ApiException("Missing the required parameter 'batch6' when calling customersBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = customersBatchPatchCall(batch6, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch6  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch customersBatchPatch(Batch6 batch6) throws ApiException {
        ApiResponse<Batch> localVarResp = customersBatchPatchWithHttpInfo(batch6);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch6  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> customersBatchPatchWithHttpInfo(Batch6 batch6) throws ApiException {
        okhttp3.Call localVarCall = customersBatchPatchValidateBeforeCall(batch6, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch6  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPatchAsync(Batch6 batch6, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersBatchPatchValidateBeforeCall(batch6, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersBatchPost
     * @param batch5  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPostCall(Batch5 batch5, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch5;

        // create path and map variables
        String localVarPath = "/customers/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersBatchPostValidateBeforeCall(Batch5 batch5, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch5' is set
        if (batch5 == null) {
            throw new ApiException("Missing the required parameter 'batch5' when calling customersBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = customersBatchPostCall(batch5, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch5  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch customersBatchPost(Batch5 batch5) throws ApiException {
        ApiResponse<Batch> localVarResp = customersBatchPostWithHttpInfo(batch5);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch5  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> customersBatchPostWithHttpInfo(Batch5 batch5) throws ApiException {
        okhttp3.Call localVarCall = customersBatchPostValidateBeforeCall(batch5, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch5  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPostAsync(Batch5 batch5, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersBatchPostValidateBeforeCall(batch5, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersBatchPut
     * @param batch4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPutCall(Batch4 batch4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch4;

        // create path and map variables
        String localVarPath = "/customers/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersBatchPutValidateBeforeCall(Batch4 batch4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch4' is set
        if (batch4 == null) {
            throw new ApiException("Missing the required parameter 'batch4' when calling customersBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = customersBatchPutCall(batch4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch4  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch customersBatchPut(Batch4 batch4) throws ApiException {
        ApiResponse<Batch> localVarResp = customersBatchPutWithHttpInfo(batch4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch4  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> customersBatchPutWithHttpInfo(Batch4 batch4) throws ApiException {
        okhttp3.Call localVarCall = customersBatchPutValidateBeforeCall(batch4, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersBatchPutAsync(Batch4 batch4, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersBatchPutValidateBeforeCall(batch4, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersCustomerIdDownloadsGet
     * @param customerId Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersCustomerIdDownloadsGetCall(Integer customerId, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customer_id}/downloads"
            .replaceAll("\\{" + "customer_id" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersCustomerIdDownloadsGetValidateBeforeCall(Integer customerId, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customersCustomerIdDownloadsGet(Async)");
        }
        

        okhttp3.Call localVarCall = customersCustomerIdDownloadsGetCall(customerId, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param customerId Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;CustomerDownload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerDownload> customersCustomerIdDownloadsGet(Integer customerId, String context) throws ApiException {
        ApiResponse<List<CustomerDownload>> localVarResp = customersCustomerIdDownloadsGetWithHttpInfo(customerId, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param customerId Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;CustomerDownload&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerDownload>> customersCustomerIdDownloadsGetWithHttpInfo(Integer customerId, String context) throws ApiException {
        okhttp3.Call localVarCall = customersCustomerIdDownloadsGetValidateBeforeCall(customerId, context, null);
        Type localVarReturnType = new TypeToken<List<CustomerDownload>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customerId Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersCustomerIdDownloadsGetAsync(Integer customerId, String context, final ApiCallback<List<CustomerDownload>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersCustomerIdDownloadsGetValidateBeforeCall(customerId, context, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerDownload>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String email, String role, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String email, String role, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = customersGetCall(context, page, perPage, search, exclude, include, offset, order, orderby, email, role, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @return List&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Customer> customersGet(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String email, String role) throws ApiException {
        ApiResponse<List<Customer>> localVarResp = customersGetWithHttpInfo(context, page, perPage, search, exclude, include, offset, order, orderby, email, role);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @return ApiResponse&lt;List&lt;Customer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Customer>> customersGetWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String email, String role) throws ApiException {
        okhttp3.Call localVarCall = customersGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, email, role, null);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersGetAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String email, String role, final ApiCallback<List<Customer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, email, role, _callback);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param reassign ID to reassign posts to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdDeleteCall(Integer id, Boolean force, Integer reassign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (reassign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reassign", reassign));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersIdDeleteValidateBeforeCall(Integer id, Boolean force, Integer reassign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customersIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = customersIdDeleteCall(id, force, reassign, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param reassign ID to reassign posts to. (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersIdDelete(Integer id, Boolean force, Integer reassign) throws ApiException {
        ApiResponse<Customer> localVarResp = customersIdDeleteWithHttpInfo(id, force, reassign);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param reassign ID to reassign posts to. (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersIdDeleteWithHttpInfo(Integer id, Boolean force, Integer reassign) throws ApiException {
        okhttp3.Call localVarCall = customersIdDeleteValidateBeforeCall(id, force, reassign, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param reassign ID to reassign posts to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdDeleteAsync(Integer id, Boolean force, Integer reassign, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersIdDeleteValidateBeforeCall(id, force, reassign, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customersIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = customersIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersIdGet(Integer id, String context) throws ApiException {
        ApiResponse<Customer> localVarResp = customersIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = customersIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdGetAsync(Integer id, String context, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param customer4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPatchCall(Integer id, Customer4 customer4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer4;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersIdPatchValidateBeforeCall(Integer id, Customer4 customer4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customersIdPatch(Async)");
        }
        
        // verify the required parameter 'customer4' is set
        if (customer4 == null) {
            throw new ApiException("Missing the required parameter 'customer4' when calling customersIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = customersIdPatchCall(id, customer4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer4  (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersIdPatch(Integer id, Customer4 customer4) throws ApiException {
        ApiResponse<Customer> localVarResp = customersIdPatchWithHttpInfo(id, customer4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer4  (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersIdPatchWithHttpInfo(Integer id, Customer4 customer4) throws ApiException {
        okhttp3.Call localVarCall = customersIdPatchValidateBeforeCall(id, customer4, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPatchAsync(Integer id, Customer4 customer4, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersIdPatchValidateBeforeCall(id, customer4, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersIdPost
     * @param id Unique identifier for the resource. (required)
     * @param customer3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPostCall(Integer id, Customer3 customer3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer3;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersIdPostValidateBeforeCall(Integer id, Customer3 customer3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customersIdPost(Async)");
        }
        
        // verify the required parameter 'customer3' is set
        if (customer3 == null) {
            throw new ApiException("Missing the required parameter 'customer3' when calling customersIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = customersIdPostCall(id, customer3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer3  (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersIdPost(Integer id, Customer3 customer3) throws ApiException {
        ApiResponse<Customer> localVarResp = customersIdPostWithHttpInfo(id, customer3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer3  (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersIdPostWithHttpInfo(Integer id, Customer3 customer3) throws ApiException {
        okhttp3.Call localVarCall = customersIdPostValidateBeforeCall(id, customer3, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPostAsync(Integer id, Customer3 customer3, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersIdPostValidateBeforeCall(id, customer3, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersIdPut
     * @param id Unique identifier for the resource. (required)
     * @param customer2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPutCall(Integer id, Customer2 customer2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer2;

        // create path and map variables
        String localVarPath = "/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersIdPutValidateBeforeCall(Integer id, Customer2 customer2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customersIdPut(Async)");
        }
        
        // verify the required parameter 'customer2' is set
        if (customer2 == null) {
            throw new ApiException("Missing the required parameter 'customer2' when calling customersIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = customersIdPutCall(id, customer2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer2  (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersIdPut(Integer id, Customer2 customer2) throws ApiException {
        ApiResponse<Customer> localVarResp = customersIdPutWithHttpInfo(id, customer2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer2  (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersIdPutWithHttpInfo(Integer id, Customer2 customer2) throws ApiException {
        okhttp3.Call localVarCall = customersIdPutValidateBeforeCall(id, customer2, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param customer2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersIdPutAsync(Integer id, Customer2 customer2, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersIdPutValidateBeforeCall(id, customer2, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customersPost
     * @param customer1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersPostCall(Customer1 customer1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer1;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customersPostValidateBeforeCall(Customer1 customer1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customer1' is set
        if (customer1 == null) {
            throw new ApiException("Missing the required parameter 'customer1' when calling customersPost(Async)");
        }
        

        okhttp3.Call localVarCall = customersPostCall(customer1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param customer1  (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer customersPost(Customer1 customer1) throws ApiException {
        ApiResponse<Customer> localVarResp = customersPostWithHttpInfo(customer1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param customer1  (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> customersPostWithHttpInfo(Customer1 customer1) throws ApiException {
        okhttp3.Call localVarCall = customersPostValidateBeforeCall(customer1, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param customer1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customersPostAsync(Customer1 customer1, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = customersPostValidateBeforeCall(customer1, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataContinentsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataContinentsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/continents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataContinentsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataContinentsGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;DataContinents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<DataContinents> dataContinentsGet() throws ApiException {
        ApiResponse<List<DataContinents>> localVarResp = dataContinentsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;DataContinents&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DataContinents>> dataContinentsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataContinentsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DataContinents>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataContinentsGetAsync(final ApiCallback<List<DataContinents>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataContinentsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DataContinents>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataContinentsLocationGet
     * @param location 2 character continent code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataContinentsLocationGetCall(String location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/continents/{location}"
            .replaceAll("\\{" + "location" + "\\}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataContinentsLocationGetValidateBeforeCall(String location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling dataContinentsLocationGet(Async)");
        }
        

        okhttp3.Call localVarCall = dataContinentsLocationGetCall(location, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param location 2 character continent code. (required)
     * @return DataContinents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataContinents dataContinentsLocationGet(String location) throws ApiException {
        ApiResponse<DataContinents> localVarResp = dataContinentsLocationGetWithHttpInfo(location);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param location 2 character continent code. (required)
     * @return ApiResponse&lt;DataContinents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataContinents> dataContinentsLocationGetWithHttpInfo(String location) throws ApiException {
        okhttp3.Call localVarCall = dataContinentsLocationGetValidateBeforeCall(location, null);
        Type localVarReturnType = new TypeToken<DataContinents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param location 2 character continent code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataContinentsLocationGetAsync(String location, final ApiCallback<DataContinents> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataContinentsLocationGetValidateBeforeCall(location, _callback);
        Type localVarReturnType = new TypeToken<DataContinents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataCountriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCountriesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataCountriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataCountriesGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;DataCountries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<DataCountries> dataCountriesGet() throws ApiException {
        ApiResponse<List<DataCountries>> localVarResp = dataCountriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;DataCountries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DataCountries>> dataCountriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataCountriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DataCountries>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCountriesGetAsync(final ApiCallback<List<DataCountries>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataCountriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DataCountries>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataCountriesLocationGet
     * @param location ISO3166 alpha-2 country code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCountriesLocationGetCall(String location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/countries/{location}"
            .replaceAll("\\{" + "location" + "\\}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataCountriesLocationGetValidateBeforeCall(String location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling dataCountriesLocationGet(Async)");
        }
        

        okhttp3.Call localVarCall = dataCountriesLocationGetCall(location, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param location ISO3166 alpha-2 country code. (required)
     * @return DataCountries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataCountries dataCountriesLocationGet(String location) throws ApiException {
        ApiResponse<DataCountries> localVarResp = dataCountriesLocationGetWithHttpInfo(location);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param location ISO3166 alpha-2 country code. (required)
     * @return ApiResponse&lt;DataCountries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataCountries> dataCountriesLocationGetWithHttpInfo(String location) throws ApiException {
        okhttp3.Call localVarCall = dataCountriesLocationGetValidateBeforeCall(location, null);
        Type localVarReturnType = new TypeToken<DataCountries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param location ISO3166 alpha-2 country code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCountriesLocationGetAsync(String location, final ApiCallback<DataCountries> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataCountriesLocationGetValidateBeforeCall(location, _callback);
        Type localVarReturnType = new TypeToken<DataCountries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataCurrenciesCurrencyGet
     * @param currency ISO4217 currency code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesCurrencyGetCall(String currency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/currencies/{currency}"
            .replaceAll("\\{" + "currency" + "\\}", localVarApiClient.escapeString(currency.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataCurrenciesCurrencyGetValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling dataCurrenciesCurrencyGet(Async)");
        }
        

        okhttp3.Call localVarCall = dataCurrenciesCurrencyGetCall(currency, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param currency ISO4217 currency code. (required)
     * @return DataCurrencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataCurrencies dataCurrenciesCurrencyGet(String currency) throws ApiException {
        ApiResponse<DataCurrencies> localVarResp = dataCurrenciesCurrencyGetWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param currency ISO4217 currency code. (required)
     * @return ApiResponse&lt;DataCurrencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataCurrencies> dataCurrenciesCurrencyGetWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = dataCurrenciesCurrencyGetValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<DataCurrencies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param currency ISO4217 currency code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesCurrencyGetAsync(String currency, final ApiCallback<DataCurrencies> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataCurrenciesCurrencyGetValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<DataCurrencies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataCurrenciesCurrentGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesCurrentGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/currencies/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataCurrenciesCurrentGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataCurrenciesCurrentGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return DataCurrencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataCurrencies dataCurrenciesCurrentGet() throws ApiException {
        ApiResponse<DataCurrencies> localVarResp = dataCurrenciesCurrentGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;DataCurrencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataCurrencies> dataCurrenciesCurrentGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataCurrenciesCurrentGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DataCurrencies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesCurrentGetAsync(final ApiCallback<DataCurrencies> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataCurrenciesCurrentGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DataCurrencies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataCurrenciesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataCurrenciesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataCurrenciesGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;DataCurrencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<DataCurrencies> dataCurrenciesGet() throws ApiException {
        ApiResponse<List<DataCurrencies>> localVarResp = dataCurrenciesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;DataCurrencies&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DataCurrencies>> dataCurrenciesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataCurrenciesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DataCurrencies>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataCurrenciesGetAsync(final ApiCallback<List<DataCurrencies>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataCurrenciesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DataCurrencies>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dataGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return DataIndex
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataIndex dataGet() throws ApiException {
        ApiResponse<DataIndex> localVarResp = dataGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;DataIndex&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataIndex> dataGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DataIndex>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataGetAsync(final ApiCallback<DataIndex> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DataIndex>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersBatchPatch
     * @param batch9  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPatchCall(Batch9 batch9, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch9;

        // create path and map variables
        String localVarPath = "/orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersBatchPatchValidateBeforeCall(Batch9 batch9, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch9' is set
        if (batch9 == null) {
            throw new ApiException("Missing the required parameter 'batch9' when calling ordersBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = ordersBatchPatchCall(batch9, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch9  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch ordersBatchPatch(Batch9 batch9) throws ApiException {
        ApiResponse<Batch> localVarResp = ordersBatchPatchWithHttpInfo(batch9);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch9  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> ordersBatchPatchWithHttpInfo(Batch9 batch9) throws ApiException {
        okhttp3.Call localVarCall = ordersBatchPatchValidateBeforeCall(batch9, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch9  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPatchAsync(Batch9 batch9, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersBatchPatchValidateBeforeCall(batch9, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersBatchPost
     * @param batch8  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPostCall(Batch8 batch8, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch8;

        // create path and map variables
        String localVarPath = "/orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersBatchPostValidateBeforeCall(Batch8 batch8, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch8' is set
        if (batch8 == null) {
            throw new ApiException("Missing the required parameter 'batch8' when calling ordersBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersBatchPostCall(batch8, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch8  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch ordersBatchPost(Batch8 batch8) throws ApiException {
        ApiResponse<Batch> localVarResp = ordersBatchPostWithHttpInfo(batch8);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch8  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> ordersBatchPostWithHttpInfo(Batch8 batch8) throws ApiException {
        okhttp3.Call localVarCall = ordersBatchPostValidateBeforeCall(batch8, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch8  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPostAsync(Batch8 batch8, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersBatchPostValidateBeforeCall(batch8, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersBatchPut
     * @param batch7  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPutCall(Batch7 batch7, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch7;

        // create path and map variables
        String localVarPath = "/orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersBatchPutValidateBeforeCall(Batch7 batch7, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch7' is set
        if (batch7 == null) {
            throw new ApiException("Missing the required parameter 'batch7' when calling ordersBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = ordersBatchPutCall(batch7, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch7  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch ordersBatchPut(Batch7 batch7) throws ApiException {
        ApiResponse<Batch> localVarResp = ordersBatchPutWithHttpInfo(batch7);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch7  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> ordersBatchPutWithHttpInfo(Batch7 batch7) throws ApiException {
        okhttp3.Call localVarCall = ordersBatchPutValidateBeforeCall(batch7, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch7  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersBatchPutAsync(Batch7 batch7, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersBatchPutValidateBeforeCall(batch7, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders which have specific statuses. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersGetCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, List<String> status, Integer customer, Integer product, Integer dp, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent_exclude", parentExclude));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (dp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dp", dp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, List<String> status, Integer customer, Integer product, Integer dp, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ordersGetCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders which have specific statuses. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @return List&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShopOrder> ordersGet(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, List<String> status, Integer customer, Integer product, Integer dp) throws ApiException {
        ApiResponse<List<ShopOrder>> localVarResp = ordersGetWithHttpInfo(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders which have specific statuses. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @return ApiResponse&lt;List&lt;ShopOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShopOrder>> ordersGetWithHttpInfo(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, List<String> status, Integer customer, Integer product, Integer dp) throws ApiException {
        okhttp3.Call localVarCall = ordersGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, null);
        Type localVarReturnType = new TypeToken<List<ShopOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders which have specific statuses. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersGetAsync(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, List<String> status, Integer customer, Integer product, Integer dp, final ApiCallback<List<ShopOrder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, _callback);
        Type localVarReturnType = new TypeToken<List<ShopOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = ordersIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = ordersIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = ordersIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdGetAsync(Integer id, String context, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPatchCall(Integer id, ShopOrder4 shopOrder4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopOrder4;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersIdPatchValidateBeforeCall(Integer id, ShopOrder4 shopOrder4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersIdPatch(Async)");
        }
        
        // verify the required parameter 'shopOrder4' is set
        if (shopOrder4 == null) {
            throw new ApiException("Missing the required parameter 'shopOrder4' when calling ordersIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = ordersIdPatchCall(id, shopOrder4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder4  (required)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersIdPatch(Integer id, ShopOrder4 shopOrder4) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersIdPatchWithHttpInfo(id, shopOrder4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder4  (required)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersIdPatchWithHttpInfo(Integer id, ShopOrder4 shopOrder4) throws ApiException {
        okhttp3.Call localVarCall = ordersIdPatchValidateBeforeCall(id, shopOrder4, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPatchAsync(Integer id, ShopOrder4 shopOrder4, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersIdPatchValidateBeforeCall(id, shopOrder4, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersIdPost
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPostCall(Integer id, ShopOrder3 shopOrder3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopOrder3;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersIdPostValidateBeforeCall(Integer id, ShopOrder3 shopOrder3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersIdPost(Async)");
        }
        
        // verify the required parameter 'shopOrder3' is set
        if (shopOrder3 == null) {
            throw new ApiException("Missing the required parameter 'shopOrder3' when calling ordersIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersIdPostCall(id, shopOrder3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder3  (required)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersIdPost(Integer id, ShopOrder3 shopOrder3) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersIdPostWithHttpInfo(id, shopOrder3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder3  (required)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersIdPostWithHttpInfo(Integer id, ShopOrder3 shopOrder3) throws ApiException {
        okhttp3.Call localVarCall = ordersIdPostValidateBeforeCall(id, shopOrder3, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPostAsync(Integer id, ShopOrder3 shopOrder3, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersIdPostValidateBeforeCall(id, shopOrder3, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersIdPut
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPutCall(Integer id, ShopOrder2 shopOrder2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopOrder2;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersIdPutValidateBeforeCall(Integer id, ShopOrder2 shopOrder2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersIdPut(Async)");
        }
        
        // verify the required parameter 'shopOrder2' is set
        if (shopOrder2 == null) {
            throw new ApiException("Missing the required parameter 'shopOrder2' when calling ordersIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = ordersIdPutCall(id, shopOrder2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder2  (required)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersIdPut(Integer id, ShopOrder2 shopOrder2) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersIdPutWithHttpInfo(id, shopOrder2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder2  (required)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersIdPutWithHttpInfo(Integer id, ShopOrder2 shopOrder2) throws ApiException {
        okhttp3.Call localVarCall = ordersIdPutValidateBeforeCall(id, shopOrder2, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param shopOrder2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersIdPutAsync(Integer id, ShopOrder2 shopOrder2, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersIdPutValidateBeforeCall(id, shopOrder2, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdNotesGet
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param type Limit result to customers or internal notes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesGetCall(Integer orderId, String context, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/notes"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdNotesGetValidateBeforeCall(Integer orderId, String context, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdNotesGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdNotesGetCall(orderId, context, type, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param type Limit result to customers or internal notes. (optional)
     * @return List&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderNote> ordersOrderIdNotesGet(Integer orderId, String context, String type) throws ApiException {
        ApiResponse<List<OrderNote>> localVarResp = ordersOrderIdNotesGetWithHttpInfo(orderId, context, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param type Limit result to customers or internal notes. (optional)
     * @return ApiResponse&lt;List&lt;OrderNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderNote>> ordersOrderIdNotesGetWithHttpInfo(Integer orderId, String context, String type) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdNotesGetValidateBeforeCall(orderId, context, type, null);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param type Limit result to customers or internal notes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesGetAsync(Integer orderId, String context, String type, final ApiCallback<List<OrderNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdNotesGetValidateBeforeCall(orderId, context, type, _callback);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdNotesIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesIdDeleteCall(Integer id, Integer orderId, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/notes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdNotesIdDeleteValidateBeforeCall(Integer id, Integer orderId, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersOrderIdNotesIdDelete(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdNotesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdNotesIdDeleteCall(id, orderId, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote ordersOrderIdNotesIdDelete(Integer id, Integer orderId, Boolean force) throws ApiException {
        ApiResponse<OrderNote> localVarResp = ordersOrderIdNotesIdDeleteWithHttpInfo(id, orderId, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> ordersOrderIdNotesIdDeleteWithHttpInfo(Integer id, Integer orderId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdNotesIdDeleteValidateBeforeCall(id, orderId, force, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesIdDeleteAsync(Integer id, Integer orderId, Boolean force, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdNotesIdDeleteValidateBeforeCall(id, orderId, force, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdNotesIdGet
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesIdGetCall(Integer id, Integer orderId, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/notes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdNotesIdGetValidateBeforeCall(Integer id, Integer orderId, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersOrderIdNotesIdGet(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdNotesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdNotesIdGetCall(id, orderId, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote ordersOrderIdNotesIdGet(Integer id, Integer orderId, String context) throws ApiException {
        ApiResponse<OrderNote> localVarResp = ordersOrderIdNotesIdGetWithHttpInfo(id, orderId, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> ordersOrderIdNotesIdGetWithHttpInfo(Integer id, Integer orderId, String context) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdNotesIdGetValidateBeforeCall(id, orderId, context, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesIdGetAsync(Integer id, Integer orderId, String context, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdNotesIdGetValidateBeforeCall(id, orderId, context, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdNotesPost
     * @param orderId The order ID. (required)
     * @param orderNote1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesPostCall(Integer orderId, OrderNote1 orderNote1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orderNote1;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/notes"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdNotesPostValidateBeforeCall(Integer orderId, OrderNote1 orderNote1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdNotesPost(Async)");
        }
        
        // verify the required parameter 'orderNote1' is set
        if (orderNote1 == null) {
            throw new ApiException("Missing the required parameter 'orderNote1' when calling ordersOrderIdNotesPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdNotesPostCall(orderId, orderNote1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param orderNote1  (required)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote ordersOrderIdNotesPost(Integer orderId, OrderNote1 orderNote1) throws ApiException {
        ApiResponse<OrderNote> localVarResp = ordersOrderIdNotesPostWithHttpInfo(orderId, orderNote1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param orderNote1  (required)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> ordersOrderIdNotesPostWithHttpInfo(Integer orderId, OrderNote1 orderNote1) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdNotesPostValidateBeforeCall(orderId, orderNote1, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param orderNote1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdNotesPostAsync(Integer orderId, OrderNote1 orderNote1, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdNotesPostValidateBeforeCall(orderId, orderNote1, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdRefundsGet
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsGetCall(Integer orderId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, Integer dp, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent_exclude", parentExclude));
        }

        if (dp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dp", dp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdRefundsGetValidateBeforeCall(Integer orderId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, Integer dp, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdRefundsGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdRefundsGetCall(orderId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, dp, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @return List&lt;ShopOrderRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShopOrderRefund> ordersOrderIdRefundsGet(Integer orderId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, Integer dp) throws ApiException {
        ApiResponse<List<ShopOrderRefund>> localVarResp = ordersOrderIdRefundsGetWithHttpInfo(orderId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, dp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @return ApiResponse&lt;List&lt;ShopOrderRefund&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShopOrderRefund>> ordersOrderIdRefundsGetWithHttpInfo(Integer orderId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, Integer dp) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdRefundsGetValidateBeforeCall(orderId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, dp, null);
        Type localVarReturnType = new TypeToken<List<ShopOrderRefund>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param dp Number of decimal points to use in each resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsGetAsync(Integer orderId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, Integer dp, final ApiCallback<List<ShopOrderRefund>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdRefundsGetValidateBeforeCall(orderId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, dp, _callback);
        Type localVarReturnType = new TypeToken<List<ShopOrderRefund>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdRefundsIdDelete
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsIdDeleteCall(Integer orderId, Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds/{id}"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdRefundsIdDeleteValidateBeforeCall(Integer orderId, Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdRefundsIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersOrderIdRefundsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdRefundsIdDeleteCall(orderId, id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ShopOrderRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrderRefund ordersOrderIdRefundsIdDelete(Integer orderId, Integer id, Boolean force) throws ApiException {
        ApiResponse<ShopOrderRefund> localVarResp = ordersOrderIdRefundsIdDeleteWithHttpInfo(orderId, id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ShopOrderRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrderRefund> ordersOrderIdRefundsIdDeleteWithHttpInfo(Integer orderId, Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdRefundsIdDeleteValidateBeforeCall(orderId, id, force, null);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsIdDeleteAsync(Integer orderId, Integer id, Boolean force, final ApiCallback<ShopOrderRefund> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdRefundsIdDeleteValidateBeforeCall(orderId, id, force, _callback);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdRefundsIdGet
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsIdGetCall(Integer orderId, Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds/{id}"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdRefundsIdGetValidateBeforeCall(Integer orderId, Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdRefundsIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ordersOrderIdRefundsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdRefundsIdGetCall(orderId, id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ShopOrderRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrderRefund ordersOrderIdRefundsIdGet(Integer orderId, Integer id, String context) throws ApiException {
        ApiResponse<ShopOrderRefund> localVarResp = ordersOrderIdRefundsIdGetWithHttpInfo(orderId, id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ShopOrderRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrderRefund> ordersOrderIdRefundsIdGetWithHttpInfo(Integer orderId, Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdRefundsIdGetValidateBeforeCall(orderId, id, context, null);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsIdGetAsync(Integer orderId, Integer id, String context, final ApiCallback<ShopOrderRefund> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdRefundsIdGetValidateBeforeCall(orderId, id, context, _callback);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersOrderIdRefundsPost
     * @param orderId The order ID. (required)
     * @param shopOrderRefund1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsPostCall(Integer orderId, ShopOrderRefund1 shopOrderRefund1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopOrderRefund1;

        // create path and map variables
        String localVarPath = "/orders/{order_id}/refunds"
            .replaceAll("\\{" + "order_id" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersOrderIdRefundsPostValidateBeforeCall(Integer orderId, ShopOrderRefund1 shopOrderRefund1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ordersOrderIdRefundsPost(Async)");
        }
        
        // verify the required parameter 'shopOrderRefund1' is set
        if (shopOrderRefund1 == null) {
            throw new ApiException("Missing the required parameter 'shopOrderRefund1' when calling ordersOrderIdRefundsPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersOrderIdRefundsPostCall(orderId, shopOrderRefund1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param shopOrderRefund1  (required)
     * @return ShopOrderRefund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrderRefund ordersOrderIdRefundsPost(Integer orderId, ShopOrderRefund1 shopOrderRefund1) throws ApiException {
        ApiResponse<ShopOrderRefund> localVarResp = ordersOrderIdRefundsPostWithHttpInfo(orderId, shopOrderRefund1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderId The order ID. (required)
     * @param shopOrderRefund1  (required)
     * @return ApiResponse&lt;ShopOrderRefund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrderRefund> ordersOrderIdRefundsPostWithHttpInfo(Integer orderId, ShopOrderRefund1 shopOrderRefund1) throws ApiException {
        okhttp3.Call localVarCall = ordersOrderIdRefundsPostValidateBeforeCall(orderId, shopOrderRefund1, null);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderId The order ID. (required)
     * @param shopOrderRefund1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersOrderIdRefundsPostAsync(Integer orderId, ShopOrderRefund1 shopOrderRefund1, final ApiCallback<ShopOrderRefund> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersOrderIdRefundsPostValidateBeforeCall(orderId, shopOrderRefund1, _callback);
        Type localVarReturnType = new TypeToken<ShopOrderRefund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ordersPost
     * @param shopOrder1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersPostCall(ShopOrder1 shopOrder1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shopOrder1;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ordersPostValidateBeforeCall(ShopOrder1 shopOrder1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopOrder1' is set
        if (shopOrder1 == null) {
            throw new ApiException("Missing the required parameter 'shopOrder1' when calling ordersPost(Async)");
        }
        

        okhttp3.Call localVarCall = ordersPostCall(shopOrder1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param shopOrder1  (required)
     * @return ShopOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShopOrder ordersPost(ShopOrder1 shopOrder1) throws ApiException {
        ApiResponse<ShopOrder> localVarResp = ordersPostWithHttpInfo(shopOrder1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param shopOrder1  (required)
     * @return ApiResponse&lt;ShopOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShopOrder> ordersPostWithHttpInfo(ShopOrder1 shopOrder1) throws ApiException {
        okhttp3.Call localVarCall = ordersPostValidateBeforeCall(shopOrder1, null);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param shopOrder1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ordersPostAsync(ShopOrder1 shopOrder1, final ApiCallback<ShopOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = ordersPostValidateBeforeCall(shopOrder1, _callback);
        Type localVarReturnType = new TypeToken<ShopOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGatewaysGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment_gateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGatewaysGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = paymentGatewaysGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;PaymentGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PaymentGateway> paymentGatewaysGet(String context) throws ApiException {
        ApiResponse<List<PaymentGateway>> localVarResp = paymentGatewaysGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;PaymentGateway&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PaymentGateway>> paymentGatewaysGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = paymentGatewaysGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<PaymentGateway>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysGetAsync(String context, final ApiCallback<List<PaymentGateway>> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGatewaysGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentGateway>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGatewaysIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdGetCall(String id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment_gateways/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGatewaysIdGetValidateBeforeCall(String id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentGatewaysIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = paymentGatewaysIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return PaymentGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PaymentGateway paymentGatewaysIdGet(String id, String context) throws ApiException {
        ApiResponse<PaymentGateway> localVarResp = paymentGatewaysIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;PaymentGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentGateway> paymentGatewaysIdGetWithHttpInfo(String id, String context) throws ApiException {
        okhttp3.Call localVarCall = paymentGatewaysIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdGetAsync(String id, String context, final ApiCallback<PaymentGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGatewaysIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGatewaysIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPatchCall(String id, PaymentGateway3 paymentGateway3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentGateway3;

        // create path and map variables
        String localVarPath = "/payment_gateways/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGatewaysIdPatchValidateBeforeCall(String id, PaymentGateway3 paymentGateway3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentGatewaysIdPatch(Async)");
        }
        
        // verify the required parameter 'paymentGateway3' is set
        if (paymentGateway3 == null) {
            throw new ApiException("Missing the required parameter 'paymentGateway3' when calling paymentGatewaysIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = paymentGatewaysIdPatchCall(id, paymentGateway3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway3  (required)
     * @return PaymentGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PaymentGateway paymentGatewaysIdPatch(String id, PaymentGateway3 paymentGateway3) throws ApiException {
        ApiResponse<PaymentGateway> localVarResp = paymentGatewaysIdPatchWithHttpInfo(id, paymentGateway3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway3  (required)
     * @return ApiResponse&lt;PaymentGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentGateway> paymentGatewaysIdPatchWithHttpInfo(String id, PaymentGateway3 paymentGateway3) throws ApiException {
        okhttp3.Call localVarCall = paymentGatewaysIdPatchValidateBeforeCall(id, paymentGateway3, null);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPatchAsync(String id, PaymentGateway3 paymentGateway3, final ApiCallback<PaymentGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGatewaysIdPatchValidateBeforeCall(id, paymentGateway3, _callback);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGatewaysIdPost
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPostCall(String id, PaymentGateway2 paymentGateway2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentGateway2;

        // create path and map variables
        String localVarPath = "/payment_gateways/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGatewaysIdPostValidateBeforeCall(String id, PaymentGateway2 paymentGateway2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentGatewaysIdPost(Async)");
        }
        
        // verify the required parameter 'paymentGateway2' is set
        if (paymentGateway2 == null) {
            throw new ApiException("Missing the required parameter 'paymentGateway2' when calling paymentGatewaysIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentGatewaysIdPostCall(id, paymentGateway2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway2  (required)
     * @return PaymentGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PaymentGateway paymentGatewaysIdPost(String id, PaymentGateway2 paymentGateway2) throws ApiException {
        ApiResponse<PaymentGateway> localVarResp = paymentGatewaysIdPostWithHttpInfo(id, paymentGateway2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway2  (required)
     * @return ApiResponse&lt;PaymentGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentGateway> paymentGatewaysIdPostWithHttpInfo(String id, PaymentGateway2 paymentGateway2) throws ApiException {
        okhttp3.Call localVarCall = paymentGatewaysIdPostValidateBeforeCall(id, paymentGateway2, null);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPostAsync(String id, PaymentGateway2 paymentGateway2, final ApiCallback<PaymentGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGatewaysIdPostValidateBeforeCall(id, paymentGateway2, _callback);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentGatewaysIdPut
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPutCall(String id, PaymentGateway1 paymentGateway1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentGateway1;

        // create path and map variables
        String localVarPath = "/payment_gateways/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentGatewaysIdPutValidateBeforeCall(String id, PaymentGateway1 paymentGateway1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentGatewaysIdPut(Async)");
        }
        
        // verify the required parameter 'paymentGateway1' is set
        if (paymentGateway1 == null) {
            throw new ApiException("Missing the required parameter 'paymentGateway1' when calling paymentGatewaysIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = paymentGatewaysIdPutCall(id, paymentGateway1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway1  (required)
     * @return PaymentGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PaymentGateway paymentGatewaysIdPut(String id, PaymentGateway1 paymentGateway1) throws ApiException {
        ApiResponse<PaymentGateway> localVarResp = paymentGatewaysIdPutWithHttpInfo(id, paymentGateway1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway1  (required)
     * @return ApiResponse&lt;PaymentGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentGateway> paymentGatewaysIdPutWithHttpInfo(String id, PaymentGateway1 paymentGateway1) throws ApiException {
        okhttp3.Call localVarCall = paymentGatewaysIdPutValidateBeforeCall(id, paymentGateway1, null);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param paymentGateway1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentGatewaysIdPutAsync(String id, PaymentGateway1 paymentGateway1, final ApiCallback<PaymentGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentGatewaysIdPutValidateBeforeCall(id, paymentGateway1, _callback);
        Type localVarReturnType = new TypeToken<PaymentGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsBatchPatch
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch12  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPatchCall(Integer attributeId, Batch12 batch12, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch12;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/batch"
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsBatchPatchValidateBeforeCall(Integer attributeId, Batch12 batch12, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsBatchPatch(Async)");
        }
        
        // verify the required parameter 'batch12' is set
        if (batch12 == null) {
            throw new ApiException("Missing the required parameter 'batch12' when calling productsAttributesAttributeIdTermsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPatchCall(attributeId, batch12, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch12  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesAttributeIdTermsBatchPatch(Integer attributeId, Batch12 batch12) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesAttributeIdTermsBatchPatchWithHttpInfo(attributeId, batch12);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch12  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesAttributeIdTermsBatchPatchWithHttpInfo(Integer attributeId, Batch12 batch12) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPatchValidateBeforeCall(attributeId, batch12, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch12  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPatchAsync(Integer attributeId, Batch12 batch12, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPatchValidateBeforeCall(attributeId, batch12, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsBatchPost
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch11  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPostCall(Integer attributeId, Batch11 batch11, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch11;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/batch"
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsBatchPostValidateBeforeCall(Integer attributeId, Batch11 batch11, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsBatchPost(Async)");
        }
        
        // verify the required parameter 'batch11' is set
        if (batch11 == null) {
            throw new ApiException("Missing the required parameter 'batch11' when calling productsAttributesAttributeIdTermsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPostCall(attributeId, batch11, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch11  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesAttributeIdTermsBatchPost(Integer attributeId, Batch11 batch11) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesAttributeIdTermsBatchPostWithHttpInfo(attributeId, batch11);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch11  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesAttributeIdTermsBatchPostWithHttpInfo(Integer attributeId, Batch11 batch11) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPostValidateBeforeCall(attributeId, batch11, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch11  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPostAsync(Integer attributeId, Batch11 batch11, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPostValidateBeforeCall(attributeId, batch11, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsBatchPut
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch10  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPutCall(Integer attributeId, Batch10 batch10, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch10;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/batch"
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsBatchPutValidateBeforeCall(Integer attributeId, Batch10 batch10, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsBatchPut(Async)");
        }
        
        // verify the required parameter 'batch10' is set
        if (batch10 == null) {
            throw new ApiException("Missing the required parameter 'batch10' when calling productsAttributesAttributeIdTermsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPutCall(attributeId, batch10, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch10  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesAttributeIdTermsBatchPut(Integer attributeId, Batch10 batch10) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesAttributeIdTermsBatchPutWithHttpInfo(attributeId, batch10);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch10  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesAttributeIdTermsBatchPutWithHttpInfo(Integer attributeId, Batch10 batch10) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPutValidateBeforeCall(attributeId, batch10, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param batch10  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsBatchPutAsync(Integer attributeId, Batch10 batch10, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsBatchPutValidateBeforeCall(attributeId, batch10, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsGet
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsGetCall(Integer attributeId, String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms"
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsGetValidateBeforeCall(Integer attributeId, String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsGetCall(attributeId, context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return List&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductAttributeTerm> productsAttributesAttributeIdTermsGet(Integer attributeId, String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        ApiResponse<List<ProductAttributeTerm>> localVarResp = productsAttributesAttributeIdTermsGetWithHttpInfo(attributeId, context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return ApiResponse&lt;List&lt;ProductAttributeTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductAttributeTerm>> productsAttributesAttributeIdTermsGetWithHttpInfo(Integer attributeId, String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsGetValidateBeforeCall(attributeId, context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductAttributeTerm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsGetAsync(Integer attributeId, String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback<List<ProductAttributeTerm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsGetValidateBeforeCall(attributeId, context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductAttributeTerm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdDeleteCall(Integer id, Integer attributeId, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsIdDeleteValidateBeforeCall(Integer id, Integer attributeId, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesAttributeIdTermsIdDelete(Async)");
        }
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdDeleteCall(id, attributeId, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsIdDelete(Integer id, Integer attributeId, Boolean force) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsIdDeleteWithHttpInfo(id, attributeId, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsIdDeleteWithHttpInfo(Integer id, Integer attributeId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdDeleteValidateBeforeCall(id, attributeId, force, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdDeleteAsync(Integer id, Integer attributeId, Boolean force, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdDeleteValidateBeforeCall(id, attributeId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdGetCall(Integer id, Integer attributeId, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsIdGetValidateBeforeCall(Integer id, Integer attributeId, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesAttributeIdTermsIdGet(Async)");
        }
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdGetCall(id, attributeId, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsIdGet(Integer id, Integer attributeId, String context) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsIdGetWithHttpInfo(id, attributeId, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsIdGetWithHttpInfo(Integer id, Integer attributeId, String context) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdGetValidateBeforeCall(id, attributeId, context, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdGetAsync(Integer id, Integer attributeId, String context, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdGetValidateBeforeCall(id, attributeId, context, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPatchCall(Integer id, Integer attributeId, ProductAttributeTerm4 productAttributeTerm4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttributeTerm4;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsIdPatchValidateBeforeCall(Integer id, Integer attributeId, ProductAttributeTerm4 productAttributeTerm4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesAttributeIdTermsIdPatch(Async)");
        }
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsIdPatch(Async)");
        }
        
        // verify the required parameter 'productAttributeTerm4' is set
        if (productAttributeTerm4 == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm4' when calling productsAttributesAttributeIdTermsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPatchCall(id, attributeId, productAttributeTerm4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm4  (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsIdPatch(Integer id, Integer attributeId, ProductAttributeTerm4 productAttributeTerm4) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsIdPatchWithHttpInfo(id, attributeId, productAttributeTerm4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm4  (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsIdPatchWithHttpInfo(Integer id, Integer attributeId, ProductAttributeTerm4 productAttributeTerm4) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPatchValidateBeforeCall(id, attributeId, productAttributeTerm4, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPatchAsync(Integer id, Integer attributeId, ProductAttributeTerm4 productAttributeTerm4, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPatchValidateBeforeCall(id, attributeId, productAttributeTerm4, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsIdPost
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPostCall(Integer id, Integer attributeId, ProductAttributeTerm3 productAttributeTerm3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttributeTerm3;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsIdPostValidateBeforeCall(Integer id, Integer attributeId, ProductAttributeTerm3 productAttributeTerm3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesAttributeIdTermsIdPost(Async)");
        }
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsIdPost(Async)");
        }
        
        // verify the required parameter 'productAttributeTerm3' is set
        if (productAttributeTerm3 == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm3' when calling productsAttributesAttributeIdTermsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPostCall(id, attributeId, productAttributeTerm3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm3  (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsIdPost(Integer id, Integer attributeId, ProductAttributeTerm3 productAttributeTerm3) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsIdPostWithHttpInfo(id, attributeId, productAttributeTerm3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm3  (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsIdPostWithHttpInfo(Integer id, Integer attributeId, ProductAttributeTerm3 productAttributeTerm3) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPostValidateBeforeCall(id, attributeId, productAttributeTerm3, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPostAsync(Integer id, Integer attributeId, ProductAttributeTerm3 productAttributeTerm3, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPostValidateBeforeCall(id, attributeId, productAttributeTerm3, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsIdPut
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPutCall(Integer id, Integer attributeId, ProductAttributeTerm2 productAttributeTerm2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttributeTerm2;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsIdPutValidateBeforeCall(Integer id, Integer attributeId, ProductAttributeTerm2 productAttributeTerm2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesAttributeIdTermsIdPut(Async)");
        }
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsIdPut(Async)");
        }
        
        // verify the required parameter 'productAttributeTerm2' is set
        if (productAttributeTerm2 == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm2' when calling productsAttributesAttributeIdTermsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPutCall(id, attributeId, productAttributeTerm2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm2  (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsIdPut(Integer id, Integer attributeId, ProductAttributeTerm2 productAttributeTerm2) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsIdPutWithHttpInfo(id, attributeId, productAttributeTerm2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm2  (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsIdPutWithHttpInfo(Integer id, Integer attributeId, ProductAttributeTerm2 productAttributeTerm2) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPutValidateBeforeCall(id, attributeId, productAttributeTerm2, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsIdPutAsync(Integer id, Integer attributeId, ProductAttributeTerm2 productAttributeTerm2, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsIdPutValidateBeforeCall(id, attributeId, productAttributeTerm2, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesAttributeIdTermsPost
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsPostCall(Integer attributeId, ProductAttributeTerm1 productAttributeTerm1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttributeTerm1;

        // create path and map variables
        String localVarPath = "/products/attributes/{attribute_id}/terms"
            .replaceAll("\\{" + "attribute_id" + "\\}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesAttributeIdTermsPostValidateBeforeCall(Integer attributeId, ProductAttributeTerm1 productAttributeTerm1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productsAttributesAttributeIdTermsPost(Async)");
        }
        
        // verify the required parameter 'productAttributeTerm1' is set
        if (productAttributeTerm1 == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm1' when calling productsAttributesAttributeIdTermsPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsPostCall(attributeId, productAttributeTerm1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm1  (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm productsAttributesAttributeIdTermsPost(Integer attributeId, ProductAttributeTerm1 productAttributeTerm1) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = productsAttributesAttributeIdTermsPostWithHttpInfo(attributeId, productAttributeTerm1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm1  (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> productsAttributesAttributeIdTermsPostWithHttpInfo(Integer attributeId, ProductAttributeTerm1 productAttributeTerm1) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsPostValidateBeforeCall(attributeId, productAttributeTerm1, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param attributeId Unique identifier for the attribute of the terms. (required)
     * @param productAttributeTerm1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesAttributeIdTermsPostAsync(Integer attributeId, ProductAttributeTerm1 productAttributeTerm1, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesAttributeIdTermsPostValidateBeforeCall(attributeId, productAttributeTerm1, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesBatchPatch
     * @param batch15  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPatchCall(Batch15 batch15, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch15;

        // create path and map variables
        String localVarPath = "/products/attributes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesBatchPatchValidateBeforeCall(Batch15 batch15, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch15' is set
        if (batch15 == null) {
            throw new ApiException("Missing the required parameter 'batch15' when calling productsAttributesBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesBatchPatchCall(batch15, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch15  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesBatchPatch(Batch15 batch15) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesBatchPatchWithHttpInfo(batch15);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch15  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesBatchPatchWithHttpInfo(Batch15 batch15) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesBatchPatchValidateBeforeCall(batch15, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch15  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPatchAsync(Batch15 batch15, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesBatchPatchValidateBeforeCall(batch15, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesBatchPost
     * @param batch14  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPostCall(Batch14 batch14, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch14;

        // create path and map variables
        String localVarPath = "/products/attributes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesBatchPostValidateBeforeCall(Batch14 batch14, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch14' is set
        if (batch14 == null) {
            throw new ApiException("Missing the required parameter 'batch14' when calling productsAttributesBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesBatchPostCall(batch14, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch14  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesBatchPost(Batch14 batch14) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesBatchPostWithHttpInfo(batch14);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch14  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesBatchPostWithHttpInfo(Batch14 batch14) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesBatchPostValidateBeforeCall(batch14, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch14  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPostAsync(Batch14 batch14, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesBatchPostValidateBeforeCall(batch14, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesBatchPut
     * @param batch13  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPutCall(Batch13 batch13, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch13;

        // create path and map variables
        String localVarPath = "/products/attributes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesBatchPutValidateBeforeCall(Batch13 batch13, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch13' is set
        if (batch13 == null) {
            throw new ApiException("Missing the required parameter 'batch13' when calling productsAttributesBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesBatchPutCall(batch13, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch13  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsAttributesBatchPut(Batch13 batch13) throws ApiException {
        ApiResponse<Batch> localVarResp = productsAttributesBatchPutWithHttpInfo(batch13);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch13  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsAttributesBatchPutWithHttpInfo(Batch13 batch13) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesBatchPutValidateBeforeCall(batch13, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch13  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesBatchPutAsync(Batch13 batch13, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesBatchPutValidateBeforeCall(batch13, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsAttributesGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductAttribute> productsAttributesGet(String context) throws ApiException {
        ApiResponse<List<ProductAttribute>> localVarResp = productsAttributesGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ProductAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductAttribute>> productsAttributesGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ProductAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesGetAsync(String context, final ApiCallback<List<ProductAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ProductAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdGetAsync(Integer id, String context, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPatchCall(Integer id, ProductAttribute4 productAttribute4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttribute4;

        // create path and map variables
        String localVarPath = "/products/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesIdPatchValidateBeforeCall(Integer id, ProductAttribute4 productAttribute4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesIdPatch(Async)");
        }
        
        // verify the required parameter 'productAttribute4' is set
        if (productAttribute4 == null) {
            throw new ApiException("Missing the required parameter 'productAttribute4' when calling productsAttributesIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesIdPatchCall(id, productAttribute4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute4  (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesIdPatch(Integer id, ProductAttribute4 productAttribute4) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesIdPatchWithHttpInfo(id, productAttribute4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute4  (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesIdPatchWithHttpInfo(Integer id, ProductAttribute4 productAttribute4) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesIdPatchValidateBeforeCall(id, productAttribute4, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPatchAsync(Integer id, ProductAttribute4 productAttribute4, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesIdPatchValidateBeforeCall(id, productAttribute4, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesIdPost
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPostCall(Integer id, ProductAttribute3 productAttribute3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttribute3;

        // create path and map variables
        String localVarPath = "/products/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesIdPostValidateBeforeCall(Integer id, ProductAttribute3 productAttribute3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesIdPost(Async)");
        }
        
        // verify the required parameter 'productAttribute3' is set
        if (productAttribute3 == null) {
            throw new ApiException("Missing the required parameter 'productAttribute3' when calling productsAttributesIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesIdPostCall(id, productAttribute3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute3  (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesIdPost(Integer id, ProductAttribute3 productAttribute3) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesIdPostWithHttpInfo(id, productAttribute3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute3  (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesIdPostWithHttpInfo(Integer id, ProductAttribute3 productAttribute3) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesIdPostValidateBeforeCall(id, productAttribute3, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPostAsync(Integer id, ProductAttribute3 productAttribute3, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesIdPostValidateBeforeCall(id, productAttribute3, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesIdPut
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPutCall(Integer id, ProductAttribute2 productAttribute2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttribute2;

        // create path and map variables
        String localVarPath = "/products/attributes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesIdPutValidateBeforeCall(Integer id, ProductAttribute2 productAttribute2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsAttributesIdPut(Async)");
        }
        
        // verify the required parameter 'productAttribute2' is set
        if (productAttribute2 == null) {
            throw new ApiException("Missing the required parameter 'productAttribute2' when calling productsAttributesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesIdPutCall(id, productAttribute2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute2  (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesIdPut(Integer id, ProductAttribute2 productAttribute2) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesIdPutWithHttpInfo(id, productAttribute2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute2  (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesIdPutWithHttpInfo(Integer id, ProductAttribute2 productAttribute2) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesIdPutValidateBeforeCall(id, productAttribute2, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productAttribute2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesIdPutAsync(Integer id, ProductAttribute2 productAttribute2, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesIdPutValidateBeforeCall(id, productAttribute2, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAttributesPost
     * @param productAttribute1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesPostCall(ProductAttribute1 productAttribute1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productAttribute1;

        // create path and map variables
        String localVarPath = "/products/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAttributesPostValidateBeforeCall(ProductAttribute1 productAttribute1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productAttribute1' is set
        if (productAttribute1 == null) {
            throw new ApiException("Missing the required parameter 'productAttribute1' when calling productsAttributesPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsAttributesPostCall(productAttribute1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productAttribute1  (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute productsAttributesPost(ProductAttribute1 productAttribute1) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = productsAttributesPostWithHttpInfo(productAttribute1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productAttribute1  (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> productsAttributesPostWithHttpInfo(ProductAttribute1 productAttribute1) throws ApiException {
        okhttp3.Call localVarCall = productsAttributesPostValidateBeforeCall(productAttribute1, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productAttribute1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAttributesPostAsync(ProductAttribute1 productAttribute1, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAttributesPostValidateBeforeCall(productAttribute1, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsBatchPatch
     * @param batch30  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPatchCall(Batch30 batch30, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch30;

        // create path and map variables
        String localVarPath = "/products/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsBatchPatchValidateBeforeCall(Batch30 batch30, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch30' is set
        if (batch30 == null) {
            throw new ApiException("Missing the required parameter 'batch30' when calling productsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsBatchPatchCall(batch30, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch30  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsBatchPatch(Batch30 batch30) throws ApiException {
        ApiResponse<Batch> localVarResp = productsBatchPatchWithHttpInfo(batch30);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch30  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsBatchPatchWithHttpInfo(Batch30 batch30) throws ApiException {
        okhttp3.Call localVarCall = productsBatchPatchValidateBeforeCall(batch30, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch30  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPatchAsync(Batch30 batch30, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsBatchPatchValidateBeforeCall(batch30, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsBatchPost
     * @param batch29  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPostCall(Batch29 batch29, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch29;

        // create path and map variables
        String localVarPath = "/products/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsBatchPostValidateBeforeCall(Batch29 batch29, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch29' is set
        if (batch29 == null) {
            throw new ApiException("Missing the required parameter 'batch29' when calling productsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsBatchPostCall(batch29, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch29  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsBatchPost(Batch29 batch29) throws ApiException {
        ApiResponse<Batch> localVarResp = productsBatchPostWithHttpInfo(batch29);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch29  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsBatchPostWithHttpInfo(Batch29 batch29) throws ApiException {
        okhttp3.Call localVarCall = productsBatchPostValidateBeforeCall(batch29, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch29  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPostAsync(Batch29 batch29, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsBatchPostValidateBeforeCall(batch29, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsBatchPut
     * @param batch28  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPutCall(Batch28 batch28, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch28;

        // create path and map variables
        String localVarPath = "/products/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsBatchPutValidateBeforeCall(Batch28 batch28, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch28' is set
        if (batch28 == null) {
            throw new ApiException("Missing the required parameter 'batch28' when calling productsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsBatchPutCall(batch28, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch28  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsBatchPut(Batch28 batch28) throws ApiException {
        ApiResponse<Batch> localVarResp = productsBatchPutWithHttpInfo(batch28);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch28  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsBatchPutWithHttpInfo(Batch28 batch28) throws ApiException {
        okhttp3.Call localVarCall = productsBatchPutValidateBeforeCall(batch28, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch28  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsBatchPutAsync(Batch28 batch28, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsBatchPutValidateBeforeCall(batch28, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesBatchPatch
     * @param batch18  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPatchCall(Batch18 batch18, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch18;

        // create path and map variables
        String localVarPath = "/products/categories/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesBatchPatchValidateBeforeCall(Batch18 batch18, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch18' is set
        if (batch18 == null) {
            throw new ApiException("Missing the required parameter 'batch18' when calling productsCategoriesBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesBatchPatchCall(batch18, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch18  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsCategoriesBatchPatch(Batch18 batch18) throws ApiException {
        ApiResponse<Batch> localVarResp = productsCategoriesBatchPatchWithHttpInfo(batch18);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch18  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsCategoriesBatchPatchWithHttpInfo(Batch18 batch18) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesBatchPatchValidateBeforeCall(batch18, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch18  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPatchAsync(Batch18 batch18, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesBatchPatchValidateBeforeCall(batch18, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesBatchPost
     * @param batch17  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPostCall(Batch17 batch17, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch17;

        // create path and map variables
        String localVarPath = "/products/categories/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesBatchPostValidateBeforeCall(Batch17 batch17, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch17' is set
        if (batch17 == null) {
            throw new ApiException("Missing the required parameter 'batch17' when calling productsCategoriesBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesBatchPostCall(batch17, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch17  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsCategoriesBatchPost(Batch17 batch17) throws ApiException {
        ApiResponse<Batch> localVarResp = productsCategoriesBatchPostWithHttpInfo(batch17);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch17  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsCategoriesBatchPostWithHttpInfo(Batch17 batch17) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesBatchPostValidateBeforeCall(batch17, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch17  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPostAsync(Batch17 batch17, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesBatchPostValidateBeforeCall(batch17, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesBatchPut
     * @param batch16  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPutCall(Batch16 batch16, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch16;

        // create path and map variables
        String localVarPath = "/products/categories/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesBatchPutValidateBeforeCall(Batch16 batch16, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch16' is set
        if (batch16 == null) {
            throw new ApiException("Missing the required parameter 'batch16' when calling productsCategoriesBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesBatchPutCall(batch16, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch16  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsCategoriesBatchPut(Batch16 batch16) throws ApiException {
        ApiResponse<Batch> localVarResp = productsCategoriesBatchPutWithHttpInfo(batch16);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch16  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsCategoriesBatchPutWithHttpInfo(Batch16 batch16) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesBatchPutValidateBeforeCall(batch16, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch16  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesBatchPutAsync(Batch16 batch16, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesBatchPutValidateBeforeCall(batch16, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesGetCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsCategoriesGetCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return List&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCat> productsCategoriesGet(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        ApiResponse<List<ProductCat>> localVarResp = productsCategoriesGetWithHttpInfo(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return ApiResponse&lt;List&lt;ProductCat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCat>> productsCategoriesGetWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductCat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesGetAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback<List<ProductCat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsCategoriesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsCategoriesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdGetAsync(Integer id, String context, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param productCat4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPatchCall(Integer id, ProductCat4 productCat4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productCat4;

        // create path and map variables
        String localVarPath = "/products/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesIdPatchValidateBeforeCall(Integer id, ProductCat4 productCat4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsCategoriesIdPatch(Async)");
        }
        
        // verify the required parameter 'productCat4' is set
        if (productCat4 == null) {
            throw new ApiException("Missing the required parameter 'productCat4' when calling productsCategoriesIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesIdPatchCall(id, productCat4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat4  (required)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesIdPatch(Integer id, ProductCat4 productCat4) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesIdPatchWithHttpInfo(id, productCat4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat4  (required)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesIdPatchWithHttpInfo(Integer id, ProductCat4 productCat4) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesIdPatchValidateBeforeCall(id, productCat4, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPatchAsync(Integer id, ProductCat4 productCat4, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesIdPatchValidateBeforeCall(id, productCat4, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesIdPost
     * @param id Unique identifier for the resource. (required)
     * @param productCat3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPostCall(Integer id, ProductCat3 productCat3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productCat3;

        // create path and map variables
        String localVarPath = "/products/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesIdPostValidateBeforeCall(Integer id, ProductCat3 productCat3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsCategoriesIdPost(Async)");
        }
        
        // verify the required parameter 'productCat3' is set
        if (productCat3 == null) {
            throw new ApiException("Missing the required parameter 'productCat3' when calling productsCategoriesIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesIdPostCall(id, productCat3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat3  (required)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesIdPost(Integer id, ProductCat3 productCat3) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesIdPostWithHttpInfo(id, productCat3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat3  (required)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesIdPostWithHttpInfo(Integer id, ProductCat3 productCat3) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesIdPostValidateBeforeCall(id, productCat3, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPostAsync(Integer id, ProductCat3 productCat3, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesIdPostValidateBeforeCall(id, productCat3, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesIdPut
     * @param id Unique identifier for the resource. (required)
     * @param productCat2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPutCall(Integer id, ProductCat2 productCat2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productCat2;

        // create path and map variables
        String localVarPath = "/products/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesIdPutValidateBeforeCall(Integer id, ProductCat2 productCat2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsCategoriesIdPut(Async)");
        }
        
        // verify the required parameter 'productCat2' is set
        if (productCat2 == null) {
            throw new ApiException("Missing the required parameter 'productCat2' when calling productsCategoriesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesIdPutCall(id, productCat2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat2  (required)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesIdPut(Integer id, ProductCat2 productCat2) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesIdPutWithHttpInfo(id, productCat2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat2  (required)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesIdPutWithHttpInfo(Integer id, ProductCat2 productCat2) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesIdPutValidateBeforeCall(id, productCat2, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productCat2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesIdPutAsync(Integer id, ProductCat2 productCat2, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesIdPutValidateBeforeCall(id, productCat2, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsCategoriesPost
     * @param productCat1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesPostCall(ProductCat1 productCat1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productCat1;

        // create path and map variables
        String localVarPath = "/products/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsCategoriesPostValidateBeforeCall(ProductCat1 productCat1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCat1' is set
        if (productCat1 == null) {
            throw new ApiException("Missing the required parameter 'productCat1' when calling productsCategoriesPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsCategoriesPostCall(productCat1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productCat1  (required)
     * @return ProductCat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCat productsCategoriesPost(ProductCat1 productCat1) throws ApiException {
        ApiResponse<ProductCat> localVarResp = productsCategoriesPostWithHttpInfo(productCat1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productCat1  (required)
     * @return ApiResponse&lt;ProductCat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCat> productsCategoriesPostWithHttpInfo(ProductCat1 productCat1) throws ApiException {
        okhttp3.Call localVarCall = productsCategoriesPostValidateBeforeCall(productCat1, null);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productCat1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsCategoriesPostAsync(ProductCat1 productCat1, final ApiCallback<ProductCat> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsCategoriesPostValidateBeforeCall(productCat1, _callback);
        Type localVarReturnType = new TypeToken<ProductCat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param type Limit result set to products assigned a specific type. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String type, String sku, Boolean featured, String category, String tag, String shippingClass, String attribute, String attributeTerm, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent_exclude", parentExclude));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (shippingClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping_class", shippingClass));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute", attribute));
        }

        if (attributeTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_term", attributeTerm));
        }

        if (onSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("on_sale", onSale));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        if (stockStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_status", stockStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String type, String sku, Boolean featured, String category, String tag, String shippingClass, String attribute, String attributeTerm, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsGetCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, type, sku, featured, category, tag, shippingClass, attribute, attributeTerm, onSale, minPrice, maxPrice, stockStatus, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param type Limit result set to products assigned a specific type. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> productsGet(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String type, String sku, Boolean featured, String category, String tag, String shippingClass, String attribute, String attributeTerm, Boolean onSale, String minPrice, String maxPrice, String stockStatus) throws ApiException {
        ApiResponse<List<Product>> localVarResp = productsGetWithHttpInfo(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, type, sku, featured, category, tag, shippingClass, attribute, attributeTerm, onSale, minPrice, maxPrice, stockStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param type Limit result set to products assigned a specific type. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> productsGetWithHttpInfo(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String type, String sku, Boolean featured, String category, String tag, String shippingClass, String attribute, String attributeTerm, Boolean onSale, String minPrice, String maxPrice, String stockStatus) throws ApiException {
        okhttp3.Call localVarCall = productsGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, type, sku, featured, category, tag, shippingClass, attribute, attributeTerm, onSale, minPrice, maxPrice, stockStatus, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param type Limit result set to products assigned a specific type. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsGetAsync(String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String type, String sku, Boolean featured, String category, String tag, String shippingClass, String attribute, String attributeTerm, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, type, sku, featured, category, tag, shippingClass, attribute, attributeTerm, onSale, minPrice, maxPrice, stockStatus, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<Product> localVarResp = productsIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdDeleteAsync(Integer id, Boolean force, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsIdGet(Integer id, String context) throws ApiException {
        ApiResponse<Product> localVarResp = productsIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdGetAsync(Integer id, String context, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param product4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPatchCall(Integer id, Product4 product4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product4;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsIdPatchValidateBeforeCall(Integer id, Product4 product4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsIdPatch(Async)");
        }
        
        // verify the required parameter 'product4' is set
        if (product4 == null) {
            throw new ApiException("Missing the required parameter 'product4' when calling productsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsIdPatchCall(id, product4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product4  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsIdPatch(Integer id, Product4 product4) throws ApiException {
        ApiResponse<Product> localVarResp = productsIdPatchWithHttpInfo(id, product4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product4  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsIdPatchWithHttpInfo(Integer id, Product4 product4) throws ApiException {
        okhttp3.Call localVarCall = productsIdPatchValidateBeforeCall(id, product4, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPatchAsync(Integer id, Product4 product4, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsIdPatchValidateBeforeCall(id, product4, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsIdPost
     * @param id Unique identifier for the resource. (required)
     * @param product3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPostCall(Integer id, Product3 product3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product3;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsIdPostValidateBeforeCall(Integer id, Product3 product3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsIdPost(Async)");
        }
        
        // verify the required parameter 'product3' is set
        if (product3 == null) {
            throw new ApiException("Missing the required parameter 'product3' when calling productsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsIdPostCall(id, product3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product3  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsIdPost(Integer id, Product3 product3) throws ApiException {
        ApiResponse<Product> localVarResp = productsIdPostWithHttpInfo(id, product3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product3  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsIdPostWithHttpInfo(Integer id, Product3 product3) throws ApiException {
        okhttp3.Call localVarCall = productsIdPostValidateBeforeCall(id, product3, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPostAsync(Integer id, Product3 product3, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsIdPostValidateBeforeCall(id, product3, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsIdPut
     * @param id Unique identifier for the resource. (required)
     * @param product2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPutCall(Integer id, Product2 product2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product2;

        // create path and map variables
        String localVarPath = "/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsIdPutValidateBeforeCall(Integer id, Product2 product2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsIdPut(Async)");
        }
        
        // verify the required parameter 'product2' is set
        if (product2 == null) {
            throw new ApiException("Missing the required parameter 'product2' when calling productsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsIdPutCall(id, product2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product2  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsIdPut(Integer id, Product2 product2) throws ApiException {
        ApiResponse<Product> localVarResp = productsIdPutWithHttpInfo(id, product2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product2  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsIdPutWithHttpInfo(Integer id, Product2 product2) throws ApiException {
        okhttp3.Call localVarCall = productsIdPutValidateBeforeCall(id, product2, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param product2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsIdPutAsync(Integer id, Product2 product2, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsIdPutValidateBeforeCall(id, product2, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsPost
     * @param product1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostCall(Product1 product1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = product1;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsPostValidateBeforeCall(Product1 product1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'product1' is set
        if (product1 == null) {
            throw new ApiException("Missing the required parameter 'product1' when calling productsPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsPostCall(product1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param product1  (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product productsPost(Product1 product1) throws ApiException {
        ApiResponse<Product> localVarResp = productsPostWithHttpInfo(product1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param product1  (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> productsPostWithHttpInfo(Product1 product1) throws ApiException {
        okhttp3.Call localVarCall = productsPostValidateBeforeCall(product1, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param product1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsPostAsync(Product1 product1, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsPostValidateBeforeCall(product1, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsBatchPatch
     * @param productId Unique identifier for the variable product. (required)
     * @param batch33  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPatchCall(Integer productId, Batch33 batch33, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch33;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/batch"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsBatchPatchValidateBeforeCall(Integer productId, Batch33 batch33, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsBatchPatch(Async)");
        }
        
        // verify the required parameter 'batch33' is set
        if (batch33 == null) {
            throw new ApiException("Missing the required parameter 'batch33' when calling productsProductIdVariationsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPatchCall(productId, batch33, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch33  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsProductIdVariationsBatchPatch(Integer productId, Batch33 batch33) throws ApiException {
        ApiResponse<Batch> localVarResp = productsProductIdVariationsBatchPatchWithHttpInfo(productId, batch33);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch33  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsProductIdVariationsBatchPatchWithHttpInfo(Integer productId, Batch33 batch33) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsBatchPatchValidateBeforeCall(productId, batch33, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch33  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPatchAsync(Integer productId, Batch33 batch33, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPatchValidateBeforeCall(productId, batch33, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsBatchPost
     * @param productId Unique identifier for the variable product. (required)
     * @param batch32  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPostCall(Integer productId, Batch32 batch32, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch32;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/batch"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsBatchPostValidateBeforeCall(Integer productId, Batch32 batch32, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsBatchPost(Async)");
        }
        
        // verify the required parameter 'batch32' is set
        if (batch32 == null) {
            throw new ApiException("Missing the required parameter 'batch32' when calling productsProductIdVariationsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPostCall(productId, batch32, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch32  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsProductIdVariationsBatchPost(Integer productId, Batch32 batch32) throws ApiException {
        ApiResponse<Batch> localVarResp = productsProductIdVariationsBatchPostWithHttpInfo(productId, batch32);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch32  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsProductIdVariationsBatchPostWithHttpInfo(Integer productId, Batch32 batch32) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsBatchPostValidateBeforeCall(productId, batch32, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch32  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPostAsync(Integer productId, Batch32 batch32, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPostValidateBeforeCall(productId, batch32, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsBatchPut
     * @param productId Unique identifier for the variable product. (required)
     * @param batch31  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPutCall(Integer productId, Batch31 batch31, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch31;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/batch"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsBatchPutValidateBeforeCall(Integer productId, Batch31 batch31, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsBatchPut(Async)");
        }
        
        // verify the required parameter 'batch31' is set
        if (batch31 == null) {
            throw new ApiException("Missing the required parameter 'batch31' when calling productsProductIdVariationsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPutCall(productId, batch31, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch31  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsProductIdVariationsBatchPut(Integer productId, Batch31 batch31) throws ApiException {
        ApiResponse<Batch> localVarResp = productsProductIdVariationsBatchPutWithHttpInfo(productId, batch31);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch31  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsProductIdVariationsBatchPutWithHttpInfo(Integer productId, Batch31 batch31) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsBatchPutValidateBeforeCall(productId, batch31, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param batch31  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsBatchPutAsync(Integer productId, Batch31 batch31, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsBatchPutValidateBeforeCall(productId, batch31, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsGet
     * @param productId Unique identifier for the variable product. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsGetCall(Integer productId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String sku, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent_exclude", parentExclude));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (onSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("on_sale", onSale));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        if (stockStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_status", stockStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsGetValidateBeforeCall(Integer productId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String sku, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsGetCall(productId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, sku, onSale, minPrice, maxPrice, stockStatus, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @return List&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductVariation> productsProductIdVariationsGet(Integer productId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String sku, Boolean onSale, String minPrice, String maxPrice, String stockStatus) throws ApiException {
        ApiResponse<List<ProductVariation>> localVarResp = productsProductIdVariationsGetWithHttpInfo(productId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, sku, onSale, minPrice, maxPrice, stockStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @return ApiResponse&lt;List&lt;ProductVariation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductVariation>> productsProductIdVariationsGetWithHttpInfo(Integer productId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String sku, Boolean onSale, String minPrice, String maxPrice, String stockStatus) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsGetValidateBeforeCall(productId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, sku, onSale, minPrice, maxPrice, stockStatus, null);
        Type localVarReturnType = new TypeToken<List<ProductVariation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. (optional)
     * @param sku Limit result set to products with specific SKU(s). Use commas to separate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsGetAsync(Integer productId, String context, Integer page, Integer perPage, String search, String after, String before, String modifiedAfter, String modifiedBefore, Boolean datesAreGmt, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> parent, List<Integer> parentExclude, String slug, String status, String sku, Boolean onSale, String minPrice, String maxPrice, String stockStatus, final ApiCallback<List<ProductVariation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsGetValidateBeforeCall(productId, context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, sku, onSale, minPrice, maxPrice, stockStatus, _callback);
        Type localVarReturnType = new TypeToken<List<ProductVariation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsIdDelete
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdDeleteCall(Integer productId, Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/{id}"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsIdDeleteValidateBeforeCall(Integer productId, Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsProductIdVariationsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsIdDeleteCall(productId, id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsIdDelete(Integer productId, Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsIdDeleteWithHttpInfo(productId, id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsIdDeleteWithHttpInfo(Integer productId, Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsIdDeleteValidateBeforeCall(productId, id, force, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdDeleteAsync(Integer productId, Integer id, Boolean force, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsIdDeleteValidateBeforeCall(productId, id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsIdGet
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdGetCall(Integer productId, Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/{id}"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsIdGetValidateBeforeCall(Integer productId, Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsProductIdVariationsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsIdGetCall(productId, id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsIdGet(Integer productId, Integer id, String context) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsIdGetWithHttpInfo(productId, id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsIdGetWithHttpInfo(Integer productId, Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsIdGetValidateBeforeCall(productId, id, context, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdGetAsync(Integer productId, Integer id, String context, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsIdGetValidateBeforeCall(productId, id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsIdPatch
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPatchCall(Integer productId, Integer id, ProductVariation4 productVariation4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productVariation4;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/{id}"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsIdPatchValidateBeforeCall(Integer productId, Integer id, ProductVariation4 productVariation4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsIdPatch(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsProductIdVariationsIdPatch(Async)");
        }
        
        // verify the required parameter 'productVariation4' is set
        if (productVariation4 == null) {
            throw new ApiException("Missing the required parameter 'productVariation4' when calling productsProductIdVariationsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsIdPatchCall(productId, id, productVariation4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation4  (required)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsIdPatch(Integer productId, Integer id, ProductVariation4 productVariation4) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsIdPatchWithHttpInfo(productId, id, productVariation4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation4  (required)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsIdPatchWithHttpInfo(Integer productId, Integer id, ProductVariation4 productVariation4) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsIdPatchValidateBeforeCall(productId, id, productVariation4, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPatchAsync(Integer productId, Integer id, ProductVariation4 productVariation4, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsIdPatchValidateBeforeCall(productId, id, productVariation4, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsIdPost
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPostCall(Integer productId, Integer id, ProductVariation3 productVariation3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productVariation3;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/{id}"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsIdPostValidateBeforeCall(Integer productId, Integer id, ProductVariation3 productVariation3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsIdPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsProductIdVariationsIdPost(Async)");
        }
        
        // verify the required parameter 'productVariation3' is set
        if (productVariation3 == null) {
            throw new ApiException("Missing the required parameter 'productVariation3' when calling productsProductIdVariationsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsIdPostCall(productId, id, productVariation3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation3  (required)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsIdPost(Integer productId, Integer id, ProductVariation3 productVariation3) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsIdPostWithHttpInfo(productId, id, productVariation3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation3  (required)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsIdPostWithHttpInfo(Integer productId, Integer id, ProductVariation3 productVariation3) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsIdPostValidateBeforeCall(productId, id, productVariation3, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPostAsync(Integer productId, Integer id, ProductVariation3 productVariation3, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsIdPostValidateBeforeCall(productId, id, productVariation3, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsIdPut
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPutCall(Integer productId, Integer id, ProductVariation2 productVariation2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productVariation2;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations/{id}"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsIdPutValidateBeforeCall(Integer productId, Integer id, ProductVariation2 productVariation2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsIdPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsProductIdVariationsIdPut(Async)");
        }
        
        // verify the required parameter 'productVariation2' is set
        if (productVariation2 == null) {
            throw new ApiException("Missing the required parameter 'productVariation2' when calling productsProductIdVariationsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsIdPutCall(productId, id, productVariation2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation2  (required)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsIdPut(Integer productId, Integer id, ProductVariation2 productVariation2) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsIdPutWithHttpInfo(productId, id, productVariation2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation2  (required)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsIdPutWithHttpInfo(Integer productId, Integer id, ProductVariation2 productVariation2) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsIdPutValidateBeforeCall(productId, id, productVariation2, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param id Unique identifier for the variation. (required)
     * @param productVariation2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsIdPutAsync(Integer productId, Integer id, ProductVariation2 productVariation2, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsIdPutValidateBeforeCall(productId, id, productVariation2, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsProductIdVariationsPost
     * @param productId Unique identifier for the variable product. (required)
     * @param productVariation1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsPostCall(Integer productId, ProductVariation1 productVariation1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productVariation1;

        // create path and map variables
        String localVarPath = "/products/{product_id}/variations"
            .replaceAll("\\{" + "product_id" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsProductIdVariationsPostValidateBeforeCall(Integer productId, ProductVariation1 productVariation1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productsProductIdVariationsPost(Async)");
        }
        
        // verify the required parameter 'productVariation1' is set
        if (productVariation1 == null) {
            throw new ApiException("Missing the required parameter 'productVariation1' when calling productsProductIdVariationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsProductIdVariationsPostCall(productId, productVariation1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param productVariation1  (required)
     * @return ProductVariation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariation productsProductIdVariationsPost(Integer productId, ProductVariation1 productVariation1) throws ApiException {
        ApiResponse<ProductVariation> localVarResp = productsProductIdVariationsPostWithHttpInfo(productId, productVariation1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param productVariation1  (required)
     * @return ApiResponse&lt;ProductVariation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariation> productsProductIdVariationsPostWithHttpInfo(Integer productId, ProductVariation1 productVariation1) throws ApiException {
        okhttp3.Call localVarCall = productsProductIdVariationsPostValidateBeforeCall(productId, productVariation1, null);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId Unique identifier for the variable product. (required)
     * @param productVariation1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsProductIdVariationsPostAsync(Integer productId, ProductVariation1 productVariation1, final ApiCallback<ProductVariation> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsProductIdVariationsPostValidateBeforeCall(productId, productVariation1, _callback);
        Type localVarReturnType = new TypeToken<ProductVariation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsBatchPatch
     * @param batch21  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPatchCall(Batch21 batch21, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch21;

        // create path and map variables
        String localVarPath = "/products/reviews/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsBatchPatchValidateBeforeCall(Batch21 batch21, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch21' is set
        if (batch21 == null) {
            throw new ApiException("Missing the required parameter 'batch21' when calling productsReviewsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsBatchPatchCall(batch21, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch21  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsReviewsBatchPatch(Batch21 batch21) throws ApiException {
        ApiResponse<Batch> localVarResp = productsReviewsBatchPatchWithHttpInfo(batch21);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch21  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsReviewsBatchPatchWithHttpInfo(Batch21 batch21) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsBatchPatchValidateBeforeCall(batch21, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch21  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPatchAsync(Batch21 batch21, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsBatchPatchValidateBeforeCall(batch21, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsBatchPost
     * @param batch20  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPostCall(Batch20 batch20, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch20;

        // create path and map variables
        String localVarPath = "/products/reviews/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsBatchPostValidateBeforeCall(Batch20 batch20, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch20' is set
        if (batch20 == null) {
            throw new ApiException("Missing the required parameter 'batch20' when calling productsReviewsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsBatchPostCall(batch20, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch20  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsReviewsBatchPost(Batch20 batch20) throws ApiException {
        ApiResponse<Batch> localVarResp = productsReviewsBatchPostWithHttpInfo(batch20);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch20  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsReviewsBatchPostWithHttpInfo(Batch20 batch20) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsBatchPostValidateBeforeCall(batch20, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch20  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPostAsync(Batch20 batch20, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsBatchPostValidateBeforeCall(batch20, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsBatchPut
     * @param batch19  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPutCall(Batch19 batch19, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch19;

        // create path and map variables
        String localVarPath = "/products/reviews/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsBatchPutValidateBeforeCall(Batch19 batch19, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch19' is set
        if (batch19 == null) {
            throw new ApiException("Missing the required parameter 'batch19' when calling productsReviewsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsBatchPutCall(batch19, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch19  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsReviewsBatchPut(Batch19 batch19) throws ApiException {
        ApiResponse<Batch> localVarResp = productsReviewsBatchPutWithHttpInfo(batch19);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch19  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsReviewsBatchPutWithHttpInfo(Batch19 batch19) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsBatchPutValidateBeforeCall(batch19, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch19  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsBatchPutAsync(Batch19 batch19, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsBatchPutValidateBeforeCall(batch19, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param reviewer Limit result set to reviews assigned to specific user IDs. (optional)
     * @param reviewerExclude Ensure result set excludes reviews assigned to specific user IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs. (optional)
     * @param status Limit result set to reviews assigned a specific status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsGetCall(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> reviewer, List<Integer> reviewerExclude, String reviewerEmail, List<Integer> product, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (reviewer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "reviewer", reviewer));
        }

        if (reviewerExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "reviewer_exclude", reviewerExclude));
        }

        if (reviewerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewer_email", reviewerEmail));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product", product));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> reviewer, List<Integer> reviewerExclude, String reviewerEmail, List<Integer> product, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsReviewsGetCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param reviewer Limit result set to reviews assigned to specific user IDs. (optional)
     * @param reviewerExclude Ensure result set excludes reviews assigned to specific user IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs. (optional)
     * @param status Limit result set to reviews assigned a specific status. (optional)
     * @return List&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductReview> productsReviewsGet(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> reviewer, List<Integer> reviewerExclude, String reviewerEmail, List<Integer> product, String status) throws ApiException {
        ApiResponse<List<ProductReview>> localVarResp = productsReviewsGetWithHttpInfo(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param reviewer Limit result set to reviews assigned to specific user IDs. (optional)
     * @param reviewerExclude Ensure result set excludes reviews assigned to specific user IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs. (optional)
     * @param status Limit result set to reviews assigned a specific status. (optional)
     * @return ApiResponse&lt;List&lt;ProductReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductReview>> productsReviewsGetWithHttpInfo(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> reviewer, List<Integer> reviewerExclude, String reviewerEmail, List<Integer> product, String status) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsGetValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, null);
        Type localVarReturnType = new TypeToken<List<ProductReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param reviewer Limit result set to reviews assigned to specific user IDs. (optional)
     * @param reviewerExclude Ensure result set excludes reviews assigned to specific user IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs. (optional)
     * @param status Limit result set to reviews assigned a specific status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsGetAsync(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, List<Integer> reviewer, List<Integer> reviewerExclude, String reviewerEmail, List<Integer> product, String status, final ApiCallback<List<ProductReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsGetValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, _callback);
        Type localVarReturnType = new TypeToken<List<ProductReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsReviewsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsReviewsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdGetAsync(Integer id, String context, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param productReview4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPatchCall(Integer id, ProductReview4 productReview4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productReview4;

        // create path and map variables
        String localVarPath = "/products/reviews/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsIdPatchValidateBeforeCall(Integer id, ProductReview4 productReview4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsReviewsIdPatch(Async)");
        }
        
        // verify the required parameter 'productReview4' is set
        if (productReview4 == null) {
            throw new ApiException("Missing the required parameter 'productReview4' when calling productsReviewsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsIdPatchCall(id, productReview4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview4  (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsIdPatch(Integer id, ProductReview4 productReview4) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsIdPatchWithHttpInfo(id, productReview4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview4  (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsIdPatchWithHttpInfo(Integer id, ProductReview4 productReview4) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsIdPatchValidateBeforeCall(id, productReview4, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPatchAsync(Integer id, ProductReview4 productReview4, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsIdPatchValidateBeforeCall(id, productReview4, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsIdPost
     * @param id Unique identifier for the resource. (required)
     * @param productReview3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPostCall(Integer id, ProductReview3 productReview3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productReview3;

        // create path and map variables
        String localVarPath = "/products/reviews/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsIdPostValidateBeforeCall(Integer id, ProductReview3 productReview3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsReviewsIdPost(Async)");
        }
        
        // verify the required parameter 'productReview3' is set
        if (productReview3 == null) {
            throw new ApiException("Missing the required parameter 'productReview3' when calling productsReviewsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsIdPostCall(id, productReview3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview3  (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsIdPost(Integer id, ProductReview3 productReview3) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsIdPostWithHttpInfo(id, productReview3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview3  (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsIdPostWithHttpInfo(Integer id, ProductReview3 productReview3) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsIdPostValidateBeforeCall(id, productReview3, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPostAsync(Integer id, ProductReview3 productReview3, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsIdPostValidateBeforeCall(id, productReview3, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsIdPut
     * @param id Unique identifier for the resource. (required)
     * @param productReview2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPutCall(Integer id, ProductReview2 productReview2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productReview2;

        // create path and map variables
        String localVarPath = "/products/reviews/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsIdPutValidateBeforeCall(Integer id, ProductReview2 productReview2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsReviewsIdPut(Async)");
        }
        
        // verify the required parameter 'productReview2' is set
        if (productReview2 == null) {
            throw new ApiException("Missing the required parameter 'productReview2' when calling productsReviewsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsIdPutCall(id, productReview2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview2  (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsIdPut(Integer id, ProductReview2 productReview2) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsIdPutWithHttpInfo(id, productReview2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview2  (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsIdPutWithHttpInfo(Integer id, ProductReview2 productReview2) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsIdPutValidateBeforeCall(id, productReview2, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productReview2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsIdPutAsync(Integer id, ProductReview2 productReview2, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsIdPutValidateBeforeCall(id, productReview2, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsReviewsPost
     * @param productReview1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsPostCall(ProductReview1 productReview1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productReview1;

        // create path and map variables
        String localVarPath = "/products/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsReviewsPostValidateBeforeCall(ProductReview1 productReview1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productReview1' is set
        if (productReview1 == null) {
            throw new ApiException("Missing the required parameter 'productReview1' when calling productsReviewsPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsReviewsPostCall(productReview1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productReview1  (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview productsReviewsPost(ProductReview1 productReview1) throws ApiException {
        ApiResponse<ProductReview> localVarResp = productsReviewsPostWithHttpInfo(productReview1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productReview1  (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> productsReviewsPostWithHttpInfo(ProductReview1 productReview1) throws ApiException {
        okhttp3.Call localVarCall = productsReviewsPostValidateBeforeCall(productReview1, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productReview1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsReviewsPostAsync(ProductReview1 productReview1, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsReviewsPostValidateBeforeCall(productReview1, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesBatchPatch
     * @param batch24  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPatchCall(Batch24 batch24, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch24;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesBatchPatchValidateBeforeCall(Batch24 batch24, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch24' is set
        if (batch24 == null) {
            throw new ApiException("Missing the required parameter 'batch24' when calling productsShippingClassesBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesBatchPatchCall(batch24, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch24  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsShippingClassesBatchPatch(Batch24 batch24) throws ApiException {
        ApiResponse<Batch> localVarResp = productsShippingClassesBatchPatchWithHttpInfo(batch24);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch24  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsShippingClassesBatchPatchWithHttpInfo(Batch24 batch24) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesBatchPatchValidateBeforeCall(batch24, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch24  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPatchAsync(Batch24 batch24, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesBatchPatchValidateBeforeCall(batch24, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesBatchPost
     * @param batch23  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPostCall(Batch23 batch23, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch23;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesBatchPostValidateBeforeCall(Batch23 batch23, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch23' is set
        if (batch23 == null) {
            throw new ApiException("Missing the required parameter 'batch23' when calling productsShippingClassesBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesBatchPostCall(batch23, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch23  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsShippingClassesBatchPost(Batch23 batch23) throws ApiException {
        ApiResponse<Batch> localVarResp = productsShippingClassesBatchPostWithHttpInfo(batch23);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch23  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsShippingClassesBatchPostWithHttpInfo(Batch23 batch23) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesBatchPostValidateBeforeCall(batch23, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch23  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPostAsync(Batch23 batch23, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesBatchPostValidateBeforeCall(batch23, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesBatchPut
     * @param batch22  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPutCall(Batch22 batch22, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch22;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesBatchPutValidateBeforeCall(Batch22 batch22, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch22' is set
        if (batch22 == null) {
            throw new ApiException("Missing the required parameter 'batch22' when calling productsShippingClassesBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesBatchPutCall(batch22, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch22  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsShippingClassesBatchPut(Batch22 batch22) throws ApiException {
        ApiResponse<Batch> localVarResp = productsShippingClassesBatchPutWithHttpInfo(batch22);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch22  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsShippingClassesBatchPutWithHttpInfo(Batch22 batch22) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesBatchPutValidateBeforeCall(batch22, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch22  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesBatchPutAsync(Batch22 batch22, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesBatchPutValidateBeforeCall(batch22, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesGetCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/shipping_classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsShippingClassesGetCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return List&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductShippingClass> productsShippingClassesGet(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        ApiResponse<List<ProductShippingClass>> localVarResp = productsShippingClassesGetWithHttpInfo(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return ApiResponse&lt;List&lt;ProductShippingClass&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductShippingClass>> productsShippingClassesGetWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductShippingClass>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesGetAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback<List<ProductShippingClass>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductShippingClass>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsShippingClassesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsShippingClassesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdGetAsync(Integer id, String context, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPatchCall(Integer id, ProductShippingClass4 productShippingClass4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productShippingClass4;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesIdPatchValidateBeforeCall(Integer id, ProductShippingClass4 productShippingClass4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsShippingClassesIdPatch(Async)");
        }
        
        // verify the required parameter 'productShippingClass4' is set
        if (productShippingClass4 == null) {
            throw new ApiException("Missing the required parameter 'productShippingClass4' when calling productsShippingClassesIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesIdPatchCall(id, productShippingClass4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass4  (required)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesIdPatch(Integer id, ProductShippingClass4 productShippingClass4) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesIdPatchWithHttpInfo(id, productShippingClass4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass4  (required)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesIdPatchWithHttpInfo(Integer id, ProductShippingClass4 productShippingClass4) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesIdPatchValidateBeforeCall(id, productShippingClass4, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPatchAsync(Integer id, ProductShippingClass4 productShippingClass4, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesIdPatchValidateBeforeCall(id, productShippingClass4, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesIdPost
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPostCall(Integer id, ProductShippingClass3 productShippingClass3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productShippingClass3;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesIdPostValidateBeforeCall(Integer id, ProductShippingClass3 productShippingClass3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsShippingClassesIdPost(Async)");
        }
        
        // verify the required parameter 'productShippingClass3' is set
        if (productShippingClass3 == null) {
            throw new ApiException("Missing the required parameter 'productShippingClass3' when calling productsShippingClassesIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesIdPostCall(id, productShippingClass3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass3  (required)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesIdPost(Integer id, ProductShippingClass3 productShippingClass3) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesIdPostWithHttpInfo(id, productShippingClass3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass3  (required)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesIdPostWithHttpInfo(Integer id, ProductShippingClass3 productShippingClass3) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesIdPostValidateBeforeCall(id, productShippingClass3, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPostAsync(Integer id, ProductShippingClass3 productShippingClass3, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesIdPostValidateBeforeCall(id, productShippingClass3, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesIdPut
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPutCall(Integer id, ProductShippingClass2 productShippingClass2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productShippingClass2;

        // create path and map variables
        String localVarPath = "/products/shipping_classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesIdPutValidateBeforeCall(Integer id, ProductShippingClass2 productShippingClass2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsShippingClassesIdPut(Async)");
        }
        
        // verify the required parameter 'productShippingClass2' is set
        if (productShippingClass2 == null) {
            throw new ApiException("Missing the required parameter 'productShippingClass2' when calling productsShippingClassesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesIdPutCall(id, productShippingClass2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass2  (required)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesIdPut(Integer id, ProductShippingClass2 productShippingClass2) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesIdPutWithHttpInfo(id, productShippingClass2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass2  (required)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesIdPutWithHttpInfo(Integer id, ProductShippingClass2 productShippingClass2) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesIdPutValidateBeforeCall(id, productShippingClass2, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productShippingClass2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesIdPutAsync(Integer id, ProductShippingClass2 productShippingClass2, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesIdPutValidateBeforeCall(id, productShippingClass2, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsShippingClassesPost
     * @param productShippingClass1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesPostCall(ProductShippingClass1 productShippingClass1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productShippingClass1;

        // create path and map variables
        String localVarPath = "/products/shipping_classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsShippingClassesPostValidateBeforeCall(ProductShippingClass1 productShippingClass1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productShippingClass1' is set
        if (productShippingClass1 == null) {
            throw new ApiException("Missing the required parameter 'productShippingClass1' when calling productsShippingClassesPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsShippingClassesPostCall(productShippingClass1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productShippingClass1  (required)
     * @return ProductShippingClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductShippingClass productsShippingClassesPost(ProductShippingClass1 productShippingClass1) throws ApiException {
        ApiResponse<ProductShippingClass> localVarResp = productsShippingClassesPostWithHttpInfo(productShippingClass1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productShippingClass1  (required)
     * @return ApiResponse&lt;ProductShippingClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductShippingClass> productsShippingClassesPostWithHttpInfo(ProductShippingClass1 productShippingClass1) throws ApiException {
        okhttp3.Call localVarCall = productsShippingClassesPostValidateBeforeCall(productShippingClass1, null);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productShippingClass1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsShippingClassesPostAsync(ProductShippingClass1 productShippingClass1, final ApiCallback<ProductShippingClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsShippingClassesPostValidateBeforeCall(productShippingClass1, _callback);
        Type localVarReturnType = new TypeToken<ProductShippingClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsBatchPatch
     * @param batch27  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPatchCall(Batch27 batch27, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch27;

        // create path and map variables
        String localVarPath = "/products/tags/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsBatchPatchValidateBeforeCall(Batch27 batch27, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch27' is set
        if (batch27 == null) {
            throw new ApiException("Missing the required parameter 'batch27' when calling productsTagsBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsBatchPatchCall(batch27, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch27  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsTagsBatchPatch(Batch27 batch27) throws ApiException {
        ApiResponse<Batch> localVarResp = productsTagsBatchPatchWithHttpInfo(batch27);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch27  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsTagsBatchPatchWithHttpInfo(Batch27 batch27) throws ApiException {
        okhttp3.Call localVarCall = productsTagsBatchPatchValidateBeforeCall(batch27, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch27  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPatchAsync(Batch27 batch27, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsBatchPatchValidateBeforeCall(batch27, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsBatchPost
     * @param batch26  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPostCall(Batch26 batch26, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch26;

        // create path and map variables
        String localVarPath = "/products/tags/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsBatchPostValidateBeforeCall(Batch26 batch26, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch26' is set
        if (batch26 == null) {
            throw new ApiException("Missing the required parameter 'batch26' when calling productsTagsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsBatchPostCall(batch26, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch26  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsTagsBatchPost(Batch26 batch26) throws ApiException {
        ApiResponse<Batch> localVarResp = productsTagsBatchPostWithHttpInfo(batch26);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch26  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsTagsBatchPostWithHttpInfo(Batch26 batch26) throws ApiException {
        okhttp3.Call localVarCall = productsTagsBatchPostValidateBeforeCall(batch26, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch26  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPostAsync(Batch26 batch26, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsBatchPostValidateBeforeCall(batch26, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsBatchPut
     * @param batch25  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPutCall(Batch25 batch25, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch25;

        // create path and map variables
        String localVarPath = "/products/tags/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsBatchPutValidateBeforeCall(Batch25 batch25, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch25' is set
        if (batch25 == null) {
            throw new ApiException("Missing the required parameter 'batch25' when calling productsTagsBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsBatchPutCall(batch25, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch25  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch productsTagsBatchPut(Batch25 batch25) throws ApiException {
        ApiResponse<Batch> localVarResp = productsTagsBatchPutWithHttpInfo(batch25);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch25  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> productsTagsBatchPutWithHttpInfo(Batch25 batch25) throws ApiException {
        okhttp3.Call localVarCall = productsTagsBatchPutValidateBeforeCall(batch25, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch25  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsBatchPutAsync(Batch25 batch25, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsBatchPutValidateBeforeCall(batch25, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsGetCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productsTagsGetCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return List&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductTag> productsTagsGet(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        ApiResponse<List<ProductTag>> localVarResp = productsTagsGetWithHttpInfo(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @return ApiResponse&lt;List&lt;ProductTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductTag>> productsTagsGetWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        okhttp3.Call localVarCall = productsTagsGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by resource attribute. (optional)
     * @param hideEmpty Whether to hide resources not assigned to any products. (optional)
     * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsGetAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback<List<ProductTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsGetValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, parent, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsTagsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = productsTagsIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsTagsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsIdGet(Integer id, String context) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = productsTagsIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdGetAsync(Integer id, String context, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param productTag4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPatchCall(Integer id, ProductTag4 productTag4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productTag4;

        // create path and map variables
        String localVarPath = "/products/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsIdPatchValidateBeforeCall(Integer id, ProductTag4 productTag4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsTagsIdPatch(Async)");
        }
        
        // verify the required parameter 'productTag4' is set
        if (productTag4 == null) {
            throw new ApiException("Missing the required parameter 'productTag4' when calling productsTagsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsIdPatchCall(id, productTag4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag4  (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsIdPatch(Integer id, ProductTag4 productTag4) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsIdPatchWithHttpInfo(id, productTag4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag4  (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsIdPatchWithHttpInfo(Integer id, ProductTag4 productTag4) throws ApiException {
        okhttp3.Call localVarCall = productsTagsIdPatchValidateBeforeCall(id, productTag4, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPatchAsync(Integer id, ProductTag4 productTag4, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsIdPatchValidateBeforeCall(id, productTag4, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsIdPost
     * @param id Unique identifier for the resource. (required)
     * @param productTag3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPostCall(Integer id, ProductTag3 productTag3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productTag3;

        // create path and map variables
        String localVarPath = "/products/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsIdPostValidateBeforeCall(Integer id, ProductTag3 productTag3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsTagsIdPost(Async)");
        }
        
        // verify the required parameter 'productTag3' is set
        if (productTag3 == null) {
            throw new ApiException("Missing the required parameter 'productTag3' when calling productsTagsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsIdPostCall(id, productTag3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag3  (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsIdPost(Integer id, ProductTag3 productTag3) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsIdPostWithHttpInfo(id, productTag3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag3  (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsIdPostWithHttpInfo(Integer id, ProductTag3 productTag3) throws ApiException {
        okhttp3.Call localVarCall = productsTagsIdPostValidateBeforeCall(id, productTag3, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPostAsync(Integer id, ProductTag3 productTag3, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsIdPostValidateBeforeCall(id, productTag3, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsIdPut
     * @param id Unique identifier for the resource. (required)
     * @param productTag2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPutCall(Integer id, ProductTag2 productTag2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productTag2;

        // create path and map variables
        String localVarPath = "/products/tags/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsIdPutValidateBeforeCall(Integer id, ProductTag2 productTag2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productsTagsIdPut(Async)");
        }
        
        // verify the required parameter 'productTag2' is set
        if (productTag2 == null) {
            throw new ApiException("Missing the required parameter 'productTag2' when calling productsTagsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsIdPutCall(id, productTag2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag2  (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsIdPut(Integer id, ProductTag2 productTag2) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsIdPutWithHttpInfo(id, productTag2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag2  (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsIdPutWithHttpInfo(Integer id, ProductTag2 productTag2) throws ApiException {
        okhttp3.Call localVarCall = productsTagsIdPutValidateBeforeCall(id, productTag2, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param productTag2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsIdPutAsync(Integer id, ProductTag2 productTag2, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsIdPutValidateBeforeCall(id, productTag2, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTagsPost
     * @param productTag1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsPostCall(ProductTag1 productTag1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productTag1;

        // create path and map variables
        String localVarPath = "/products/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTagsPostValidateBeforeCall(ProductTag1 productTag1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTag1' is set
        if (productTag1 == null) {
            throw new ApiException("Missing the required parameter 'productTag1' when calling productsTagsPost(Async)");
        }
        

        okhttp3.Call localVarCall = productsTagsPostCall(productTag1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productTag1  (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag productsTagsPost(ProductTag1 productTag1) throws ApiException {
        ApiResponse<ProductTag> localVarResp = productsTagsPostWithHttpInfo(productTag1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productTag1  (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> productsTagsPostWithHttpInfo(ProductTag1 productTag1) throws ApiException {
        okhttp3.Call localVarCall = productsTagsPostValidateBeforeCall(productTag1, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productTag1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTagsPostAsync(ProductTag1 productTag1, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTagsPostValidateBeforeCall(productTag1, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsCouponsTotalsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCouponsTotalsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/coupons/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsCouponsTotalsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsCouponsTotalsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ReportCouponTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportCouponTotal> reportsCouponsTotalsGet(String context) throws ApiException {
        ApiResponse<List<ReportCouponTotal>> localVarResp = reportsCouponsTotalsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ReportCouponTotal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportCouponTotal>> reportsCouponsTotalsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsCouponsTotalsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ReportCouponTotal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCouponsTotalsGetAsync(String context, final ApiCallback<List<ReportCouponTotal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsCouponsTotalsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ReportCouponTotal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsCustomersTotalsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCustomersTotalsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/customers/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsCustomersTotalsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsCustomersTotalsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ReportCustomerTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportCustomerTotal> reportsCustomersTotalsGet(String context) throws ApiException {
        ApiResponse<List<ReportCustomerTotal>> localVarResp = reportsCustomersTotalsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ReportCustomerTotal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportCustomerTotal>> reportsCustomersTotalsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsCustomersTotalsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ReportCustomerTotal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsCustomersTotalsGetAsync(String context, final ApiCallback<List<ReportCustomerTotal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsCustomersTotalsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ReportCustomerTotal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Report> reportsGet(String context) throws ApiException {
        ApiResponse<List<Report>> localVarResp = reportsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;Report&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Report>> reportsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<Report>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsGetAsync(String context, final ApiCallback<List<Report>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<Report>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsOrdersTotalsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsOrdersTotalsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/orders/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsOrdersTotalsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsOrdersTotalsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ReportOrderTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportOrderTotal> reportsOrdersTotalsGet(String context) throws ApiException {
        ApiResponse<List<ReportOrderTotal>> localVarResp = reportsOrdersTotalsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ReportOrderTotal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportOrderTotal>> reportsOrdersTotalsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsOrdersTotalsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ReportOrderTotal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsOrdersTotalsGetAsync(String context, final ApiCallback<List<ReportOrderTotal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsOrdersTotalsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ReportOrderTotal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsProductsTotalsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsProductsTotalsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/products/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsProductsTotalsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsProductsTotalsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ReportProductTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportProductTotal> reportsProductsTotalsGet(String context) throws ApiException {
        ApiResponse<List<ReportProductTotal>> localVarResp = reportsProductsTotalsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ReportProductTotal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportProductTotal>> reportsProductsTotalsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsProductsTotalsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ReportProductTotal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsProductsTotalsGetAsync(String context, final ApiCallback<List<ReportProductTotal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsProductsTotalsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ReportProductTotal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsReviewsTotalsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsReviewsTotalsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/reviews/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsReviewsTotalsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsReviewsTotalsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ReportReviewTotal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportReviewTotal> reportsReviewsTotalsGet(String context) throws ApiException {
        ApiResponse<List<ReportReviewTotal>> localVarResp = reportsReviewsTotalsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ReportReviewTotal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportReviewTotal>> reportsReviewsTotalsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = reportsReviewsTotalsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ReportReviewTotal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsReviewsTotalsGetAsync(String context, final ApiCallback<List<ReportReviewTotal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsReviewsTotalsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ReportReviewTotal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsSalesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSalesGetCall(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsSalesGetValidateBeforeCall(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsSalesGetCall(context, period, dateMin, dateMax, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @return List&lt;SalesReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<SalesReport> reportsSalesGet(String context, String period, LocalDate dateMin, LocalDate dateMax) throws ApiException {
        ApiResponse<List<SalesReport>> localVarResp = reportsSalesGetWithHttpInfo(context, period, dateMin, dateMax);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @return ApiResponse&lt;List&lt;SalesReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SalesReport>> reportsSalesGetWithHttpInfo(String context, String period, LocalDate dateMin, LocalDate dateMax) throws ApiException {
        okhttp3.Call localVarCall = reportsSalesGetValidateBeforeCall(context, period, dateMin, dateMax, null);
        Type localVarReturnType = new TypeToken<List<SalesReport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSalesGetAsync(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback<List<SalesReport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsSalesGetValidateBeforeCall(context, period, dateMin, dateMax, _callback);
        Type localVarReturnType = new TypeToken<List<SalesReport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsTopSellersGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTopSellersGetCall(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/top_sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsTopSellersGetValidateBeforeCall(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = reportsTopSellersGetCall(context, period, dateMin, dateMax, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @return List&lt;TopSellersReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<TopSellersReport> reportsTopSellersGet(String context, String period, LocalDate dateMin, LocalDate dateMax) throws ApiException {
        ApiResponse<List<TopSellersReport>> localVarResp = reportsTopSellersGetWithHttpInfo(context, period, dateMin, dateMax);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @return ApiResponse&lt;List&lt;TopSellersReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TopSellersReport>> reportsTopSellersGetWithHttpInfo(String context, String period, LocalDate dateMin, LocalDate dateMax) throws ApiException {
        okhttp3.Call localVarCall = reportsTopSellersGetValidateBeforeCall(context, period, dateMin, dateMax, null);
        Type localVarReturnType = new TypeToken<List<TopSellersReport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param period Report period. (optional)
     * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTopSellersGetAsync(String context, String period, LocalDate dateMin, LocalDate dateMax, final ApiCallback<List<TopSellersReport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsTopSellersGetValidateBeforeCall(context, period, dateMin, dateMax, _callback);
        Type localVarReturnType = new TypeToken<List<TopSellersReport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rootGet
     * @param namespace  (optional)
     * @param context  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(String namespace, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(String namespace, String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rootGetCall(namespace, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param namespace  (optional)
     * @param context  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void rootGet(String namespace, String context) throws ApiException {
        rootGetWithHttpInfo(namespace, context);
    }

    /**
     * 
     * 
     * @param namespace  (optional)
     * @param context  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rootGetWithHttpInfo(String namespace, String context) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(namespace, context, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespace  (optional)
     * @param context  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(String namespace, String context, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(namespace, context, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingMethodsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingMethodsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping_methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingMethodsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = shippingMethodsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;ShippingMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingMethod> shippingMethodsGet(String context) throws ApiException {
        ApiResponse<List<ShippingMethod>> localVarResp = shippingMethodsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;ShippingMethod&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingMethod>> shippingMethodsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = shippingMethodsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ShippingMethod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingMethodsGetAsync(String context, final ApiCallback<List<ShippingMethod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingMethodsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ShippingMethod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingMethodsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingMethodsIdGetCall(String id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping_methods/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingMethodsIdGetValidateBeforeCall(String id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingMethodsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = shippingMethodsIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ShippingMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingMethod shippingMethodsIdGet(String id, String context) throws ApiException {
        ApiResponse<ShippingMethod> localVarResp = shippingMethodsIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;ShippingMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingMethod> shippingMethodsIdGetWithHttpInfo(String id, String context) throws ApiException {
        okhttp3.Call localVarCall = shippingMethodsIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<ShippingMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingMethodsIdGetAsync(String id, String context, final ApiCallback<ShippingMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingMethodsIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<ShippingMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = shippingZonesGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingZone> shippingZonesGet() throws ApiException {
        ApiResponse<List<ShippingZone>> localVarResp = shippingZonesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;ShippingZone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingZone>> shippingZonesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = shippingZonesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ShippingZone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesGetAsync(final ApiCallback<List<ShippingZone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ShippingZone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdDelete
     * @param id Unique ID for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdDeleteAsync(Integer id, Boolean force, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdGet
     * @param id Unique ID for the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesIdGet(Integer id) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdGetAsync(Integer id, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdLocationsGet
     * @param id Unique ID for the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}/locations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdLocationsGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdLocationsGet(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdLocationsGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @return List&lt;ShippingZoneLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingZoneLocation> shippingZonesIdLocationsGet(Integer id) throws ApiException {
        ApiResponse<List<ShippingZoneLocation>> localVarResp = shippingZonesIdLocationsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @return ApiResponse&lt;List&lt;ShippingZoneLocation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingZoneLocation>> shippingZonesIdLocationsGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdLocationsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ShippingZoneLocation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsGetAsync(Integer id, final ApiCallback<List<ShippingZoneLocation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdLocationsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ShippingZoneLocation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdLocationsPatch
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPatchCall(Integer id, ShippingZoneLocation3 shippingZoneLocation3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneLocation3;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}/locations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdLocationsPatchValidateBeforeCall(Integer id, ShippingZoneLocation3 shippingZoneLocation3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdLocationsPatch(Async)");
        }
        
        // verify the required parameter 'shippingZoneLocation3' is set
        if (shippingZoneLocation3 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneLocation3' when calling shippingZonesIdLocationsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdLocationsPatchCall(id, shippingZoneLocation3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation3  (required)
     * @return ShippingZoneLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneLocation shippingZonesIdLocationsPatch(Integer id, ShippingZoneLocation3 shippingZoneLocation3) throws ApiException {
        ApiResponse<ShippingZoneLocation> localVarResp = shippingZonesIdLocationsPatchWithHttpInfo(id, shippingZoneLocation3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation3  (required)
     * @return ApiResponse&lt;ShippingZoneLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneLocation> shippingZonesIdLocationsPatchWithHttpInfo(Integer id, ShippingZoneLocation3 shippingZoneLocation3) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdLocationsPatchValidateBeforeCall(id, shippingZoneLocation3, null);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPatchAsync(Integer id, ShippingZoneLocation3 shippingZoneLocation3, final ApiCallback<ShippingZoneLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdLocationsPatchValidateBeforeCall(id, shippingZoneLocation3, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdLocationsPost
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPostCall(Integer id, ShippingZoneLocation2 shippingZoneLocation2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneLocation2;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}/locations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdLocationsPostValidateBeforeCall(Integer id, ShippingZoneLocation2 shippingZoneLocation2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdLocationsPost(Async)");
        }
        
        // verify the required parameter 'shippingZoneLocation2' is set
        if (shippingZoneLocation2 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneLocation2' when calling shippingZonesIdLocationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdLocationsPostCall(id, shippingZoneLocation2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation2  (required)
     * @return ShippingZoneLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneLocation shippingZonesIdLocationsPost(Integer id, ShippingZoneLocation2 shippingZoneLocation2) throws ApiException {
        ApiResponse<ShippingZoneLocation> localVarResp = shippingZonesIdLocationsPostWithHttpInfo(id, shippingZoneLocation2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation2  (required)
     * @return ApiResponse&lt;ShippingZoneLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneLocation> shippingZonesIdLocationsPostWithHttpInfo(Integer id, ShippingZoneLocation2 shippingZoneLocation2) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdLocationsPostValidateBeforeCall(id, shippingZoneLocation2, null);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPostAsync(Integer id, ShippingZoneLocation2 shippingZoneLocation2, final ApiCallback<ShippingZoneLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdLocationsPostValidateBeforeCall(id, shippingZoneLocation2, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdLocationsPut
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPutCall(Integer id, ShippingZoneLocation1 shippingZoneLocation1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneLocation1;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}/locations"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdLocationsPutValidateBeforeCall(Integer id, ShippingZoneLocation1 shippingZoneLocation1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdLocationsPut(Async)");
        }
        
        // verify the required parameter 'shippingZoneLocation1' is set
        if (shippingZoneLocation1 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneLocation1' when calling shippingZonesIdLocationsPut(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdLocationsPutCall(id, shippingZoneLocation1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation1  (required)
     * @return ShippingZoneLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneLocation shippingZonesIdLocationsPut(Integer id, ShippingZoneLocation1 shippingZoneLocation1) throws ApiException {
        ApiResponse<ShippingZoneLocation> localVarResp = shippingZonesIdLocationsPutWithHttpInfo(id, shippingZoneLocation1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation1  (required)
     * @return ApiResponse&lt;ShippingZoneLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneLocation> shippingZonesIdLocationsPutWithHttpInfo(Integer id, ShippingZoneLocation1 shippingZoneLocation1) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdLocationsPutValidateBeforeCall(id, shippingZoneLocation1, null);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZoneLocation1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdLocationsPutAsync(Integer id, ShippingZoneLocation1 shippingZoneLocation1, final ApiCallback<ShippingZoneLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdLocationsPutValidateBeforeCall(id, shippingZoneLocation1, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdPatch
     * @param id Unique ID for the resource. (required)
     * @param shippingZone4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPatchCall(Integer id, ShippingZone4 shippingZone4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZone4;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdPatchValidateBeforeCall(Integer id, ShippingZone4 shippingZone4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdPatch(Async)");
        }
        
        // verify the required parameter 'shippingZone4' is set
        if (shippingZone4 == null) {
            throw new ApiException("Missing the required parameter 'shippingZone4' when calling shippingZonesIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdPatchCall(id, shippingZone4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone4  (required)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesIdPatch(Integer id, ShippingZone4 shippingZone4) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesIdPatchWithHttpInfo(id, shippingZone4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone4  (required)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesIdPatchWithHttpInfo(Integer id, ShippingZone4 shippingZone4) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdPatchValidateBeforeCall(id, shippingZone4, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPatchAsync(Integer id, ShippingZone4 shippingZone4, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdPatchValidateBeforeCall(id, shippingZone4, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdPost
     * @param id Unique ID for the resource. (required)
     * @param shippingZone3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPostCall(Integer id, ShippingZone3 shippingZone3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZone3;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdPostValidateBeforeCall(Integer id, ShippingZone3 shippingZone3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdPost(Async)");
        }
        
        // verify the required parameter 'shippingZone3' is set
        if (shippingZone3 == null) {
            throw new ApiException("Missing the required parameter 'shippingZone3' when calling shippingZonesIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdPostCall(id, shippingZone3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone3  (required)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesIdPost(Integer id, ShippingZone3 shippingZone3) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesIdPostWithHttpInfo(id, shippingZone3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone3  (required)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesIdPostWithHttpInfo(Integer id, ShippingZone3 shippingZone3) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdPostValidateBeforeCall(id, shippingZone3, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPostAsync(Integer id, ShippingZone3 shippingZone3, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdPostValidateBeforeCall(id, shippingZone3, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesIdPut
     * @param id Unique ID for the resource. (required)
     * @param shippingZone2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPutCall(Integer id, ShippingZone2 shippingZone2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZone2;

        // create path and map variables
        String localVarPath = "/shipping/zones/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesIdPutValidateBeforeCall(Integer id, ShippingZone2 shippingZone2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling shippingZonesIdPut(Async)");
        }
        
        // verify the required parameter 'shippingZone2' is set
        if (shippingZone2 == null) {
            throw new ApiException("Missing the required parameter 'shippingZone2' when calling shippingZonesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesIdPutCall(id, shippingZone2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone2  (required)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesIdPut(Integer id, ShippingZone2 shippingZone2) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesIdPutWithHttpInfo(id, shippingZone2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone2  (required)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesIdPutWithHttpInfo(Integer id, ShippingZone2 shippingZone2) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesIdPutValidateBeforeCall(id, shippingZone2, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique ID for the resource. (required)
     * @param shippingZone2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesIdPutAsync(Integer id, ShippingZone2 shippingZone2, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesIdPutValidateBeforeCall(id, shippingZone2, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesPost
     * @param shippingZone1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesPostCall(ShippingZone1 shippingZone1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZone1;

        // create path and map variables
        String localVarPath = "/shipping/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesPostValidateBeforeCall(ShippingZone1 shippingZone1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shippingZone1' is set
        if (shippingZone1 == null) {
            throw new ApiException("Missing the required parameter 'shippingZone1' when calling shippingZonesPost(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesPostCall(shippingZone1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param shippingZone1  (required)
     * @return ShippingZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZone shippingZonesPost(ShippingZone1 shippingZone1) throws ApiException {
        ApiResponse<ShippingZone> localVarResp = shippingZonesPostWithHttpInfo(shippingZone1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param shippingZone1  (required)
     * @return ApiResponse&lt;ShippingZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZone> shippingZonesPostWithHttpInfo(ShippingZone1 shippingZone1) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesPostValidateBeforeCall(shippingZone1, null);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param shippingZone1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesPostAsync(ShippingZone1 shippingZone1, final ApiCallback<ShippingZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesPostValidateBeforeCall(shippingZone1, _callback);
        Type localVarReturnType = new TypeToken<ShippingZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsGet
     * @param zoneId Unique ID for the zone. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsGetCall(Integer zoneId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsGetValidateBeforeCall(Integer zoneId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsGet(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsGetCall(zoneId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @return List&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingZoneMethod> shippingZonesZoneIdMethodsGet(Integer zoneId) throws ApiException {
        ApiResponse<List<ShippingZoneMethod>> localVarResp = shippingZonesZoneIdMethodsGetWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @return ApiResponse&lt;List&lt;ShippingZoneMethod&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingZoneMethod>> shippingZonesZoneIdMethodsGetWithHttpInfo(Integer zoneId) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsGetValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<List<ShippingZoneMethod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsGetAsync(Integer zoneId, final ApiCallback<List<ShippingZoneMethod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsGetValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<List<ShippingZoneMethod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsInstanceIdDelete
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdDeleteCall(Integer zoneId, Integer instanceId, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods/{instance_id}"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "instance_id" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsInstanceIdDeleteValidateBeforeCall(Integer zoneId, Integer instanceId, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsInstanceIdDelete(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling shippingZonesZoneIdMethodsInstanceIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdDeleteCall(zoneId, instanceId, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsInstanceIdDelete(Integer zoneId, Integer instanceId, Boolean force) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsInstanceIdDeleteWithHttpInfo(zoneId, instanceId, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsInstanceIdDeleteWithHttpInfo(Integer zoneId, Integer instanceId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdDeleteValidateBeforeCall(zoneId, instanceId, force, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param force Whether to bypass trash and force deletion. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdDeleteAsync(Integer zoneId, Integer instanceId, Boolean force, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdDeleteValidateBeforeCall(zoneId, instanceId, force, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsInstanceIdGet
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdGetCall(Integer zoneId, Integer instanceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods/{instance_id}"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "instance_id" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsInstanceIdGetValidateBeforeCall(Integer zoneId, Integer instanceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsInstanceIdGet(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling shippingZonesZoneIdMethodsInstanceIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdGetCall(zoneId, instanceId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsInstanceIdGet(Integer zoneId, Integer instanceId) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsInstanceIdGetWithHttpInfo(zoneId, instanceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsInstanceIdGetWithHttpInfo(Integer zoneId, Integer instanceId) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdGetValidateBeforeCall(zoneId, instanceId, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdGetAsync(Integer zoneId, Integer instanceId, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdGetValidateBeforeCall(zoneId, instanceId, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsInstanceIdPatch
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPatchCall(Integer zoneId, Integer instanceId, ShippingZoneMethod4 shippingZoneMethod4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneMethod4;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods/{instance_id}"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "instance_id" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPatchValidateBeforeCall(Integer zoneId, Integer instanceId, ShippingZoneMethod4 shippingZoneMethod4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsInstanceIdPatch(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling shippingZonesZoneIdMethodsInstanceIdPatch(Async)");
        }
        
        // verify the required parameter 'shippingZoneMethod4' is set
        if (shippingZoneMethod4 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneMethod4' when calling shippingZonesZoneIdMethodsInstanceIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPatchCall(zoneId, instanceId, shippingZoneMethod4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod4  (required)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsInstanceIdPatch(Integer zoneId, Integer instanceId, ShippingZoneMethod4 shippingZoneMethod4) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsInstanceIdPatchWithHttpInfo(zoneId, instanceId, shippingZoneMethod4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod4  (required)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsInstanceIdPatchWithHttpInfo(Integer zoneId, Integer instanceId, ShippingZoneMethod4 shippingZoneMethod4) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPatchValidateBeforeCall(zoneId, instanceId, shippingZoneMethod4, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPatchAsync(Integer zoneId, Integer instanceId, ShippingZoneMethod4 shippingZoneMethod4, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPatchValidateBeforeCall(zoneId, instanceId, shippingZoneMethod4, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsInstanceIdPost
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPostCall(Integer zoneId, Integer instanceId, ShippingZoneMethod3 shippingZoneMethod3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneMethod3;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods/{instance_id}"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "instance_id" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPostValidateBeforeCall(Integer zoneId, Integer instanceId, ShippingZoneMethod3 shippingZoneMethod3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsInstanceIdPost(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling shippingZonesZoneIdMethodsInstanceIdPost(Async)");
        }
        
        // verify the required parameter 'shippingZoneMethod3' is set
        if (shippingZoneMethod3 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneMethod3' when calling shippingZonesZoneIdMethodsInstanceIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPostCall(zoneId, instanceId, shippingZoneMethod3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod3  (required)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsInstanceIdPost(Integer zoneId, Integer instanceId, ShippingZoneMethod3 shippingZoneMethod3) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsInstanceIdPostWithHttpInfo(zoneId, instanceId, shippingZoneMethod3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod3  (required)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsInstanceIdPostWithHttpInfo(Integer zoneId, Integer instanceId, ShippingZoneMethod3 shippingZoneMethod3) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPostValidateBeforeCall(zoneId, instanceId, shippingZoneMethod3, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPostAsync(Integer zoneId, Integer instanceId, ShippingZoneMethod3 shippingZoneMethod3, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPostValidateBeforeCall(zoneId, instanceId, shippingZoneMethod3, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsInstanceIdPut
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPutCall(Integer zoneId, Integer instanceId, ShippingZoneMethod2 shippingZoneMethod2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneMethod2;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods/{instance_id}"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()))
            .replaceAll("\\{" + "instance_id" + "\\}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPutValidateBeforeCall(Integer zoneId, Integer instanceId, ShippingZoneMethod2 shippingZoneMethod2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsInstanceIdPut(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling shippingZonesZoneIdMethodsInstanceIdPut(Async)");
        }
        
        // verify the required parameter 'shippingZoneMethod2' is set
        if (shippingZoneMethod2 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneMethod2' when calling shippingZonesZoneIdMethodsInstanceIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPutCall(zoneId, instanceId, shippingZoneMethod2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod2  (required)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsInstanceIdPut(Integer zoneId, Integer instanceId, ShippingZoneMethod2 shippingZoneMethod2) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsInstanceIdPutWithHttpInfo(zoneId, instanceId, shippingZoneMethod2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod2  (required)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsInstanceIdPutWithHttpInfo(Integer zoneId, Integer instanceId, ShippingZoneMethod2 shippingZoneMethod2) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPutValidateBeforeCall(zoneId, instanceId, shippingZoneMethod2, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param instanceId Unique ID for the instance. (required)
     * @param shippingZoneMethod2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsInstanceIdPutAsync(Integer zoneId, Integer instanceId, ShippingZoneMethod2 shippingZoneMethod2, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsInstanceIdPutValidateBeforeCall(zoneId, instanceId, shippingZoneMethod2, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shippingZonesZoneIdMethodsPost
     * @param zoneId Unique ID for the zone. (required)
     * @param shippingZoneMethod1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsPostCall(Integer zoneId, ShippingZoneMethod1 shippingZoneMethod1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shippingZoneMethod1;

        // create path and map variables
        String localVarPath = "/shipping/zones/{zone_id}/methods"
            .replaceAll("\\{" + "zone_id" + "\\}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shippingZonesZoneIdMethodsPostValidateBeforeCall(Integer zoneId, ShippingZoneMethod1 shippingZoneMethod1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling shippingZonesZoneIdMethodsPost(Async)");
        }
        
        // verify the required parameter 'shippingZoneMethod1' is set
        if (shippingZoneMethod1 == null) {
            throw new ApiException("Missing the required parameter 'shippingZoneMethod1' when calling shippingZonesZoneIdMethodsPost(Async)");
        }
        

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsPostCall(zoneId, shippingZoneMethod1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param shippingZoneMethod1  (required)
     * @return ShippingZoneMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ShippingZoneMethod shippingZonesZoneIdMethodsPost(Integer zoneId, ShippingZoneMethod1 shippingZoneMethod1) throws ApiException {
        ApiResponse<ShippingZoneMethod> localVarResp = shippingZonesZoneIdMethodsPostWithHttpInfo(zoneId, shippingZoneMethod1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param shippingZoneMethod1  (required)
     * @return ApiResponse&lt;ShippingZoneMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingZoneMethod> shippingZonesZoneIdMethodsPostWithHttpInfo(Integer zoneId, ShippingZoneMethod1 shippingZoneMethod1) throws ApiException {
        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsPostValidateBeforeCall(zoneId, shippingZoneMethod1, null);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param zoneId Unique ID for the zone. (required)
     * @param shippingZoneMethod1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shippingZonesZoneIdMethodsPostAsync(Integer zoneId, ShippingZoneMethod1 shippingZoneMethod1, final ApiCallback<ShippingZoneMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = shippingZonesZoneIdMethodsPostValidateBeforeCall(zoneId, shippingZoneMethod1, _callback);
        Type localVarReturnType = new TypeToken<ShippingZoneMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = systemStatusGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return SystemStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatus systemStatusGet(String context) throws ApiException {
        ApiResponse<SystemStatus> localVarResp = systemStatusGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;SystemStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatus> systemStatusGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = systemStatusGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<SystemStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusGetAsync(String context, final ApiCallback<SystemStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<SystemStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusToolsGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system_status/tools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusToolsGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = systemStatusToolsGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;SystemStatusTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<SystemStatusTool> systemStatusToolsGet(String context) throws ApiException {
        ApiResponse<List<SystemStatusTool>> localVarResp = systemStatusToolsGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;SystemStatusTool&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SystemStatusTool>> systemStatusToolsGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = systemStatusToolsGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<SystemStatusTool>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsGetAsync(String context, final ApiCallback<List<SystemStatusTool>> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusToolsGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<SystemStatusTool>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusToolsIdGet
     * @param id Unique identifier for the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system_status/tools/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusToolsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemStatusToolsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = systemStatusToolsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @return SystemStatusTool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatusTool systemStatusToolsIdGet(String id) throws ApiException {
        ApiResponse<SystemStatusTool> localVarResp = systemStatusToolsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @return ApiResponse&lt;SystemStatusTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatusTool> systemStatusToolsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = systemStatusToolsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdGetAsync(String id, final ApiCallback<SystemStatusTool> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusToolsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusToolsIdPatch
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPatchCall(String id, SystemStatusTool3 systemStatusTool3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = systemStatusTool3;

        // create path and map variables
        String localVarPath = "/system_status/tools/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusToolsIdPatchValidateBeforeCall(String id, SystemStatusTool3 systemStatusTool3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemStatusToolsIdPatch(Async)");
        }
        
        // verify the required parameter 'systemStatusTool3' is set
        if (systemStatusTool3 == null) {
            throw new ApiException("Missing the required parameter 'systemStatusTool3' when calling systemStatusToolsIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = systemStatusToolsIdPatchCall(id, systemStatusTool3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool3  (required)
     * @return SystemStatusTool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatusTool systemStatusToolsIdPatch(String id, SystemStatusTool3 systemStatusTool3) throws ApiException {
        ApiResponse<SystemStatusTool> localVarResp = systemStatusToolsIdPatchWithHttpInfo(id, systemStatusTool3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool3  (required)
     * @return ApiResponse&lt;SystemStatusTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatusTool> systemStatusToolsIdPatchWithHttpInfo(String id, SystemStatusTool3 systemStatusTool3) throws ApiException {
        okhttp3.Call localVarCall = systemStatusToolsIdPatchValidateBeforeCall(id, systemStatusTool3, null);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPatchAsync(String id, SystemStatusTool3 systemStatusTool3, final ApiCallback<SystemStatusTool> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusToolsIdPatchValidateBeforeCall(id, systemStatusTool3, _callback);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusToolsIdPost
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPostCall(String id, SystemStatusTool2 systemStatusTool2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = systemStatusTool2;

        // create path and map variables
        String localVarPath = "/system_status/tools/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusToolsIdPostValidateBeforeCall(String id, SystemStatusTool2 systemStatusTool2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemStatusToolsIdPost(Async)");
        }
        
        // verify the required parameter 'systemStatusTool2' is set
        if (systemStatusTool2 == null) {
            throw new ApiException("Missing the required parameter 'systemStatusTool2' when calling systemStatusToolsIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = systemStatusToolsIdPostCall(id, systemStatusTool2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool2  (required)
     * @return SystemStatusTool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatusTool systemStatusToolsIdPost(String id, SystemStatusTool2 systemStatusTool2) throws ApiException {
        ApiResponse<SystemStatusTool> localVarResp = systemStatusToolsIdPostWithHttpInfo(id, systemStatusTool2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool2  (required)
     * @return ApiResponse&lt;SystemStatusTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatusTool> systemStatusToolsIdPostWithHttpInfo(String id, SystemStatusTool2 systemStatusTool2) throws ApiException {
        okhttp3.Call localVarCall = systemStatusToolsIdPostValidateBeforeCall(id, systemStatusTool2, null);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPostAsync(String id, SystemStatusTool2 systemStatusTool2, final ApiCallback<SystemStatusTool> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusToolsIdPostValidateBeforeCall(id, systemStatusTool2, _callback);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemStatusToolsIdPut
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPutCall(String id, SystemStatusTool1 systemStatusTool1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = systemStatusTool1;

        // create path and map variables
        String localVarPath = "/system_status/tools/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemStatusToolsIdPutValidateBeforeCall(String id, SystemStatusTool1 systemStatusTool1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemStatusToolsIdPut(Async)");
        }
        
        // verify the required parameter 'systemStatusTool1' is set
        if (systemStatusTool1 == null) {
            throw new ApiException("Missing the required parameter 'systemStatusTool1' when calling systemStatusToolsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = systemStatusToolsIdPutCall(id, systemStatusTool1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool1  (required)
     * @return SystemStatusTool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatusTool systemStatusToolsIdPut(String id, SystemStatusTool1 systemStatusTool1) throws ApiException {
        ApiResponse<SystemStatusTool> localVarResp = systemStatusToolsIdPutWithHttpInfo(id, systemStatusTool1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool1  (required)
     * @return ApiResponse&lt;SystemStatusTool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatusTool> systemStatusToolsIdPutWithHttpInfo(String id, SystemStatusTool1 systemStatusTool1) throws ApiException {
        okhttp3.Call localVarCall = systemStatusToolsIdPutValidateBeforeCall(id, systemStatusTool1, null);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique identifier for the tool. (required)
     * @param systemStatusTool1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemStatusToolsIdPutAsync(String id, SystemStatusTool1 systemStatusTool1, final ApiCallback<SystemStatusTool> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemStatusToolsIdPutValidateBeforeCall(id, systemStatusTool1, _callback);
        Type localVarReturnType = new TypeToken<SystemStatusTool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesBatchPatch
     * @param batch36  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPatchCall(Batch36 batch36, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch36;

        // create path and map variables
        String localVarPath = "/taxes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesBatchPatchValidateBeforeCall(Batch36 batch36, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch36' is set
        if (batch36 == null) {
            throw new ApiException("Missing the required parameter 'batch36' when calling taxesBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = taxesBatchPatchCall(batch36, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch36  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch taxesBatchPatch(Batch36 batch36) throws ApiException {
        ApiResponse<Batch> localVarResp = taxesBatchPatchWithHttpInfo(batch36);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch36  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> taxesBatchPatchWithHttpInfo(Batch36 batch36) throws ApiException {
        okhttp3.Call localVarCall = taxesBatchPatchValidateBeforeCall(batch36, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch36  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPatchAsync(Batch36 batch36, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesBatchPatchValidateBeforeCall(batch36, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesBatchPost
     * @param batch35  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPostCall(Batch35 batch35, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch35;

        // create path and map variables
        String localVarPath = "/taxes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesBatchPostValidateBeforeCall(Batch35 batch35, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch35' is set
        if (batch35 == null) {
            throw new ApiException("Missing the required parameter 'batch35' when calling taxesBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = taxesBatchPostCall(batch35, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch35  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch taxesBatchPost(Batch35 batch35) throws ApiException {
        ApiResponse<Batch> localVarResp = taxesBatchPostWithHttpInfo(batch35);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch35  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> taxesBatchPostWithHttpInfo(Batch35 batch35) throws ApiException {
        okhttp3.Call localVarCall = taxesBatchPostValidateBeforeCall(batch35, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch35  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPostAsync(Batch35 batch35, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesBatchPostValidateBeforeCall(batch35, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesBatchPut
     * @param batch34  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPutCall(Batch34 batch34, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch34;

        // create path and map variables
        String localVarPath = "/taxes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesBatchPutValidateBeforeCall(Batch34 batch34, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch34' is set
        if (batch34 == null) {
            throw new ApiException("Missing the required parameter 'batch34' when calling taxesBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = taxesBatchPutCall(batch34, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch34  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch taxesBatchPut(Batch34 batch34) throws ApiException {
        ApiResponse<Batch> localVarResp = taxesBatchPutWithHttpInfo(batch34);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch34  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> taxesBatchPutWithHttpInfo(Batch34 batch34) throws ApiException {
        okhttp3.Call localVarCall = taxesBatchPutValidateBeforeCall(batch34, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch34  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesBatchPutAsync(Batch34 batch34, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesBatchPutValidateBeforeCall(batch34, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesClassesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesGetCall(String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesClassesGetValidateBeforeCall(String context, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = taxesClassesGetCall(context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return List&lt;TaxClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<TaxClass> taxesClassesGet(String context) throws ApiException {
        ApiResponse<List<TaxClass>> localVarResp = taxesClassesGetWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;List&lt;TaxClass&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaxClass>> taxesClassesGetWithHttpInfo(String context) throws ApiException {
        okhttp3.Call localVarCall = taxesClassesGetValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<TaxClass>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesGetAsync(String context, final ApiCallback<List<TaxClass>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesClassesGetValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<TaxClass>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesClassesPost
     * @param taxClass1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesPostCall(TaxClass1 taxClass1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taxClass1;

        // create path and map variables
        String localVarPath = "/taxes/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesClassesPostValidateBeforeCall(TaxClass1 taxClass1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taxClass1' is set
        if (taxClass1 == null) {
            throw new ApiException("Missing the required parameter 'taxClass1' when calling taxesClassesPost(Async)");
        }
        

        okhttp3.Call localVarCall = taxesClassesPostCall(taxClass1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param taxClass1  (required)
     * @return TaxClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TaxClass taxesClassesPost(TaxClass1 taxClass1) throws ApiException {
        ApiResponse<TaxClass> localVarResp = taxesClassesPostWithHttpInfo(taxClass1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param taxClass1  (required)
     * @return ApiResponse&lt;TaxClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxClass> taxesClassesPostWithHttpInfo(TaxClass1 taxClass1) throws ApiException {
        okhttp3.Call localVarCall = taxesClassesPostValidateBeforeCall(taxClass1, null);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param taxClass1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesPostAsync(TaxClass1 taxClass1, final ApiCallback<TaxClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesClassesPostValidateBeforeCall(taxClass1, _callback);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesClassesSlugDelete
     * @param slug Unique slug for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesSlugDeleteCall(String slug, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes/classes/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesClassesSlugDeleteValidateBeforeCall(String slug, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling taxesClassesSlugDelete(Async)");
        }
        

        okhttp3.Call localVarCall = taxesClassesSlugDeleteCall(slug, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param slug Unique slug for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return TaxClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TaxClass taxesClassesSlugDelete(String slug, Boolean force) throws ApiException {
        ApiResponse<TaxClass> localVarResp = taxesClassesSlugDeleteWithHttpInfo(slug, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param slug Unique slug for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;TaxClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxClass> taxesClassesSlugDeleteWithHttpInfo(String slug, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = taxesClassesSlugDeleteValidateBeforeCall(slug, force, null);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param slug Unique slug for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesSlugDeleteAsync(String slug, Boolean force, final ApiCallback<TaxClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesClassesSlugDeleteValidateBeforeCall(slug, force, _callback);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesClassesSlugGet
     * @param slug Unique slug for the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesSlugGetCall(String slug, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes/classes/{slug}"
            .replaceAll("\\{" + "slug" + "\\}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesClassesSlugGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling taxesClassesSlugGet(Async)");
        }
        

        okhttp3.Call localVarCall = taxesClassesSlugGetCall(slug, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param slug Unique slug for the resource. (required)
     * @return TaxClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TaxClass taxesClassesSlugGet(String slug) throws ApiException {
        ApiResponse<TaxClass> localVarResp = taxesClassesSlugGetWithHttpInfo(slug);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param slug Unique slug for the resource. (required)
     * @return ApiResponse&lt;TaxClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxClass> taxesClassesSlugGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = taxesClassesSlugGetValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param slug Unique slug for the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesClassesSlugGetAsync(String slug, final ApiCallback<TaxClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesClassesSlugGetValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<TaxClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param propertyClass Sort by tax class. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesGetCall(String context, Integer page, Integer perPage, Integer offset, String order, String orderby, String propertyClass, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (propertyClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("class", propertyClass));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesGetValidateBeforeCall(String context, Integer page, Integer perPage, Integer offset, String order, String orderby, String propertyClass, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = taxesGetCall(context, page, perPage, offset, order, orderby, propertyClass, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param propertyClass Sort by tax class. (optional)
     * @return List&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Tax> taxesGet(String context, Integer page, Integer perPage, Integer offset, String order, String orderby, String propertyClass) throws ApiException {
        ApiResponse<List<Tax>> localVarResp = taxesGetWithHttpInfo(context, page, perPage, offset, order, orderby, propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param propertyClass Sort by tax class. (optional)
     * @return ApiResponse&lt;List&lt;Tax&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tax>> taxesGetWithHttpInfo(String context, Integer page, Integer perPage, Integer offset, String order, String orderby, String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = taxesGetValidateBeforeCall(context, page, perPage, offset, order, orderby, propertyClass, null);
        Type localVarReturnType = new TypeToken<List<Tax>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param propertyClass Sort by tax class. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesGetAsync(String context, Integer page, Integer perPage, Integer offset, String order, String orderby, String propertyClass, final ApiCallback<List<Tax>> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesGetValidateBeforeCall(context, page, perPage, offset, order, orderby, propertyClass, _callback);
        Type localVarReturnType = new TypeToken<List<Tax>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling taxesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = taxesIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = taxesIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdDeleteAsync(Integer id, Boolean force, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taxes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling taxesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = taxesIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesIdGet(Integer id, String context) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = taxesIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdGetAsync(Integer id, String context, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param tax4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPatchCall(Integer id, Tax4 tax4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tax4;

        // create path and map variables
        String localVarPath = "/taxes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesIdPatchValidateBeforeCall(Integer id, Tax4 tax4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling taxesIdPatch(Async)");
        }
        
        // verify the required parameter 'tax4' is set
        if (tax4 == null) {
            throw new ApiException("Missing the required parameter 'tax4' when calling taxesIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = taxesIdPatchCall(id, tax4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax4  (required)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesIdPatch(Integer id, Tax4 tax4) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesIdPatchWithHttpInfo(id, tax4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax4  (required)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesIdPatchWithHttpInfo(Integer id, Tax4 tax4) throws ApiException {
        okhttp3.Call localVarCall = taxesIdPatchValidateBeforeCall(id, tax4, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPatchAsync(Integer id, Tax4 tax4, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesIdPatchValidateBeforeCall(id, tax4, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesIdPost
     * @param id Unique identifier for the resource. (required)
     * @param tax3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPostCall(Integer id, Tax3 tax3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tax3;

        // create path and map variables
        String localVarPath = "/taxes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesIdPostValidateBeforeCall(Integer id, Tax3 tax3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling taxesIdPost(Async)");
        }
        
        // verify the required parameter 'tax3' is set
        if (tax3 == null) {
            throw new ApiException("Missing the required parameter 'tax3' when calling taxesIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = taxesIdPostCall(id, tax3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax3  (required)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesIdPost(Integer id, Tax3 tax3) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesIdPostWithHttpInfo(id, tax3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax3  (required)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesIdPostWithHttpInfo(Integer id, Tax3 tax3) throws ApiException {
        okhttp3.Call localVarCall = taxesIdPostValidateBeforeCall(id, tax3, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPostAsync(Integer id, Tax3 tax3, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesIdPostValidateBeforeCall(id, tax3, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesIdPut
     * @param id Unique identifier for the resource. (required)
     * @param tax2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPutCall(Integer id, Tax2 tax2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tax2;

        // create path and map variables
        String localVarPath = "/taxes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesIdPutValidateBeforeCall(Integer id, Tax2 tax2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling taxesIdPut(Async)");
        }
        
        // verify the required parameter 'tax2' is set
        if (tax2 == null) {
            throw new ApiException("Missing the required parameter 'tax2' when calling taxesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = taxesIdPutCall(id, tax2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax2  (required)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesIdPut(Integer id, Tax2 tax2) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesIdPutWithHttpInfo(id, tax2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax2  (required)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesIdPutWithHttpInfo(Integer id, Tax2 tax2) throws ApiException {
        okhttp3.Call localVarCall = taxesIdPutValidateBeforeCall(id, tax2, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param tax2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesIdPutAsync(Integer id, Tax2 tax2, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesIdPutValidateBeforeCall(id, tax2, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taxesPost
     * @param tax1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesPostCall(Tax1 tax1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tax1;

        // create path and map variables
        String localVarPath = "/taxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taxesPostValidateBeforeCall(Tax1 tax1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tax1' is set
        if (tax1 == null) {
            throw new ApiException("Missing the required parameter 'tax1' when calling taxesPost(Async)");
        }
        

        okhttp3.Call localVarCall = taxesPostCall(tax1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param tax1  (required)
     * @return Tax
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Tax taxesPost(Tax1 tax1) throws ApiException {
        ApiResponse<Tax> localVarResp = taxesPostWithHttpInfo(tax1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tax1  (required)
     * @return ApiResponse&lt;Tax&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tax> taxesPostWithHttpInfo(Tax1 tax1) throws ApiException {
        okhttp3.Call localVarCall = taxesPostValidateBeforeCall(tax1, null);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tax1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taxesPostAsync(Tax1 tax1, final ApiCallback<Tax> _callback) throws ApiException {

        okhttp3.Call localVarCall = taxesPostValidateBeforeCall(tax1, _callback);
        Type localVarReturnType = new TypeToken<Tax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksBatchPatch
     * @param batch39  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPatchCall(Batch39 batch39, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch39;

        // create path and map variables
        String localVarPath = "/webhooks/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksBatchPatchValidateBeforeCall(Batch39 batch39, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch39' is set
        if (batch39 == null) {
            throw new ApiException("Missing the required parameter 'batch39' when calling webhooksBatchPatch(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksBatchPatchCall(batch39, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch39  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch webhooksBatchPatch(Batch39 batch39) throws ApiException {
        ApiResponse<Batch> localVarResp = webhooksBatchPatchWithHttpInfo(batch39);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch39  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> webhooksBatchPatchWithHttpInfo(Batch39 batch39) throws ApiException {
        okhttp3.Call localVarCall = webhooksBatchPatchValidateBeforeCall(batch39, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch39  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPatchAsync(Batch39 batch39, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksBatchPatchValidateBeforeCall(batch39, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksBatchPost
     * @param batch38  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPostCall(Batch38 batch38, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch38;

        // create path and map variables
        String localVarPath = "/webhooks/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksBatchPostValidateBeforeCall(Batch38 batch38, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch38' is set
        if (batch38 == null) {
            throw new ApiException("Missing the required parameter 'batch38' when calling webhooksBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksBatchPostCall(batch38, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch38  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch webhooksBatchPost(Batch38 batch38) throws ApiException {
        ApiResponse<Batch> localVarResp = webhooksBatchPostWithHttpInfo(batch38);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch38  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> webhooksBatchPostWithHttpInfo(Batch38 batch38) throws ApiException {
        okhttp3.Call localVarCall = webhooksBatchPostValidateBeforeCall(batch38, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch38  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPostAsync(Batch38 batch38, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksBatchPostValidateBeforeCall(batch38, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksBatchPut
     * @param batch37  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPutCall(Batch37 batch37, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch37;

        // create path and map variables
        String localVarPath = "/webhooks/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksBatchPutValidateBeforeCall(Batch37 batch37, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batch37' is set
        if (batch37 == null) {
            throw new ApiException("Missing the required parameter 'batch37' when calling webhooksBatchPut(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksBatchPutCall(batch37, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param batch37  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Batch webhooksBatchPut(Batch37 batch37) throws ApiException {
        ApiResponse<Batch> localVarResp = webhooksBatchPutWithHttpInfo(batch37);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batch37  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> webhooksBatchPutWithHttpInfo(Batch37 batch37) throws ApiException {
        okhttp3.Call localVarCall = webhooksBatchPutValidateBeforeCall(batch37, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batch37  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksBatchPutAsync(Batch37 batch37, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksBatchPutValidateBeforeCall(batch37, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksGet
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param status Limit result set to webhooks assigned a specific status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetCall(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksGetValidateBeforeCall(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = webhooksGetCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param status Limit result set to webhooks assigned a specific status. (optional)
     * @return List&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Webhook> webhooksGet(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String status) throws ApiException {
        ApiResponse<List<Webhook>> localVarResp = webhooksGetWithHttpInfo(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param status Limit result set to webhooks assigned a specific status. (optional)
     * @return ApiResponse&lt;List&lt;Webhook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Webhook>> webhooksGetWithHttpInfo(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String status) throws ApiException {
        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, status, null);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional)
     * @param perPage Maximum number of items to be returned in result set. (optional)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param status Limit result set to webhooks assigned a specific status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetAsync(String context, Integer page, Integer perPage, String search, String after, String before, List<Integer> exclude, List<Integer> include, Integer offset, String order, String orderby, String status, final ApiCallback<List<Webhook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, status, _callback);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksIdDelete
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdDeleteCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksIdDeleteValidateBeforeCall(Integer id, Boolean force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhooksIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksIdDeleteCall(id, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksIdDelete(Integer id, Boolean force) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksIdDeleteWithHttpInfo(id, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksIdDeleteWithHttpInfo(Integer id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = webhooksIdDeleteValidateBeforeCall(id, force, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param force Required to be true, as resource does not support trashing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdDeleteAsync(Integer id, Boolean force, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksIdDeleteValidateBeforeCall(id, force, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksIdGet
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdGetCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksIdGetValidateBeforeCall(Integer id, String context, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhooksIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksIdGetCall(id, context, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksIdGet(Integer id, String context) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksIdGetWithHttpInfo(id, context);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksIdGetWithHttpInfo(Integer id, String context) throws ApiException {
        okhttp3.Call localVarCall = webhooksIdGetValidateBeforeCall(id, context, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdGetAsync(Integer id, String context, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksIdGetValidateBeforeCall(id, context, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksIdPatch
     * @param id Unique identifier for the resource. (required)
     * @param webhook4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPatchCall(Integer id, Webhook4 webhook4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook4;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksIdPatchValidateBeforeCall(Integer id, Webhook4 webhook4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhooksIdPatch(Async)");
        }
        
        // verify the required parameter 'webhook4' is set
        if (webhook4 == null) {
            throw new ApiException("Missing the required parameter 'webhook4' when calling webhooksIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksIdPatchCall(id, webhook4, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook4  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksIdPatch(Integer id, Webhook4 webhook4) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksIdPatchWithHttpInfo(id, webhook4);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook4  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksIdPatchWithHttpInfo(Integer id, Webhook4 webhook4) throws ApiException {
        okhttp3.Call localVarCall = webhooksIdPatchValidateBeforeCall(id, webhook4, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPatchAsync(Integer id, Webhook4 webhook4, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksIdPatchValidateBeforeCall(id, webhook4, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksIdPost
     * @param id Unique identifier for the resource. (required)
     * @param webhook3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPostCall(Integer id, Webhook3 webhook3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook3;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksIdPostValidateBeforeCall(Integer id, Webhook3 webhook3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhooksIdPost(Async)");
        }
        
        // verify the required parameter 'webhook3' is set
        if (webhook3 == null) {
            throw new ApiException("Missing the required parameter 'webhook3' when calling webhooksIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksIdPostCall(id, webhook3, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook3  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksIdPost(Integer id, Webhook3 webhook3) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksIdPostWithHttpInfo(id, webhook3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook3  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksIdPostWithHttpInfo(Integer id, Webhook3 webhook3) throws ApiException {
        okhttp3.Call localVarCall = webhooksIdPostValidateBeforeCall(id, webhook3, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPostAsync(Integer id, Webhook3 webhook3, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksIdPostValidateBeforeCall(id, webhook3, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksIdPut
     * @param id Unique identifier for the resource. (required)
     * @param webhook2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPutCall(Integer id, Webhook2 webhook2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook2;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksIdPutValidateBeforeCall(Integer id, Webhook2 webhook2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhooksIdPut(Async)");
        }
        
        // verify the required parameter 'webhook2' is set
        if (webhook2 == null) {
            throw new ApiException("Missing the required parameter 'webhook2' when calling webhooksIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksIdPutCall(id, webhook2, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook2  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksIdPut(Integer id, Webhook2 webhook2) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksIdPutWithHttpInfo(id, webhook2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook2  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksIdPutWithHttpInfo(Integer id, Webhook2 webhook2) throws ApiException {
        okhttp3.Call localVarCall = webhooksIdPutValidateBeforeCall(id, webhook2, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Unique identifier for the resource. (required)
     * @param webhook2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksIdPutAsync(Integer id, Webhook2 webhook2, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksIdPutValidateBeforeCall(id, webhook2, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksPost
     * @param webhook1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksPostCall(Webhook1 webhook1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = webhook1;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksPostValidateBeforeCall(Webhook1 webhook1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'webhook1' is set
        if (webhook1 == null) {
            throw new ApiException("Missing the required parameter 'webhook1' when calling webhooksPost(Async)");
        }
        

        okhttp3.Call localVarCall = webhooksPostCall(webhook1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param webhook1  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Webhook webhooksPost(Webhook1 webhook1) throws ApiException {
        ApiResponse<Webhook> localVarResp = webhooksPostWithHttpInfo(webhook1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param webhook1  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> webhooksPostWithHttpInfo(Webhook1 webhook1) throws ApiException {
        okhttp3.Call localVarCall = webhooksPostValidateBeforeCall(webhook1, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param webhook1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksPostAsync(Webhook1 webhook1, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksPostValidateBeforeCall(webhook1, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
