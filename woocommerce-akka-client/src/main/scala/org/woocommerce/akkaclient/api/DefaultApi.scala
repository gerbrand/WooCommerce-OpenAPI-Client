/**
 * wc/v3
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.woocommerce.akkaclient.api

import org.woocommerce.akkaclient.model.Batch
import org.woocommerce.akkaclient.model.Batch1
import org.woocommerce.akkaclient.model.Batch10
import org.woocommerce.akkaclient.model.Batch11
import org.woocommerce.akkaclient.model.Batch12
import org.woocommerce.akkaclient.model.Batch13
import org.woocommerce.akkaclient.model.Batch14
import org.woocommerce.akkaclient.model.Batch15
import org.woocommerce.akkaclient.model.Batch16
import org.woocommerce.akkaclient.model.Batch17
import org.woocommerce.akkaclient.model.Batch18
import org.woocommerce.akkaclient.model.Batch19
import org.woocommerce.akkaclient.model.Batch2
import org.woocommerce.akkaclient.model.Batch20
import org.woocommerce.akkaclient.model.Batch21
import org.woocommerce.akkaclient.model.Batch22
import org.woocommerce.akkaclient.model.Batch23
import org.woocommerce.akkaclient.model.Batch24
import org.woocommerce.akkaclient.model.Batch25
import org.woocommerce.akkaclient.model.Batch26
import org.woocommerce.akkaclient.model.Batch27
import org.woocommerce.akkaclient.model.Batch28
import org.woocommerce.akkaclient.model.Batch29
import org.woocommerce.akkaclient.model.Batch3
import org.woocommerce.akkaclient.model.Batch30
import org.woocommerce.akkaclient.model.Batch31
import org.woocommerce.akkaclient.model.Batch32
import org.woocommerce.akkaclient.model.Batch33
import org.woocommerce.akkaclient.model.Batch34
import org.woocommerce.akkaclient.model.Batch35
import org.woocommerce.akkaclient.model.Batch36
import org.woocommerce.akkaclient.model.Batch37
import org.woocommerce.akkaclient.model.Batch38
import org.woocommerce.akkaclient.model.Batch39
import org.woocommerce.akkaclient.model.Batch4
import org.woocommerce.akkaclient.model.Batch5
import org.woocommerce.akkaclient.model.Batch6
import org.woocommerce.akkaclient.model.Batch7
import org.woocommerce.akkaclient.model.Batch8
import org.woocommerce.akkaclient.model.Batch9
import org.woocommerce.akkaclient.model.Customer
import org.woocommerce.akkaclient.model.Customer1
import org.woocommerce.akkaclient.model.Customer2
import org.woocommerce.akkaclient.model.Customer3
import org.woocommerce.akkaclient.model.Customer4
import org.woocommerce.akkaclient.model.CustomerDownload
import org.woocommerce.akkaclient.model.DataContinents
import org.woocommerce.akkaclient.model.DataCountries
import org.woocommerce.akkaclient.model.DataCurrencies
import org.woocommerce.akkaclient.model.DataIndex
import java.time.LocalDate
import org.woocommerce.akkaclient.model.OrderNote
import org.woocommerce.akkaclient.model.OrderNote1
import org.woocommerce.akkaclient.model.PaymentGateway
import org.woocommerce.akkaclient.model.PaymentGateway1
import org.woocommerce.akkaclient.model.PaymentGateway2
import org.woocommerce.akkaclient.model.PaymentGateway3
import org.woocommerce.akkaclient.model.Product
import org.woocommerce.akkaclient.model.Product1
import org.woocommerce.akkaclient.model.Product2
import org.woocommerce.akkaclient.model.Product3
import org.woocommerce.akkaclient.model.Product4
import org.woocommerce.akkaclient.model.ProductAttribute
import org.woocommerce.akkaclient.model.ProductAttribute1
import org.woocommerce.akkaclient.model.ProductAttribute2
import org.woocommerce.akkaclient.model.ProductAttribute3
import org.woocommerce.akkaclient.model.ProductAttribute4
import org.woocommerce.akkaclient.model.ProductAttributeTerm
import org.woocommerce.akkaclient.model.ProductAttributeTerm1
import org.woocommerce.akkaclient.model.ProductAttributeTerm2
import org.woocommerce.akkaclient.model.ProductAttributeTerm3
import org.woocommerce.akkaclient.model.ProductAttributeTerm4
import org.woocommerce.akkaclient.model.ProductCat
import org.woocommerce.akkaclient.model.ProductCat1
import org.woocommerce.akkaclient.model.ProductCat2
import org.woocommerce.akkaclient.model.ProductCat3
import org.woocommerce.akkaclient.model.ProductCat4
import org.woocommerce.akkaclient.model.ProductReview
import org.woocommerce.akkaclient.model.ProductReview1
import org.woocommerce.akkaclient.model.ProductReview2
import org.woocommerce.akkaclient.model.ProductReview3
import org.woocommerce.akkaclient.model.ProductReview4
import org.woocommerce.akkaclient.model.ProductShippingClass
import org.woocommerce.akkaclient.model.ProductShippingClass1
import org.woocommerce.akkaclient.model.ProductShippingClass2
import org.woocommerce.akkaclient.model.ProductShippingClass3
import org.woocommerce.akkaclient.model.ProductShippingClass4
import org.woocommerce.akkaclient.model.ProductTag
import org.woocommerce.akkaclient.model.ProductTag1
import org.woocommerce.akkaclient.model.ProductTag2
import org.woocommerce.akkaclient.model.ProductTag3
import org.woocommerce.akkaclient.model.ProductTag4
import org.woocommerce.akkaclient.model.ProductVariation
import org.woocommerce.akkaclient.model.ProductVariation1
import org.woocommerce.akkaclient.model.ProductVariation2
import org.woocommerce.akkaclient.model.ProductVariation3
import org.woocommerce.akkaclient.model.ProductVariation4
import org.woocommerce.akkaclient.model.Report
import org.woocommerce.akkaclient.model.ReportCouponTotal
import org.woocommerce.akkaclient.model.ReportCustomerTotal
import org.woocommerce.akkaclient.model.ReportOrderTotal
import org.woocommerce.akkaclient.model.ReportProductTotal
import org.woocommerce.akkaclient.model.ReportReviewTotal
import org.woocommerce.akkaclient.model.SalesReport
import org.woocommerce.akkaclient.model.ShippingMethod
import org.woocommerce.akkaclient.model.ShippingZone
import org.woocommerce.akkaclient.model.ShippingZone1
import org.woocommerce.akkaclient.model.ShippingZone2
import org.woocommerce.akkaclient.model.ShippingZone3
import org.woocommerce.akkaclient.model.ShippingZone4
import org.woocommerce.akkaclient.model.ShippingZoneLocation
import org.woocommerce.akkaclient.model.ShippingZoneLocation1
import org.woocommerce.akkaclient.model.ShippingZoneLocation2
import org.woocommerce.akkaclient.model.ShippingZoneLocation3
import org.woocommerce.akkaclient.model.ShippingZoneMethod
import org.woocommerce.akkaclient.model.ShippingZoneMethod1
import org.woocommerce.akkaclient.model.ShippingZoneMethod2
import org.woocommerce.akkaclient.model.ShippingZoneMethod3
import org.woocommerce.akkaclient.model.ShippingZoneMethod4
import org.woocommerce.akkaclient.model.ShopCoupon
import org.woocommerce.akkaclient.model.ShopCoupon1
import org.woocommerce.akkaclient.model.ShopCoupon2
import org.woocommerce.akkaclient.model.ShopCoupon3
import org.woocommerce.akkaclient.model.ShopCoupon4
import org.woocommerce.akkaclient.model.ShopOrder
import org.woocommerce.akkaclient.model.ShopOrder1
import org.woocommerce.akkaclient.model.ShopOrder2
import org.woocommerce.akkaclient.model.ShopOrder3
import org.woocommerce.akkaclient.model.ShopOrder4
import org.woocommerce.akkaclient.model.ShopOrderRefund
import org.woocommerce.akkaclient.model.ShopOrderRefund1
import org.woocommerce.akkaclient.model.SystemStatus
import org.woocommerce.akkaclient.model.SystemStatusTool
import org.woocommerce.akkaclient.model.SystemStatusTool1
import org.woocommerce.akkaclient.model.SystemStatusTool2
import org.woocommerce.akkaclient.model.SystemStatusTool3
import org.woocommerce.akkaclient.model.Tax
import org.woocommerce.akkaclient.model.Tax1
import org.woocommerce.akkaclient.model.Tax2
import org.woocommerce.akkaclient.model.Tax3
import org.woocommerce.akkaclient.model.Tax4
import org.woocommerce.akkaclient.model.TaxClass
import org.woocommerce.akkaclient.model.TaxClass1
import org.woocommerce.akkaclient.model.TopSellersReport
import org.woocommerce.akkaclient.model.Webhook
import org.woocommerce.akkaclient.model.Webhook1
import org.woocommerce.akkaclient.model.Webhook2
import org.woocommerce.akkaclient.model.Webhook3
import org.woocommerce.akkaclient.model.Webhook4
import org.woocommerce.akkaclient.core._
import org.woocommerce.akkaclient.core.CollectionFormats._
import org.woocommerce.akkaclient.core.ApiKeyLocations._

object DefaultApi {

  def apply(baseUrl: String = "https://www.software-creation.nl/wp-json/wc/v3") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch3 
   */
  def couponsBatchPatch(batch3: Batch3)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/coupons/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch3)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch2 
   */
  def couponsBatchPost(batch2: Batch2)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/coupons/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch2)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch1 
   */
  def couponsBatchPut(batch1: Batch1)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/coupons/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch1)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date.
   * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date.
   * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param code Limit result set to resources with a specific code.
   */
  def couponsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, modifiedAfter: Option[String] = None, modifiedBefore: Option[String] = None, datesAreGmt: Option[Boolean] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, code: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.GET, baseUrl, "/coupons", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("modified_after", modifiedAfter)
      .withQueryParam("modified_before", modifiedBefore)
      .withQueryParam("dates_are_gmt", datesAreGmt)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("code", code)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Whether to bypass trash and force deletion.
   */
  def couponsIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.DELETE, baseUrl, "/coupons/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def couponsIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.GET, baseUrl, "/coupons/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopCoupon4 
   */
  def couponsIdPatch(id: Int, shopCoupon4: ShopCoupon4)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.PATCH, baseUrl, "/coupons/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopCoupon4)
      .withPathParam("id", id)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopCoupon3 
   */
  def couponsIdPost(id: Int, shopCoupon3: ShopCoupon3)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.POST, baseUrl, "/coupons/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopCoupon3)
      .withPathParam("id", id)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopCoupon2 
   */
  def couponsIdPut(id: Int, shopCoupon2: ShopCoupon2)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.PUT, baseUrl, "/coupons/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopCoupon2)
      .withPathParam("id", id)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param shopCoupon1 
   */
  def couponsPost(shopCoupon1: ShopCoupon1)(implicit basicAuth: BasicCredentials): ApiRequest[ShopCoupon] =
    ApiRequest[ShopCoupon](ApiMethods.POST, baseUrl, "/coupons", "application/json")
      .withCredentials(basicAuth).withBody(shopCoupon1)
      .withSuccessResponse[ShopCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch6 
   */
  def customersBatchPatch(batch6: Batch6)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/customers/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch6)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch5 
   */
  def customersBatchPost(batch5: Batch5)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/customers/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch5)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch4 
   */
  def customersBatchPut(batch4: Batch4)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/customers/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch4)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CustomerDownload (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param customerId Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def customersCustomerIdDownloadsGet(customerId: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[CustomerDownload] =
    ApiRequest[CustomerDownload](ApiMethods.GET, baseUrl, "/customers/{customer_id}/downloads", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("customer_id", customerId)
      .withSuccessResponse[CustomerDownload](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific IDs.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param email Limit result set to resources with a specific email.
   * @param role Limit result set to resources with a specific role.
   */
  def customersGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, email: Option[String] = None, role: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.GET, baseUrl, "/customers", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("email", email)
      .withQueryParam("role", role)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   * @param reassign ID to reassign posts to.
   */
  def customersIdDelete(id: Int, force: Option[Boolean] = None, reassign: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.DELETE, baseUrl, "/customers/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withQueryParam("reassign", reassign)
      .withPathParam("id", id)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def customersIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.GET, baseUrl, "/customers/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param customer4 
   */
  def customersIdPatch(id: Int, customer4: Customer4)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.PATCH, baseUrl, "/customers/{id}", "application/json")
      .withCredentials(basicAuth).withBody(customer4)
      .withPathParam("id", id)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param customer3 
   */
  def customersIdPost(id: Int, customer3: Customer3)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.POST, baseUrl, "/customers/{id}", "application/json")
      .withCredentials(basicAuth).withBody(customer3)
      .withPathParam("id", id)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param customer2 
   */
  def customersIdPut(id: Int, customer2: Customer2)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.PUT, baseUrl, "/customers/{id}", "application/json")
      .withCredentials(basicAuth).withBody(customer2)
      .withPathParam("id", id)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Customer (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param customer1 
   */
  def customersPost(customer1: Customer1)(implicit basicAuth: BasicCredentials): ApiRequest[Customer] =
    ApiRequest[Customer](ApiMethods.POST, baseUrl, "/customers", "application/json")
      .withCredentials(basicAuth).withBody(customer1)
      .withSuccessResponse[Customer](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataContinents (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def dataContinentsGet()(implicit basicAuth: BasicCredentials): ApiRequest[DataContinents] =
    ApiRequest[DataContinents](ApiMethods.GET, baseUrl, "/data/continents", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[DataContinents](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataContinents (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param location 2 character continent code.
   */
  def dataContinentsLocationGet(location: String)(implicit basicAuth: BasicCredentials): ApiRequest[DataContinents] =
    ApiRequest[DataContinents](ApiMethods.GET, baseUrl, "/data/continents/{location}", "application/json")
      .withCredentials(basicAuth).withPathParam("location", location)
      .withSuccessResponse[DataContinents](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataCountries (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def dataCountriesGet()(implicit basicAuth: BasicCredentials): ApiRequest[DataCountries] =
    ApiRequest[DataCountries](ApiMethods.GET, baseUrl, "/data/countries", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[DataCountries](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataCountries (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param location ISO3166 alpha-2 country code.
   */
  def dataCountriesLocationGet(location: String)(implicit basicAuth: BasicCredentials): ApiRequest[DataCountries] =
    ApiRequest[DataCountries](ApiMethods.GET, baseUrl, "/data/countries/{location}", "application/json")
      .withCredentials(basicAuth).withPathParam("location", location)
      .withSuccessResponse[DataCountries](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataCurrencies (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param currency ISO4217 currency code.
   */
  def dataCurrenciesCurrencyGet(currency: String)(implicit basicAuth: BasicCredentials): ApiRequest[DataCurrencies] =
    ApiRequest[DataCurrencies](ApiMethods.GET, baseUrl, "/data/currencies/{currency}", "application/json")
      .withCredentials(basicAuth).withPathParam("currency", currency)
      .withSuccessResponse[DataCurrencies](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataCurrencies (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def dataCurrenciesCurrentGet()(implicit basicAuth: BasicCredentials): ApiRequest[DataCurrencies] =
    ApiRequest[DataCurrencies](ApiMethods.GET, baseUrl, "/data/currencies/current", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[DataCurrencies](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataCurrencies (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def dataCurrenciesGet()(implicit basicAuth: BasicCredentials): ApiRequest[DataCurrencies] =
    ApiRequest[DataCurrencies](ApiMethods.GET, baseUrl, "/data/currencies", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[DataCurrencies](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : DataIndex (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def dataGet()(implicit basicAuth: BasicCredentials): ApiRequest[DataIndex] =
    ApiRequest[DataIndex](ApiMethods.GET, baseUrl, "/data", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[DataIndex](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch9 
   */
  def ordersBatchPatch(batch9: Batch9)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/orders/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch9)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch8 
   */
  def ordersBatchPost(batch8: Batch8)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/orders/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch8)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch7 
   */
  def ordersBatchPut(batch7: Batch7)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/orders/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch7)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date.
   * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date.
   * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param status Limit result set to orders which have specific statuses.
   * @param customer Limit result set to orders assigned a specific customer.
   * @param product Limit result set to orders assigned a specific product.
   * @param dp Number of decimal points to use in each resource.
   */
  def ordersGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, modifiedAfter: Option[String] = None, modifiedBefore: Option[String] = None, datesAreGmt: Option[Boolean] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], status: Seq[String], customer: Option[Int] = None, product: Option[Int] = None, dp: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.GET, baseUrl, "/orders", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("modified_after", modifiedAfter)
      .withQueryParam("modified_before", modifiedBefore)
      .withQueryParam("dates_are_gmt", datesAreGmt)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("status", ArrayValues(status, MULTI))
      .withQueryParam("customer", customer)
      .withQueryParam("product", product)
      .withQueryParam("dp", dp)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Whether to bypass trash and force deletion.
   */
  def ordersIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.DELETE, baseUrl, "/orders/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def ordersIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.GET, baseUrl, "/orders/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopOrder4 
   */
  def ordersIdPatch(id: Int, shopOrder4: ShopOrder4)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.PATCH, baseUrl, "/orders/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopOrder4)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopOrder3 
   */
  def ordersIdPost(id: Int, shopOrder3: ShopOrder3)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.POST, baseUrl, "/orders/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopOrder3)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param shopOrder2 
   */
  def ordersIdPut(id: Int, shopOrder2: ShopOrder2)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.PUT, baseUrl, "/orders/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shopOrder2)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : OrderNote (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param `type` Limit result to customers or internal notes.
   */
  def ordersOrderIdNotesGet(orderId: Int, context: Option[String] = None, `type`: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[OrderNote] =
    ApiRequest[OrderNote](ApiMethods.GET, baseUrl, "/orders/{order_id}/notes", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("type", `type`)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[OrderNote](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : OrderNote (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param orderId The order ID.
   * @param force Required to be true, as resource does not support trashing.
   */
  def ordersOrderIdNotesIdDelete(id: Int, orderId: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[OrderNote] =
    ApiRequest[OrderNote](ApiMethods.DELETE, baseUrl, "/orders/{order_id}/notes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[OrderNote](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : OrderNote (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param orderId The order ID.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def ordersOrderIdNotesIdGet(id: Int, orderId: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[OrderNote] =
    ApiRequest[OrderNote](ApiMethods.GET, baseUrl, "/orders/{order_id}/notes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[OrderNote](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : OrderNote (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param orderNote1 
   */
  def ordersOrderIdNotesPost(orderId: Int, orderNote1: OrderNote1)(implicit basicAuth: BasicCredentials): ApiRequest[OrderNote] =
    ApiRequest[OrderNote](ApiMethods.POST, baseUrl, "/orders/{order_id}/notes", "application/json")
      .withCredentials(basicAuth).withBody(orderNote1)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[OrderNote](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrderRefund (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date.
   * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date.
   * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param dp Number of decimal points to use in each resource.
   */
  def ordersOrderIdRefundsGet(orderId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, modifiedAfter: Option[String] = None, modifiedBefore: Option[String] = None, datesAreGmt: Option[Boolean] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], dp: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrderRefund] =
    ApiRequest[ShopOrderRefund](ApiMethods.GET, baseUrl, "/orders/{order_id}/refunds", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("modified_after", modifiedAfter)
      .withQueryParam("modified_before", modifiedBefore)
      .withQueryParam("dates_are_gmt", datesAreGmt)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("dp", dp)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[ShopOrderRefund](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrderRefund (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def ordersOrderIdRefundsIdDelete(orderId: Int, id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrderRefund] =
    ApiRequest[ShopOrderRefund](ApiMethods.DELETE, baseUrl, "/orders/{order_id}/refunds/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("order_id", orderId)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrderRefund](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrderRefund (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def ordersOrderIdRefundsIdGet(orderId: Int, id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrderRefund] =
    ApiRequest[ShopOrderRefund](ApiMethods.GET, baseUrl, "/orders/{order_id}/refunds/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("order_id", orderId)
      .withPathParam("id", id)
      .withSuccessResponse[ShopOrderRefund](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrderRefund (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param orderId The order ID.
   * @param shopOrderRefund1 
   */
  def ordersOrderIdRefundsPost(orderId: Int, shopOrderRefund1: ShopOrderRefund1)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrderRefund] =
    ApiRequest[ShopOrderRefund](ApiMethods.POST, baseUrl, "/orders/{order_id}/refunds", "application/json")
      .withCredentials(basicAuth).withBody(shopOrderRefund1)
      .withPathParam("order_id", orderId)
      .withSuccessResponse[ShopOrderRefund](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShopOrder (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param shopOrder1 
   */
  def ordersPost(shopOrder1: ShopOrder1)(implicit basicAuth: BasicCredentials): ApiRequest[ShopOrder] =
    ApiRequest[ShopOrder](ApiMethods.POST, baseUrl, "/orders", "application/json")
      .withCredentials(basicAuth).withBody(shopOrder1)
      .withSuccessResponse[ShopOrder](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PaymentGateway (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def paymentGatewaysGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[PaymentGateway] =
    ApiRequest[PaymentGateway](ApiMethods.GET, baseUrl, "/payment_gateways", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[PaymentGateway](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PaymentGateway (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def paymentGatewaysIdGet(id: String, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[PaymentGateway] =
    ApiRequest[PaymentGateway](ApiMethods.GET, baseUrl, "/payment_gateways/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[PaymentGateway](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PaymentGateway (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param paymentGateway3 
   */
  def paymentGatewaysIdPatch(id: String, paymentGateway3: PaymentGateway3)(implicit basicAuth: BasicCredentials): ApiRequest[PaymentGateway] =
    ApiRequest[PaymentGateway](ApiMethods.PATCH, baseUrl, "/payment_gateways/{id}", "application/json")
      .withCredentials(basicAuth).withBody(paymentGateway3)
      .withPathParam("id", id)
      .withSuccessResponse[PaymentGateway](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PaymentGateway (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param paymentGateway2 
   */
  def paymentGatewaysIdPost(id: String, paymentGateway2: PaymentGateway2)(implicit basicAuth: BasicCredentials): ApiRequest[PaymentGateway] =
    ApiRequest[PaymentGateway](ApiMethods.POST, baseUrl, "/payment_gateways/{id}", "application/json")
      .withCredentials(basicAuth).withBody(paymentGateway2)
      .withPathParam("id", id)
      .withSuccessResponse[PaymentGateway](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PaymentGateway (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param paymentGateway1 
   */
  def paymentGatewaysIdPut(id: String, paymentGateway1: PaymentGateway1)(implicit basicAuth: BasicCredentials): ApiRequest[PaymentGateway] =
    ApiRequest[PaymentGateway](ApiMethods.PUT, baseUrl, "/payment_gateways/{id}", "application/json")
      .withCredentials(basicAuth).withBody(paymentGateway1)
      .withPathParam("id", id)
      .withSuccessResponse[PaymentGateway](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param batch12 
   */
  def productsAttributesAttributeIdTermsBatchPatch(attributeId: Int, batch12: Batch12)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/attributes/{attribute_id}/terms/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch12)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param batch11 
   */
  def productsAttributesAttributeIdTermsBatchPost(attributeId: Int, batch11: Batch11)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/attributes/{attribute_id}/terms/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch11)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param batch10 
   */
  def productsAttributesAttributeIdTermsBatchPut(attributeId: Int, batch10: Batch10)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/attributes/{attribute_id}/terms/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch10)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by resource attribute.
   * @param hideEmpty Whether to hide resources not assigned to any products.
   * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only.
   * @param product Limit result set to resources assigned to a specific product.
   * @param slug Limit result set to resources with a specific slug.
   */
  def productsAttributesAttributeIdTermsGet(attributeId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None, parent: Option[Int] = None, product: Option[Int] = None, slug: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.GET, baseUrl, "/products/attributes/{attribute_id}/terms", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withQueryParam("parent", parent)
      .withQueryParam("product", product)
      .withQueryParam("slug", slug)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param force Required to be true, as resource does not support trashing.
   */
  def productsAttributesAttributeIdTermsIdDelete(id: Int, attributeId: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.DELETE, baseUrl, "/products/attributes/{attribute_id}/terms/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesAttributeIdTermsIdGet(id: Int, attributeId: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.GET, baseUrl, "/products/attributes/{attribute_id}/terms/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param productAttributeTerm4 
   */
  def productsAttributesAttributeIdTermsIdPatch(id: Int, attributeId: Int, productAttributeTerm4: ProductAttributeTerm4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.PATCH, baseUrl, "/products/attributes/{attribute_id}/terms/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttributeTerm4)
      .withPathParam("id", id)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param productAttributeTerm3 
   */
  def productsAttributesAttributeIdTermsIdPost(id: Int, attributeId: Int, productAttributeTerm3: ProductAttributeTerm3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.POST, baseUrl, "/products/attributes/{attribute_id}/terms/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttributeTerm3)
      .withPathParam("id", id)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param productAttributeTerm2 
   */
  def productsAttributesAttributeIdTermsIdPut(id: Int, attributeId: Int, productAttributeTerm2: ProductAttributeTerm2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.PUT, baseUrl, "/products/attributes/{attribute_id}/terms/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttributeTerm2)
      .withPathParam("id", id)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttributeTerm (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param attributeId Unique identifier for the attribute of the terms.
   * @param productAttributeTerm1 
   */
  def productsAttributesAttributeIdTermsPost(attributeId: Int, productAttributeTerm1: ProductAttributeTerm1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttributeTerm] =
    ApiRequest[ProductAttributeTerm](ApiMethods.POST, baseUrl, "/products/attributes/{attribute_id}/terms", "application/json")
      .withCredentials(basicAuth).withBody(productAttributeTerm1)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[ProductAttributeTerm](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch15 
   */
  def productsAttributesBatchPatch(batch15: Batch15)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/attributes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch15)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch14 
   */
  def productsAttributesBatchPost(batch14: Batch14)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/attributes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch14)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch13 
   */
  def productsAttributesBatchPut(batch13: Batch13)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/attributes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch13)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.GET, baseUrl, "/products/attributes", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def productsAttributesIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.DELETE, baseUrl, "/products/attributes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.GET, baseUrl, "/products/attributes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productAttribute4 
   */
  def productsAttributesIdPatch(id: Int, productAttribute4: ProductAttribute4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.PATCH, baseUrl, "/products/attributes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttribute4)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productAttribute3 
   */
  def productsAttributesIdPost(id: Int, productAttribute3: ProductAttribute3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.POST, baseUrl, "/products/attributes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttribute3)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productAttribute2 
   */
  def productsAttributesIdPut(id: Int, productAttribute2: ProductAttribute2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.PUT, baseUrl, "/products/attributes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productAttribute2)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productAttribute1 
   */
  def productsAttributesPost(productAttribute1: ProductAttribute1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.POST, baseUrl, "/products/attributes", "application/json")
      .withCredentials(basicAuth).withBody(productAttribute1)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch30 
   */
  def productsBatchPatch(batch30: Batch30)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch30)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch29 
   */
  def productsBatchPost(batch29: Batch29)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch29)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch28 
   */
  def productsBatchPut(batch28: Batch28)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch28)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch18 
   */
  def productsCategoriesBatchPatch(batch18: Batch18)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/categories/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch18)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch17 
   */
  def productsCategoriesBatchPost(batch17: Batch17)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/categories/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch17)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch16 
   */
  def productsCategoriesBatchPut(batch16: Batch16)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/categories/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch16)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by resource attribute.
   * @param hideEmpty Whether to hide resources not assigned to any products.
   * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only.
   * @param product Limit result set to resources assigned to a specific product.
   * @param slug Limit result set to resources with a specific slug.
   */
  def productsCategoriesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None, parent: Option[Int] = None, product: Option[Int] = None, slug: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.GET, baseUrl, "/products/categories", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withQueryParam("parent", parent)
      .withQueryParam("product", product)
      .withQueryParam("slug", slug)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def productsCategoriesIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.DELETE, baseUrl, "/products/categories/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsCategoriesIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.GET, baseUrl, "/products/categories/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productCat4 
   */
  def productsCategoriesIdPatch(id: Int, productCat4: ProductCat4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.PATCH, baseUrl, "/products/categories/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productCat4)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productCat3 
   */
  def productsCategoriesIdPost(id: Int, productCat3: ProductCat3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.POST, baseUrl, "/products/categories/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productCat3)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productCat2 
   */
  def productsCategoriesIdPut(id: Int, productCat2: ProductCat2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.PUT, baseUrl, "/products/categories/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productCat2)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCat (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productCat1 
   */
  def productsCategoriesPost(productCat1: ProductCat1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductCat] =
    ApiRequest[ProductCat](ApiMethods.POST, baseUrl, "/products/categories", "application/json")
      .withCredentials(basicAuth).withBody(productCat1)
      .withSuccessResponse[ProductCat](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date.
   * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date.
   * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param slug Limit result set to products with a specific slug.
   * @param status Limit result set to products assigned a specific status.
   * @param `type` Limit result set to products assigned a specific type.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param featured Limit result set to featured products.
   * @param category Limit result set to products assigned a specific category ID.
   * @param tag Limit result set to products assigned a specific tag ID.
   * @param shippingClass Limit result set to products assigned a specific shipping class ID.
   * @param attribute Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
   * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute).
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price.
   * @param maxPrice Limit result set to products based on a maximum price.
   * @param stockStatus Limit result set to products with specified stock status.
   */
  def productsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, modifiedAfter: Option[String] = None, modifiedBefore: Option[String] = None, datesAreGmt: Option[Boolean] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], slug: Option[String] = None, status: Option[String] = None, `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, tag: Option[String] = None, shippingClass: Option[String] = None, attribute: Option[String] = None, attributeTerm: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.GET, baseUrl, "/products", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("modified_after", modifiedAfter)
      .withQueryParam("modified_before", modifiedBefore)
      .withQueryParam("dates_are_gmt", datesAreGmt)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("slug", slug)
      .withQueryParam("status", status)
      .withQueryParam("type", `type`)
      .withQueryParam("sku", sku)
      .withQueryParam("featured", featured)
      .withQueryParam("category", category)
      .withQueryParam("tag", tag)
      .withQueryParam("shipping_class", shippingClass)
      .withQueryParam("attribute", attribute)
      .withQueryParam("attribute_term", attributeTerm)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", stockStatus)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Whether to bypass trash and force deletion.
   */
  def productsIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.DELETE, baseUrl, "/products/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.GET, baseUrl, "/products/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param product4 
   */
  def productsIdPatch(id: Int, product4: Product4)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.PATCH, baseUrl, "/products/{id}", "application/json")
      .withCredentials(basicAuth).withBody(product4)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param product3 
   */
  def productsIdPost(id: Int, product3: Product3)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.POST, baseUrl, "/products/{id}", "application/json")
      .withCredentials(basicAuth).withBody(product3)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param product2 
   */
  def productsIdPut(id: Int, product2: Product2)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.PUT, baseUrl, "/products/{id}", "application/json")
      .withCredentials(basicAuth).withBody(product2)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product1 
   */
  def productsPost(product1: Product1)(implicit basicAuth: BasicCredentials): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.POST, baseUrl, "/products", "application/json")
      .withCredentials(basicAuth).withBody(product1)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param batch33 
   */
  def productsProductIdVariationsBatchPatch(productId: Int, batch33: Batch33)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/{product_id}/variations/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch33)
      .withPathParam("product_id", productId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param batch32 
   */
  def productsProductIdVariationsBatchPost(productId: Int, batch32: Batch32)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/{product_id}/variations/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch32)
      .withPathParam("product_id", productId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param batch31 
   */
  def productsProductIdVariationsBatchPut(productId: Int, batch31: Batch31)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/{product_id}/variations/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch31)
      .withPathParam("product_id", productId)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date.
   * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date.
   * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param slug Limit result set to products with a specific slug.
   * @param status Limit result set to products assigned a specific status.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price.
   * @param maxPrice Limit result set to products based on a maximum price.
   * @param stockStatus Limit result set to products with specified stock status.
   */
  def productsProductIdVariationsGet(productId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, modifiedAfter: Option[String] = None, modifiedBefore: Option[String] = None, datesAreGmt: Option[Boolean] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], slug: Option[String] = None, status: Option[String] = None, sku: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.GET, baseUrl, "/products/{product_id}/variations", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("modified_after", modifiedAfter)
      .withQueryParam("modified_before", modifiedBefore)
      .withQueryParam("dates_are_gmt", datesAreGmt)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("slug", slug)
      .withQueryParam("status", status)
      .withQueryParam("sku", sku)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", stockStatus)
      .withPathParam("product_id", productId)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param id Unique identifier for the variation.
   * @param force Whether to bypass trash and force deletion.
   */
  def productsProductIdVariationsIdDelete(productId: Int, id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.DELETE, baseUrl, "/products/{product_id}/variations/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("product_id", productId)
      .withPathParam("id", id)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param id Unique identifier for the variation.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsProductIdVariationsIdGet(productId: Int, id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.GET, baseUrl, "/products/{product_id}/variations/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("product_id", productId)
      .withPathParam("id", id)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param id Unique identifier for the variation.
   * @param productVariation4 
   */
  def productsProductIdVariationsIdPatch(productId: Int, id: Int, productVariation4: ProductVariation4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.PATCH, baseUrl, "/products/{product_id}/variations/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productVariation4)
      .withPathParam("product_id", productId)
      .withPathParam("id", id)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param id Unique identifier for the variation.
   * @param productVariation3 
   */
  def productsProductIdVariationsIdPost(productId: Int, id: Int, productVariation3: ProductVariation3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.POST, baseUrl, "/products/{product_id}/variations/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productVariation3)
      .withPathParam("product_id", productId)
      .withPathParam("id", id)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param id Unique identifier for the variation.
   * @param productVariation2 
   */
  def productsProductIdVariationsIdPut(productId: Int, id: Int, productVariation2: ProductVariation2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.PUT, baseUrl, "/products/{product_id}/variations/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productVariation2)
      .withPathParam("product_id", productId)
      .withPathParam("id", id)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductVariation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productId Unique identifier for the variable product.
   * @param productVariation1 
   */
  def productsProductIdVariationsPost(productId: Int, productVariation1: ProductVariation1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductVariation] =
    ApiRequest[ProductVariation](ApiMethods.POST, baseUrl, "/products/{product_id}/variations", "application/json")
      .withCredentials(basicAuth).withBody(productVariation1)
      .withPathParam("product_id", productId)
      .withSuccessResponse[ProductVariation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch21 
   */
  def productsReviewsBatchPatch(batch21: Batch21)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/reviews/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch21)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch20 
   */
  def productsReviewsBatchPost(batch20: Batch20)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/reviews/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch20)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch19 
   */
  def productsReviewsBatchPut(batch19: Batch19)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/reviews/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch19)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to reviews published before a given ISO8601 compliant date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific IDs.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param reviewer Limit result set to reviews assigned to specific user IDs.
   * @param reviewerExclude Ensure result set excludes reviews assigned to specific user IDs.
   * @param reviewerEmail Limit result set to that from a specific author email.
   * @param product Limit result set to reviews assigned to specific product IDs.
   * @param status Limit result set to reviews assigned a specific status.
   */
  def productsReviewsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, reviewer: Seq[Int], reviewerExclude: Seq[Int], reviewerEmail: Option[String] = None, product: Seq[Int], status: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.GET, baseUrl, "/products/reviews", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("reviewer", ArrayValues(reviewer, MULTI))
      .withQueryParam("reviewer_exclude", ArrayValues(reviewerExclude, MULTI))
      .withQueryParam("reviewer_email", reviewerEmail)
      .withQueryParam("product", ArrayValues(product, MULTI))
      .withQueryParam("status", status)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Whether to bypass trash and force deletion.
   */
  def productsReviewsIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.DELETE, baseUrl, "/products/reviews/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsReviewsIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.GET, baseUrl, "/products/reviews/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productReview4 
   */
  def productsReviewsIdPatch(id: Int, productReview4: ProductReview4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.PATCH, baseUrl, "/products/reviews/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productReview4)
      .withPathParam("id", id)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productReview3 
   */
  def productsReviewsIdPost(id: Int, productReview3: ProductReview3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.POST, baseUrl, "/products/reviews/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productReview3)
      .withPathParam("id", id)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productReview2 
   */
  def productsReviewsIdPut(id: Int, productReview2: ProductReview2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.PUT, baseUrl, "/products/reviews/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productReview2)
      .withPathParam("id", id)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productReview1 
   */
  def productsReviewsPost(productReview1: ProductReview1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.POST, baseUrl, "/products/reviews", "application/json")
      .withCredentials(basicAuth).withBody(productReview1)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch24 
   */
  def productsShippingClassesBatchPatch(batch24: Batch24)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/shipping_classes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch24)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch23 
   */
  def productsShippingClassesBatchPost(batch23: Batch23)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/shipping_classes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch23)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch22 
   */
  def productsShippingClassesBatchPut(batch22: Batch22)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/shipping_classes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch22)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by resource attribute.
   * @param hideEmpty Whether to hide resources not assigned to any products.
   * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only.
   * @param product Limit result set to resources assigned to a specific product.
   * @param slug Limit result set to resources with a specific slug.
   */
  def productsShippingClassesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None, parent: Option[Int] = None, product: Option[Int] = None, slug: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.GET, baseUrl, "/products/shipping_classes", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withQueryParam("parent", parent)
      .withQueryParam("product", product)
      .withQueryParam("slug", slug)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def productsShippingClassesIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.DELETE, baseUrl, "/products/shipping_classes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsShippingClassesIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.GET, baseUrl, "/products/shipping_classes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productShippingClass4 
   */
  def productsShippingClassesIdPatch(id: Int, productShippingClass4: ProductShippingClass4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.PATCH, baseUrl, "/products/shipping_classes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productShippingClass4)
      .withPathParam("id", id)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productShippingClass3 
   */
  def productsShippingClassesIdPost(id: Int, productShippingClass3: ProductShippingClass3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.POST, baseUrl, "/products/shipping_classes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productShippingClass3)
      .withPathParam("id", id)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productShippingClass2 
   */
  def productsShippingClassesIdPut(id: Int, productShippingClass2: ProductShippingClass2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.PUT, baseUrl, "/products/shipping_classes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productShippingClass2)
      .withPathParam("id", id)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductShippingClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productShippingClass1 
   */
  def productsShippingClassesPost(productShippingClass1: ProductShippingClass1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductShippingClass] =
    ApiRequest[ProductShippingClass](ApiMethods.POST, baseUrl, "/products/shipping_classes", "application/json")
      .withCredentials(basicAuth).withBody(productShippingClass1)
      .withSuccessResponse[ProductShippingClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch27 
   */
  def productsTagsBatchPatch(batch27: Batch27)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/products/tags/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch27)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch26 
   */
  def productsTagsBatchPost(batch26: Batch26)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/products/tags/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch26)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch25 
   */
  def productsTagsBatchPut(batch25: Batch25)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/products/tags/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch25)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items. Applies to hierarchical taxonomies only.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by resource attribute.
   * @param hideEmpty Whether to hide resources not assigned to any products.
   * @param parent Limit result set to resources assigned to a specific parent. Applies to hierarchical taxonomies only.
   * @param product Limit result set to resources assigned to a specific product.
   * @param slug Limit result set to resources with a specific slug.
   */
  def productsTagsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None, parent: Option[Int] = None, product: Option[Int] = None, slug: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.GET, baseUrl, "/products/tags", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withQueryParam("parent", parent)
      .withQueryParam("product", product)
      .withQueryParam("slug", slug)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def productsTagsIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.DELETE, baseUrl, "/products/tags/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsTagsIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.GET, baseUrl, "/products/tags/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productTag4 
   */
  def productsTagsIdPatch(id: Int, productTag4: ProductTag4)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.PATCH, baseUrl, "/products/tags/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productTag4)
      .withPathParam("id", id)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productTag3 
   */
  def productsTagsIdPost(id: Int, productTag3: ProductTag3)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.POST, baseUrl, "/products/tags/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productTag3)
      .withPathParam("id", id)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param productTag2 
   */
  def productsTagsIdPut(id: Int, productTag2: ProductTag2)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.PUT, baseUrl, "/products/tags/{id}", "application/json")
      .withCredentials(basicAuth).withBody(productTag2)
      .withPathParam("id", id)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductTag (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productTag1 
   */
  def productsTagsPost(productTag1: ProductTag1)(implicit basicAuth: BasicCredentials): ApiRequest[ProductTag] =
    ApiRequest[ProductTag](ApiMethods.POST, baseUrl, "/products/tags", "application/json")
      .withCredentials(basicAuth).withBody(productTag1)
      .withSuccessResponse[ProductTag](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ReportCouponTotal (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsCouponsTotalsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ReportCouponTotal] =
    ApiRequest[ReportCouponTotal](ApiMethods.GET, baseUrl, "/reports/coupons/totals", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ReportCouponTotal](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ReportCustomerTotal (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsCustomersTotalsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ReportCustomerTotal] =
    ApiRequest[ReportCustomerTotal](ApiMethods.GET, baseUrl, "/reports/customers/totals", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ReportCustomerTotal](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Report (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Report] =
    ApiRequest[Report](ApiMethods.GET, baseUrl, "/reports", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[Report](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ReportOrderTotal (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsOrdersTotalsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ReportOrderTotal] =
    ApiRequest[ReportOrderTotal](ApiMethods.GET, baseUrl, "/reports/orders/totals", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ReportOrderTotal](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ReportProductTotal (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsProductsTotalsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ReportProductTotal] =
    ApiRequest[ReportProductTotal](ApiMethods.GET, baseUrl, "/reports/products/totals", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ReportProductTotal](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ReportReviewTotal (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def reportsReviewsTotalsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ReportReviewTotal] =
    ApiRequest[ReportReviewTotal](ApiMethods.GET, baseUrl, "/reports/reviews/totals", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ReportReviewTotal](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SalesReport (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param period Report period.
   * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format.
   * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format.
   */
  def reportsSalesGet(context: Option[String] = None, period: Option[String] = None, dateMin: Option[LocalDate] = None, dateMax: Option[LocalDate] = None)(implicit basicAuth: BasicCredentials): ApiRequest[SalesReport] =
    ApiRequest[SalesReport](ApiMethods.GET, baseUrl, "/reports/sales", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("period", period)
      .withQueryParam("date_min", dateMin)
      .withQueryParam("date_max", dateMax)
      .withSuccessResponse[SalesReport](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : TopSellersReport (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param period Report period.
   * @param dateMin Return sales for a specific start date, the date need to be in the YYYY-MM-DD format.
   * @param dateMax Return sales for a specific end date, the date need to be in the YYYY-MM-DD format.
   */
  def reportsTopSellersGet(context: Option[String] = None, period: Option[String] = None, dateMin: Option[LocalDate] = None, dateMax: Option[LocalDate] = None)(implicit basicAuth: BasicCredentials): ApiRequest[TopSellersReport] =
    ApiRequest[TopSellersReport](ApiMethods.GET, baseUrl, "/reports/top_sellers", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("period", period)
      .withQueryParam("date_min", dateMin)
      .withQueryParam("date_max", dateMax)
      .withSuccessResponse[TopSellersReport](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param namespace 
   * @param context 
   */
  def rootGet(namespace: Option[String] = None, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/", "application/json")
      .withCredentials(basicAuth).withQueryParam("namespace", namespace)
      .withQueryParam("context", context)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def shippingMethodsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingMethod] =
    ApiRequest[ShippingMethod](ApiMethods.GET, baseUrl, "/shipping_methods", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[ShippingMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def shippingMethodsIdGet(id: String, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingMethod] =
    ApiRequest[ShippingMethod](ApiMethods.GET, baseUrl, "/shipping_methods/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def shippingZonesGet()(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.GET, baseUrl, "/shipping/zones", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param force Whether to bypass trash and force deletion.
   */
  def shippingZonesIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.DELETE, baseUrl, "/shipping/zones/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   */
  def shippingZonesIdGet(id: Int)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.GET, baseUrl, "/shipping/zones/{id}", "application/json")
      .withCredentials(basicAuth).withPathParam("id", id)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneLocation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   */
  def shippingZonesIdLocationsGet(id: Int)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneLocation] =
    ApiRequest[ShippingZoneLocation](ApiMethods.GET, baseUrl, "/shipping/zones/{id}/locations", "application/json")
      .withCredentials(basicAuth).withPathParam("id", id)
      .withSuccessResponse[ShippingZoneLocation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneLocation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZoneLocation3 
   */
  def shippingZonesIdLocationsPatch(id: Int, shippingZoneLocation3: ShippingZoneLocation3)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneLocation] =
    ApiRequest[ShippingZoneLocation](ApiMethods.PATCH, baseUrl, "/shipping/zones/{id}/locations", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneLocation3)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZoneLocation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneLocation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZoneLocation2 
   */
  def shippingZonesIdLocationsPost(id: Int, shippingZoneLocation2: ShippingZoneLocation2)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneLocation] =
    ApiRequest[ShippingZoneLocation](ApiMethods.POST, baseUrl, "/shipping/zones/{id}/locations", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneLocation2)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZoneLocation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneLocation (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZoneLocation1 
   */
  def shippingZonesIdLocationsPut(id: Int, shippingZoneLocation1: ShippingZoneLocation1)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneLocation] =
    ApiRequest[ShippingZoneLocation](ApiMethods.PUT, baseUrl, "/shipping/zones/{id}/locations", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneLocation1)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZoneLocation](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZone4 
   */
  def shippingZonesIdPatch(id: Int, shippingZone4: ShippingZone4)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.PATCH, baseUrl, "/shipping/zones/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZone4)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZone3 
   */
  def shippingZonesIdPost(id: Int, shippingZone3: ShippingZone3)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.POST, baseUrl, "/shipping/zones/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZone3)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique ID for the resource.
   * @param shippingZone2 
   */
  def shippingZonesIdPut(id: Int, shippingZone2: ShippingZone2)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.PUT, baseUrl, "/shipping/zones/{id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZone2)
      .withPathParam("id", id)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZone (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param shippingZone1 
   */
  def shippingZonesPost(shippingZone1: ShippingZone1)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZone] =
    ApiRequest[ShippingZone](ApiMethods.POST, baseUrl, "/shipping/zones", "application/json")
      .withCredentials(basicAuth).withBody(shippingZone1)
      .withSuccessResponse[ShippingZone](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   */
  def shippingZonesZoneIdMethodsGet(zoneId: Int)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.GET, baseUrl, "/shipping/zones/{zone_id}/methods", "application/json")
      .withCredentials(basicAuth).withPathParam("zone_id", zoneId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param instanceId Unique ID for the instance.
   * @param force Whether to bypass trash and force deletion.
   */
  def shippingZonesZoneIdMethodsInstanceIdDelete(zoneId: Int, instanceId: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.DELETE, baseUrl, "/shipping/zones/{zone_id}/methods/{instance_id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("zone_id", zoneId)
      .withPathParam("instance_id", instanceId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param instanceId Unique ID for the instance.
   */
  def shippingZonesZoneIdMethodsInstanceIdGet(zoneId: Int, instanceId: Int)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.GET, baseUrl, "/shipping/zones/{zone_id}/methods/{instance_id}", "application/json")
      .withCredentials(basicAuth).withPathParam("zone_id", zoneId)
      .withPathParam("instance_id", instanceId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param instanceId Unique ID for the instance.
   * @param shippingZoneMethod4 
   */
  def shippingZonesZoneIdMethodsInstanceIdPatch(zoneId: Int, instanceId: Int, shippingZoneMethod4: ShippingZoneMethod4)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.PATCH, baseUrl, "/shipping/zones/{zone_id}/methods/{instance_id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneMethod4)
      .withPathParam("zone_id", zoneId)
      .withPathParam("instance_id", instanceId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param instanceId Unique ID for the instance.
   * @param shippingZoneMethod3 
   */
  def shippingZonesZoneIdMethodsInstanceIdPost(zoneId: Int, instanceId: Int, shippingZoneMethod3: ShippingZoneMethod3)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.POST, baseUrl, "/shipping/zones/{zone_id}/methods/{instance_id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneMethod3)
      .withPathParam("zone_id", zoneId)
      .withPathParam("instance_id", instanceId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param instanceId Unique ID for the instance.
   * @param shippingZoneMethod2 
   */
  def shippingZonesZoneIdMethodsInstanceIdPut(zoneId: Int, instanceId: Int, shippingZoneMethod2: ShippingZoneMethod2)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.PUT, baseUrl, "/shipping/zones/{zone_id}/methods/{instance_id}", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneMethod2)
      .withPathParam("zone_id", zoneId)
      .withPathParam("instance_id", instanceId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ShippingZoneMethod (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param zoneId Unique ID for the zone.
   * @param shippingZoneMethod1 
   */
  def shippingZonesZoneIdMethodsPost(zoneId: Int, shippingZoneMethod1: ShippingZoneMethod1)(implicit basicAuth: BasicCredentials): ApiRequest[ShippingZoneMethod] =
    ApiRequest[ShippingZoneMethod](ApiMethods.POST, baseUrl, "/shipping/zones/{zone_id}/methods", "application/json")
      .withCredentials(basicAuth).withBody(shippingZoneMethod1)
      .withPathParam("zone_id", zoneId)
      .withSuccessResponse[ShippingZoneMethod](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatus (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def systemStatusGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatus] =
    ApiRequest[SystemStatus](ApiMethods.GET, baseUrl, "/system_status", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[SystemStatus](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatusTool (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def systemStatusToolsGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatusTool] =
    ApiRequest[SystemStatusTool](ApiMethods.GET, baseUrl, "/system_status/tools", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[SystemStatusTool](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatusTool (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   */
  def systemStatusToolsIdGet(id: String)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatusTool] =
    ApiRequest[SystemStatusTool](ApiMethods.GET, baseUrl, "/system_status/tools/{id}", "application/json")
      .withCredentials(basicAuth).withPathParam("id", id)
      .withSuccessResponse[SystemStatusTool](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatusTool (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id A unique identifier for the tool.
   * @param systemStatusTool3 
   */
  def systemStatusToolsIdPatch(id: String, systemStatusTool3: SystemStatusTool3)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatusTool] =
    ApiRequest[SystemStatusTool](ApiMethods.PATCH, baseUrl, "/system_status/tools/{id}", "application/json")
      .withCredentials(basicAuth).withBody(systemStatusTool3)
      .withPathParam("id", id)
      .withSuccessResponse[SystemStatusTool](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatusTool (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id A unique identifier for the tool.
   * @param systemStatusTool2 
   */
  def systemStatusToolsIdPost(id: String, systemStatusTool2: SystemStatusTool2)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatusTool] =
    ApiRequest[SystemStatusTool](ApiMethods.POST, baseUrl, "/system_status/tools/{id}", "application/json")
      .withCredentials(basicAuth).withBody(systemStatusTool2)
      .withPathParam("id", id)
      .withSuccessResponse[SystemStatusTool](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : SystemStatusTool (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id A unique identifier for the tool.
   * @param systemStatusTool1 
   */
  def systemStatusToolsIdPut(id: String, systemStatusTool1: SystemStatusTool1)(implicit basicAuth: BasicCredentials): ApiRequest[SystemStatusTool] =
    ApiRequest[SystemStatusTool](ApiMethods.PUT, baseUrl, "/system_status/tools/{id}", "application/json")
      .withCredentials(basicAuth).withBody(systemStatusTool1)
      .withPathParam("id", id)
      .withSuccessResponse[SystemStatusTool](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch36 
   */
  def taxesBatchPatch(batch36: Batch36)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/taxes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch36)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch35 
   */
  def taxesBatchPost(batch35: Batch35)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/taxes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch35)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch34 
   */
  def taxesBatchPut(batch34: Batch34)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/taxes/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch34)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : TaxClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def taxesClassesGet(context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[TaxClass] =
    ApiRequest[TaxClass](ApiMethods.GET, baseUrl, "/taxes/classes", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withSuccessResponse[TaxClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : TaxClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param taxClass1 
   */
  def taxesClassesPost(taxClass1: TaxClass1)(implicit basicAuth: BasicCredentials): ApiRequest[TaxClass] =
    ApiRequest[TaxClass](ApiMethods.POST, baseUrl, "/taxes/classes", "application/json")
      .withCredentials(basicAuth).withBody(taxClass1)
      .withSuccessResponse[TaxClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : TaxClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param slug Unique slug for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def taxesClassesSlugDelete(slug: String, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[TaxClass] =
    ApiRequest[TaxClass](ApiMethods.DELETE, baseUrl, "/taxes/classes/{slug}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("slug", slug)
      .withSuccessResponse[TaxClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : TaxClass (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param slug Unique slug for the resource.
   */
  def taxesClassesSlugGet(slug: String)(implicit basicAuth: BasicCredentials): ApiRequest[TaxClass] =
    ApiRequest[TaxClass](ApiMethods.GET, baseUrl, "/taxes/classes/{slug}", "application/json")
      .withCredentials(basicAuth).withPathParam("slug", slug)
      .withSuccessResponse[TaxClass](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param `class` Sort by tax class.
   */
  def taxesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, `class`: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.GET, baseUrl, "/taxes", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("class", `class`)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def taxesIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.DELETE, baseUrl, "/taxes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def taxesIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.GET, baseUrl, "/taxes/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param tax4 
   */
  def taxesIdPatch(id: Int, tax4: Tax4)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.PATCH, baseUrl, "/taxes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(tax4)
      .withPathParam("id", id)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param tax3 
   */
  def taxesIdPost(id: Int, tax3: Tax3)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.POST, baseUrl, "/taxes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(tax3)
      .withPathParam("id", id)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param tax2 
   */
  def taxesIdPut(id: Int, tax2: Tax2)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.PUT, baseUrl, "/taxes/{id}", "application/json")
      .withCredentials(basicAuth).withBody(tax2)
      .withPathParam("id", id)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Tax (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param tax1 
   */
  def taxesPost(tax1: Tax1)(implicit basicAuth: BasicCredentials): ApiRequest[Tax] =
    ApiRequest[Tax](ApiMethods.POST, baseUrl, "/taxes", "application/json")
      .withCredentials(basicAuth).withBody(tax1)
      .withSuccessResponse[Tax](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch39 
   */
  def webhooksBatchPatch(batch39: Batch39)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PATCH, baseUrl, "/webhooks/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch39)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch38 
   */
  def webhooksBatchPost(batch38: Batch38)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.POST, baseUrl, "/webhooks/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch38)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Batch (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param batch37 
   */
  def webhooksBatchPut(batch37: Batch37)(implicit basicAuth: BasicCredentials): ApiRequest[Batch] =
    ApiRequest[Batch](ApiMethods.PUT, baseUrl, "/webhooks/batch", "application/json")
      .withCredentials(basicAuth).withBody(batch37)
      .withSuccessResponse[Batch](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources published after a given ISO8601 compliant date.
   * @param before Limit response to resources published before a given ISO8601 compliant date.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param status Limit result set to webhooks assigned a specific status.
   */
  def webhooksGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[String] = None, before: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, status: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.GET, baseUrl, "/webhooks", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("status", status)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param force Required to be true, as resource does not support trashing.
   */
  def webhooksIdDelete(id: Int, force: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.DELETE, baseUrl, "/webhooks/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("force", force)
      .withPathParam("id", id)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def webhooksIdGet(id: Int, context: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.GET, baseUrl, "/webhooks/{id}", "application/json")
      .withCredentials(basicAuth).withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param webhook4 
   */
  def webhooksIdPatch(id: Int, webhook4: Webhook4)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.PATCH, baseUrl, "/webhooks/{id}", "application/json")
      .withCredentials(basicAuth).withBody(webhook4)
      .withPathParam("id", id)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param webhook3 
   */
  def webhooksIdPost(id: Int, webhook3: Webhook3)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.POST, baseUrl, "/webhooks/{id}", "application/json")
      .withCredentials(basicAuth).withBody(webhook3)
      .withPathParam("id", id)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param id Unique identifier for the resource.
   * @param webhook2 
   */
  def webhooksIdPut(id: Int, webhook2: Webhook2)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.PUT, baseUrl, "/webhooks/{id}", "application/json")
      .withCredentials(basicAuth).withBody(webhook2)
      .withPathParam("id", id)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Webhook (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param webhook1 
   */
  def webhooksPost(webhook1: Webhook1)(implicit basicAuth: BasicCredentials): ApiRequest[Webhook] =
    ApiRequest[Webhook](ApiMethods.POST, baseUrl, "/webhooks", "application/json")
      .withCredentials(basicAuth).withBody(webhook1)
      .withSuccessResponse[Webhook](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      



}

