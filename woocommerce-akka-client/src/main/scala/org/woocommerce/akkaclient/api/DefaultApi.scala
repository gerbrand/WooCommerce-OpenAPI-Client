/**
 * wc/store
 * OpenAPI document of the namespace wc/store. Based on generated json document, with some changes and additions
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.woocommerce.akkaclient.api

import org.woocommerce.akkaclient.model.Attributes
import org.woocommerce.akkaclient.model.BillingAddress
import org.woocommerce.akkaclient.model.BillingAddress1
import org.woocommerce.akkaclient.model.BillingAddress2
import org.woocommerce.akkaclient.model.BillingAddress3
import org.woocommerce.akkaclient.model.CalculateAttributeCounts
import org.woocommerce.akkaclient.model.Cart
import org.woocommerce.akkaclient.model.CartCoupon
import org.woocommerce.akkaclient.model.CartItem
import org.woocommerce.akkaclient.model.Checkout
import java.time.OffsetDateTime
import org.woocommerce.akkaclient.model.Product
import org.woocommerce.akkaclient.model.ProductAttribute
import org.woocommerce.akkaclient.model.ProductCategory
import org.woocommerce.akkaclient.model.ProductCollectionData
import org.woocommerce.akkaclient.model.ProductReview
import org.woocommerce.akkaclient.model.Requests
import org.woocommerce.akkaclient.model.ShippingAddress
import org.woocommerce.akkaclient.model.ShippingAddress1
import org.woocommerce.akkaclient.model.ShippingAddress2
import org.woocommerce.akkaclient.model.ShippingAddress3
import org.woocommerce.akkaclient.model.Term
import org.woocommerce.akkaclient.model.Variation
import org.woocommerce.akkaclient.core._
import org.woocommerce.akkaclient.core.CollectionFormats._
import org.woocommerce.akkaclient.core.ApiKeyLocations._

object DefaultApi {

  def apply(baseUrl: String = "https://www.software-creation.nl/wp-json/wc/v3") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 401 :  (Invalid username or password)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product 
   */
  def addProduct(product: Option[Product] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/products", "application/json")
      .withCredentials(basicAuth).withBody(product)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](401)
      

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param requests 
   * @param validation 
   */
  def batchPost(requests: Seq[Requests], validation: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/batch", "application/json")
      .withQueryParam("validation", validation)
      .withQueryParam("requests", ArrayValues(requests, MULTI))
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id The cart item product or variation ID.
   * @param quantity Quantity of this item in the cart.
   * @param variation Chosen attributes (for variations).
   */
  def cartAddItemPost(id: Option[Int] = None, quantity: Option[Int] = None, variation: Seq[Variation]): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/add-item", "application/json")
      .withQueryParam("id", id)
      .withQueryParam("quantity", quantity)
      .withQueryParam("variation", ArrayValues(variation, MULTI))
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartApplyCouponPost(code: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/apply-coupon", "application/json")
      .withQueryParam("code", code)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartCouponsCodeDelete(code: String): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.DELETE, baseUrl, "/cart/coupons/{code}", "application/json")
      .withPathParam("code", code)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartCouponsCodeGet(code: String, context: Option[String] = None): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.GET, baseUrl, "/cart/coupons/{code}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("code", code)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartCouponsDelete(): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.DELETE, baseUrl, "/cart/coupons", "application/json")
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[CartCoupon] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartCouponsGet(context: Option[String] = None): ApiRequest[Seq[CartCoupon]] =
    ApiRequest[Seq[CartCoupon]](ApiMethods.GET, baseUrl, "/cart/coupons", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Seq[CartCoupon]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code The coupon's unique code.
   * @param discountType The discount type for the coupon (e.g. percentage or fixed amount)
   */
  def cartCouponsPost(code: Option[String] = None, discountType: Option[String] = None): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.POST, baseUrl, "/cart/coupons", "application/json")
      .withQueryParam("code", code)
      .withQueryParam("discount_type", discountType)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Any (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace Extension's name - this will be used to ensure the data in the request is routed appropriately.
   * @param data Additional data to pass to the extension
   */
  def cartExtensionsPost(namespace: Option[String] = None, data: Option[Any] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, baseUrl, "/cart/extensions", "application/json")
      .withQueryParam("namespace", namespace)
      .withQueryParam("data", data)
      .withSuccessResponse[Any](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartGet(context: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.GET, baseUrl, "/cart", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartItemsDelete(): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.DELETE, baseUrl, "/cart/items", "application/json")
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[CartItem] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartItemsGet(context: Option[String] = None): ApiRequest[Seq[CartItem]] =
    ApiRequest[Seq[CartItem]](ApiMethods.GET, baseUrl, "/cart/items", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Seq[CartItem]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   */
  def cartItemsKeyDelete(key: String): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.DELETE, baseUrl, "/cart/items/{key}", "application/json")
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartItemsKeyGet(key: String, context: Option[String] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.GET, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPatch(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.PATCH, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPost(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.POST, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPut(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.PUT, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param extensions 
   */
  def cartItemsPost(extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.POST, baseUrl, "/cart/items", "application/json")
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartRemoveCouponPost(code: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/remove-coupon", "application/json")
      .withQueryParam("code", code)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier (key) for the cart item.
   */
  def cartRemoveItemPost(key: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/remove-item", "application/json")
      .withQueryParam("key", key)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param packageId The ID of the package being shipped.
   * @param rateId The chosen rate ID for the package.
   */
  def cartSelectShippingRatePost(packageId: String, rateId: String): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/select-shipping-rate", "application/json")
      .withQueryParam("package_id", packageId)
      .withQueryParam("rate_id", rateId)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   */
  def cartUpdateCustomerPost(billingAddress: Option[BillingAddress] = None, shippingAddress: Option[ShippingAddress] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/update-customer", "application/json")
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier (key) for the cart item to update.
   * @param quantity New quantity of the item in the cart.
   */
  def cartUpdateItemPost(key: Option[String] = None, quantity: Option[Int] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/update-item", "application/json")
      .withQueryParam("key", key)
      .withQueryParam("quantity", quantity)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def checkoutGet(context: Option[String] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.GET, baseUrl, "/checkout", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPatch(customerNote: Option[String] = None, billingAddress: Option[BillingAddress3] = None, shippingAddress: Option[ShippingAddress3] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.PATCH, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPost(customerNote: Option[String] = None, billingAddress: Option[BillingAddress2] = None, shippingAddress: Option[ShippingAddress2] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.POST, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPut(customerNote: Option[String] = None, billingAddress: Option[BillingAddress1] = None, shippingAddress: Option[ShippingAddress1] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.PUT, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param attributeId Unique identifier for the attribute.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsAttributesAttributeIdTermsGet(attributeId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[Term] =
    ApiRequest[Term](ApiMethods.GET, baseUrl, "/products/attributes/{attribute_id}/terms", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[Term](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[ProductAttribute] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesGet(context: Option[String] = None): ApiRequest[Seq[ProductAttribute]] =
    ApiRequest[Seq[ProductAttribute]](ApiMethods.GET, baseUrl, "/products/attributes", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Seq[ProductAttribute]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesIdGet(id: Int, context: Option[String] = None): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.GET, baseUrl, "/products/attributes/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[ProductCategory] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsCategoriesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[Seq[ProductCategory]] =
    ApiRequest[Seq[ProductCategory]](ApiMethods.GET, baseUrl, "/products/categories", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withSuccessResponse[Seq[ProductCategory]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCategory (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsCategoriesIdGet(id: Int, context: Option[String] = None): ApiRequest[ProductCategory] =
    ApiRequest[ProductCategory](ApiMethods.GET, baseUrl, "/products/categories/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCategory](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCollectionData (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources created after a given ISO8601 compliant date.
   * @param before Limit response to resources created before a given ISO8601 compliant date.
   * @param dateColumn When limiting response using after/before, which date column to compare against.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param `type` Limit result set to products assigned a specific type.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param featured Limit result set to featured products.
   * @param category Limit result set to products assigned a specific category ID.
   * @param categoryOperator Operator to compare product category terms.
   * @param tag Limit result set to products assigned a specific tag ID.
   * @param tagOperator Operator to compare product tags.
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price, provided using the smallest unit of the currency.
   * @param maxPrice Limit result set to products based on a maximum price, provided using the smallest unit of the currency.
   * @param stockStatus Limit result set to products with specified stock status.
   * @param attributes Limit result set to products with selected global attributes.
   * @param attributeRelation The logical relationship between attributes when filtering across multiple at once.
   * @param catalogVisibility Determines if hidden or visible catalog products are shown.
   * @param rating Limit result set to products with a certain average rating.
   * @param calculatePriceRange If true, calculates the minimum and maximum product prices for the collection.
   * @param calculateStockStatusCounts If true, calculates stock counts for products in the collection.
   * @param calculateAttributeCounts If requested, calculates attribute term counts for products in the collection.
   * @param calculateRatingCounts If true, calculates rating counts for products in the collection.
   */
  def productsCollectionDataGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int], calculatePriceRange: Option[Boolean] = None, calculateStockStatusCounts: Option[Boolean] = None, calculateAttributeCounts: Seq[CalculateAttributeCounts], calculateRatingCounts: Option[Boolean] = None): ApiRequest[ProductCollectionData] =
    ApiRequest[ProductCollectionData](ApiMethods.GET, baseUrl, "/products/collection-data", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("date_column", dateColumn)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("type", `type`)
      .withQueryParam("sku", sku)
      .withQueryParam("featured", featured)
      .withQueryParam("category", category)
      .withQueryParam("category_operator", categoryOperator)
      .withQueryParam("tag", tag)
      .withQueryParam("tag_operator", tagOperator)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", ArrayValues(stockStatus, MULTI))
      .withQueryParam("attributes", ArrayValues(attributes, MULTI))
      .withQueryParam("attribute_relation", attributeRelation)
      .withQueryParam("catalog_visibility", catalogVisibility)
      .withQueryParam("rating", ArrayValues(rating, MULTI))
      .withQueryParam("calculate_price_range", calculatePriceRange)
      .withQueryParam("calculate_stock_status_counts", calculateStockStatusCounts)
      .withQueryParam("calculate_attribute_counts", ArrayValues(calculateAttributeCounts, MULTI))
      .withQueryParam("calculate_rating_counts", calculateRatingCounts)
      .withSuccessResponse[ProductCollectionData](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[Product] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources created after a given ISO8601 compliant date.
   * @param before Limit response to resources created before a given ISO8601 compliant date.
   * @param dateColumn When limiting response using after/before, which date column to compare against.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param `type` Limit result set to products assigned a specific type.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param featured Limit result set to featured products.
   * @param category Limit result set to products assigned a specific category ID.
   * @param categoryOperator Operator to compare product category terms.
   * @param tag Limit result set to products assigned a specific tag ID.
   * @param tagOperator Operator to compare product tags.
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price, provided using the smallest unit of the currency.
   * @param maxPrice Limit result set to products based on a maximum price, provided using the smallest unit of the currency.
   * @param stockStatus Limit result set to products with specified stock status.
   * @param attributes Limit result set to products with selected global attributes.
   * @param attributeRelation The logical relationship between attributes when filtering across multiple at once.
   * @param catalogVisibility Determines if hidden or visible catalog products are shown.
   * @param rating Limit result set to products with a certain average rating.
   */
  def productsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int]): ApiRequest[Seq[Product]] =
    ApiRequest[Seq[Product]](ApiMethods.GET, baseUrl, "/products", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("date_column", dateColumn)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("type", `type`)
      .withQueryParam("sku", sku)
      .withQueryParam("featured", featured)
      .withQueryParam("category", category)
      .withQueryParam("category_operator", categoryOperator)
      .withQueryParam("tag", tag)
      .withQueryParam("tag_operator", tagOperator)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", ArrayValues(stockStatus, MULTI))
      .withQueryParam("attributes", ArrayValues(attributes, MULTI))
      .withQueryParam("attribute_relation", attributeRelation)
      .withQueryParam("catalog_visibility", catalogVisibility)
      .withQueryParam("rating", ArrayValues(rating, MULTI))
      .withSuccessResponse[Seq[Product]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsIdGet(id: Int, context: Option[String] = None): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.GET, baseUrl, "/products/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param categoryId Limit result set to reviews from specific category IDs.
   * @param productId Limit result set to reviews from specific product IDs.
   */
  def productsReviewsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, categoryId: Option[String] = None, productId: Option[String] = None): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.GET, baseUrl, "/products/reviews", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("product_id", productId)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsTagsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[Term] =
    ApiRequest[Term](ApiMethods.GET, baseUrl, "/products/tags", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withSuccessResponse[Term](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace 
   * @param context 
   */
  def rootGet(namespace: Option[String] = None, context: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/", "application/json")
      .withQueryParam("namespace", namespace)
      .withQueryParam("context", context)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      



}

