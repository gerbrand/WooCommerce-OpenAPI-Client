/**
 * wc/store
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.woocommerce.akkaclient.api

import org.woocommerce.akkaclient.model.Attributes
import org.woocommerce.akkaclient.model.BillingAddress
import org.woocommerce.akkaclient.model.BillingAddress1
import org.woocommerce.akkaclient.model.BillingAddress2
import org.woocommerce.akkaclient.model.BillingAddress3
import org.woocommerce.akkaclient.model.CalculateAttributeCounts
import org.woocommerce.akkaclient.model.Cart
import org.woocommerce.akkaclient.model.CartCoupon
import org.woocommerce.akkaclient.model.CartItem
import org.woocommerce.akkaclient.model.Checkout
import java.time.OffsetDateTime
import org.woocommerce.akkaclient.model.Product
import org.woocommerce.akkaclient.model.ProductAttribute
import org.woocommerce.akkaclient.model.ProductCategory
import org.woocommerce.akkaclient.model.ProductCollectionData
import org.woocommerce.akkaclient.model.ProductReview
import org.woocommerce.akkaclient.model.Requests
import org.woocommerce.akkaclient.model.ShippingAddress
import org.woocommerce.akkaclient.model.ShippingAddress1
import org.woocommerce.akkaclient.model.ShippingAddress2
import org.woocommerce.akkaclient.model.ShippingAddress3
import org.woocommerce.akkaclient.model.Term
import org.woocommerce.akkaclient.model.Variation
import org.woocommerce.akkaclient.core._
import org.woocommerce.akkaclient.core.CollectionFormats._
import org.woocommerce.akkaclient.core.ApiKeyLocations._

object DefaultApi {

  def apply(baseUrl: String = "https://www.liberactiva.nl/wp-json/wc/store") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param requests 
   * @param validation 
   */
  def batchPost(requests: Seq[Requests], validation: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/batch", "application/json")
      .withQueryParam("validation", validation)
      .withQueryParam("requests", ArrayValues(requests, MULTI))
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Het winkelwagenartikel of het variatie ID.
   * @param quantity Aantal van dit artikel in de winkelwagen.
   * @param variation Gekozen eigenschappen (voor variaties).
   */
  def cartAddItemPost(id: Option[Int] = None, quantity: Option[Int] = None, variation: Seq[Variation]): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/add-item", "application/json")
      .withQueryParam("id", id)
      .withQueryParam("quantity", quantity)
      .withQueryParam("variation", ArrayValues(variation, MULTI))
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unieke identificatiecode voor de waardebon in de winkelwagen.
   */
  def cartApplyCouponPost(code: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/apply-coupon", "application/json")
      .withQueryParam("code", code)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unieke identificatiecode voor de waardebon in de winkelwagen.
   */
  def cartCouponsCodeDelete(code: String): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.DELETE, baseUrl, "/cart/coupons/{code}", "application/json")
      .withPathParam("code", code)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unieke identificatiecode voor de waardebon in de winkelwagen.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def cartCouponsCodeGet(code: String, context: Option[String] = None): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.GET, baseUrl, "/cart/coupons/{code}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("code", code)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartCouponsDelete(): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.DELETE, baseUrl, "/cart/coupons", "application/json")
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def cartCouponsGet(context: Option[String] = None): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.GET, baseUrl, "/cart/coupons", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code De unieke code van de waardebon.
   * @param discountType Het type korting voor de waardebon (d.w.z. percentage of vast bedrag)
   */
  def cartCouponsPost(code: Option[String] = None, discountType: Option[String] = None): ApiRequest[CartCoupon] =
    ApiRequest[CartCoupon](ApiMethods.POST, baseUrl, "/cart/coupons", "application/json")
      .withQueryParam("code", code)
      .withQueryParam("discount_type", discountType)
      .withSuccessResponse[CartCoupon](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Any (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace Naam van de uitbreiding - dit wordt gebruikt om ervoor te zorgen dat de gegevens in de aanvraag op de juiste manier gerouteerd worden.
   * @param data Extra gegevens om aan de uitbreiding door te geven
   */
  def cartExtensionsPost(namespace: Option[String] = None, data: Option[Any] = None): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, baseUrl, "/cart/extensions", "application/json")
      .withQueryParam("namespace", namespace)
      .withQueryParam("data", data)
      .withSuccessResponse[Any](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def cartGet(context: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.GET, baseUrl, "/cart", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartItemsDelete(): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.DELETE, baseUrl, "/cart/items", "application/json")
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def cartItemsGet(context: Option[String] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.GET, baseUrl, "/cart/items", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode voor het item in de winkelwagen.
   */
  def cartItemsKeyDelete(key: String): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.DELETE, baseUrl, "/cart/items/{key}", "application/json")
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode voor het item in de winkelwagen.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def cartItemsKeyGet(key: String, context: Option[String] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.GET, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode voor het item in de winkelwagen.
   * @param extensions 
   */
  def cartItemsKeyPatch(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.PATCH, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode voor het item in de winkelwagen.
   * @param extensions 
   */
  def cartItemsKeyPost(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.POST, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode voor het item in de winkelwagen.
   * @param extensions 
   */
  def cartItemsKeyPut(key: String, extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.PUT, baseUrl, "/cart/items/{key}", "application/json")
      .withQueryParam("extensions", extensions)
      .withPathParam("key", key)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param extensions 
   */
  def cartItemsPost(extensions: Option[Any] = None): ApiRequest[CartItem] =
    ApiRequest[CartItem](ApiMethods.POST, baseUrl, "/cart/items", "application/json")
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[CartItem](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unieke identificatiecode voor de waardebon in de winkelwagen.
   */
  def cartRemoveCouponPost(code: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/remove-coupon", "application/json")
      .withQueryParam("code", code)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode (sleutel) voor het winkelwagenartikel.
   */
  def cartRemoveItemPost(key: Option[String] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/remove-item", "application/json")
      .withQueryParam("key", key)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param packageId De ID van het pakket dat wordt verzonden.
   * @param rateId De gekozen kosten ID voor het pakket.
   */
  def cartSelectShippingRatePost(packageId: String, rateId: String): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/select-shipping-rate", "application/json")
      .withQueryParam("package_id", packageId)
      .withQueryParam("rate_id", rateId)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param billingAddress Factuuradres.
   * @param shippingAddress Verzendadres.
   */
  def cartUpdateCustomerPost(billingAddress: Option[BillingAddress] = None, shippingAddress: Option[ShippingAddress] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/update-customer", "application/json")
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unieke identificatiecode (sleutel) voor het winkelwagenartikel dat moet worden geüpdatet.
   * @param quantity Nieuwe hoeveelheid van dit artikel in de winkelwagen.
   */
  def cartUpdateItemPost(key: Option[String] = None, quantity: Option[Int] = None): ApiRequest[Cart] =
    ApiRequest[Cart](ApiMethods.POST, baseUrl, "/cart/update-item", "application/json")
      .withQueryParam("key", key)
      .withQueryParam("quantity", quantity)
      .withSuccessResponse[Cart](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def checkoutGet(context: Option[String] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.GET, baseUrl, "/checkout", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Notitie toegevoegd bij de bestelling dooor de klant tijdens het afrekenen.
   * @param billingAddress Factuuradres.
   * @param shippingAddress Verzendadres.
   * @param paymentMethod De ID van de betaalmethode die wordt gebruikt om de betaling te verwerken.
   * @param createAccount Of je een nieuw gebruikersaccount aanmaakt tijdens het verwerken van de bestelling.
   * @param extensions 
   */
  def checkoutPatch(customerNote: Option[String] = None, billingAddress: Option[BillingAddress3] = None, shippingAddress: Option[ShippingAddress3] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.PATCH, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Notitie toegevoegd bij de bestelling dooor de klant tijdens het afrekenen.
   * @param billingAddress Factuuradres.
   * @param shippingAddress Verzendadres.
   * @param paymentMethod De ID van de betaalmethode die wordt gebruikt om de betaling te verwerken.
   * @param createAccount Of je een nieuw gebruikersaccount aanmaakt tijdens het verwerken van de bestelling.
   * @param extensions 
   */
  def checkoutPost(customerNote: Option[String] = None, billingAddress: Option[BillingAddress2] = None, shippingAddress: Option[ShippingAddress2] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.POST, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Notitie toegevoegd bij de bestelling dooor de klant tijdens het afrekenen.
   * @param billingAddress Factuuradres.
   * @param shippingAddress Verzendadres.
   * @param paymentMethod De ID van de betaalmethode die wordt gebruikt om de betaling te verwerken.
   * @param createAccount Of je een nieuw gebruikersaccount aanmaakt tijdens het verwerken van de bestelling.
   * @param extensions 
   */
  def checkoutPut(customerNote: Option[String] = None, billingAddress: Option[BillingAddress1] = None, shippingAddress: Option[ShippingAddress1] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None): ApiRequest[Checkout] =
    ApiRequest[Checkout](ApiMethods.PUT, baseUrl, "/checkout", "application/json")
      .withQueryParam("customer_note", customerNote)
      .withQueryParam("billing_address", billingAddress)
      .withQueryParam("shipping_address", shippingAddress)
      .withQueryParam("payment_method", paymentMethod)
      .withQueryParam("create_account", createAccount)
      .withQueryParam("extensions", extensions)
      .withSuccessResponse[Checkout](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param attributeId Unieke identificatiecode voor het attribuut.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param search Beperk de resultaten tot resultaten die overeenkomen met een string.
   * @param exclude Zorg ervoor dat de resultaten specifieke ID's niet bevatten.
   * @param include Beperk resultaten tot specifieke id's.
   * @param order Oplopend of aflopend sorteren.
   * @param orderby Sorteren op trefwoordeigenschap.
   * @param hideEmpty Indien waar worden lege trefwoorden niet aangegeven.
   */
  def productsAttributesAttributeIdTermsGet(attributeId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[Term] =
    ApiRequest[Term](ApiMethods.GET, baseUrl, "/products/attributes/{attribute_id}/terms", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withPathParam("attribute_id", attributeId)
      .withSuccessResponse[Term](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def productsAttributesGet(context: Option[String] = None): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.GET, baseUrl, "/products/attributes", "application/json")
      .withQueryParam("context", context)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unieke identificatie voor de gegevensbron.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def productsAttributesIdGet(id: Int, context: Option[String] = None): ApiRequest[ProductAttribute] =
    ApiRequest[ProductAttribute](ApiMethods.GET, baseUrl, "/products/attributes/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductAttribute](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCategory (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param search Beperk de resultaten tot resultaten die overeenkomen met een string.
   * @param exclude Zorg ervoor dat de resultaten specifieke ID's niet bevatten.
   * @param include Beperk resultaten tot specifieke id's.
   * @param order Oplopend of aflopend sorteren.
   * @param orderby Sorteren op trefwoordeigenschap.
   * @param hideEmpty Indien waar worden lege trefwoorden niet aangegeven.
   */
  def productsCategoriesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[ProductCategory] =
    ApiRequest[ProductCategory](ApiMethods.GET, baseUrl, "/products/categories", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withSuccessResponse[ProductCategory](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCategory (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unieke identificatie voor de gegevensbron.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def productsCategoriesIdGet(id: Int, context: Option[String] = None): ApiRequest[ProductCategory] =
    ApiRequest[ProductCategory](ApiMethods.GET, baseUrl, "/products/categories/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[ProductCategory](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductCollectionData (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param search Beperk de resultaten tot resultaten die overeenkomen met een string.
   * @param after Beperk de respons op bronnen die zijn gemaakt na een bepaalde ISO8601 nalevingsdatum.
   * @param before Beperk de respons op bronnen die zijn gemaakt vóór een bepaalde ISO8601 nalevingsdatum.
   * @param dateColumn Wanneer een reactie wordt beperkt met na/voor, de datumkolom waarmee dit vergeleken moet worden.
   * @param exclude Zorg ervoor dat de resultaten specifieke ID's niet bevatten.
   * @param include Beperk resultaten tot specifieke id's.
   * @param offset Bepaal het resultaat door een specifiek aantal items in te stellen.
   * @param order Sorteer attribuut oplopend of aflopend.
   * @param orderby Sorteer collectie per object eigenschap.
   * @param parent Resultaten beperken tot die van specifieke hoofd ID's.
   * @param parentExclude Resultaten beperken tot alle items behalve die met een bepaalde parent ID.
   * @param `type` Beperk resultaten tot producten met een specifieke type.
   * @param sku Beperk resultaten tot producten uit een of meerdere specifieke artikelnummers. Gebruik komma's als scheidingsteken.
   * @param featured Beperk resultaten tot uitgelichte producten.
   * @param category Beperk resultaten tot producten toegewezen aan een categorie.
   * @param categoryOperator Operator om productcategorie termen te vergelijken.
   * @param tag Beperk resultaten tot producten met een specifieke toegewezen tag-ID.
   * @param tagOperator Operator vergelijkt producttags.
   * @param onSale Beperk resultaten met producten in de aanbieding.
   * @param minPrice Resultaatset beperken tot producten op basis van een minimumprijs, aangegeven met de kleinste valuta-eenheid.
   * @param maxPrice Resultaatset beperken tot producten op basis van een maximumprijs, aangegeven met de kleinste valuta-eenheid.
   * @param stockStatus Beperk resultaten tot producten met een specifieke voorraadstatus.
   * @param attributes Beperk resultaten tot producten met bepaalde algemene eigenschappen.
   * @param attributeRelation Het logische verband tussen eigenschappen wanneer op meerdere tegelijk wordt gefilterd.
   * @param catalogVisibility Bepaald of verborgen of zichtbare producten worden weergegeven.
   * @param rating Beperk resultaten tot producten met een bepaalde gemiddelde waardering.
   * @param calculatePriceRange Indien waar worden de minimum- en maximumproductprijzen berekend voor de collectie.
   * @param calculateStockStatusCounts Indien ingeschakeld, bereken je de voorraadtellingen voor producten in de collectie.
   * @param calculateAttributeCounts Indien aangevraagd, wordt het aantal attribuut term berekend voor producten in de collectie.
   * @param calculateRatingCounts Indien waar wordt het aantal waarderingen berekend voor producten in de collectie.
   */
  def productsCollectionDataGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int], calculatePriceRange: Option[Boolean] = None, calculateStockStatusCounts: Option[Boolean] = None, calculateAttributeCounts: Seq[CalculateAttributeCounts], calculateRatingCounts: Option[Boolean] = None): ApiRequest[ProductCollectionData] =
    ApiRequest[ProductCollectionData](ApiMethods.GET, baseUrl, "/products/collection-data", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("date_column", dateColumn)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("type", `type`)
      .withQueryParam("sku", sku)
      .withQueryParam("featured", featured)
      .withQueryParam("category", category)
      .withQueryParam("category_operator", categoryOperator)
      .withQueryParam("tag", tag)
      .withQueryParam("tag_operator", tagOperator)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", ArrayValues(stockStatus, MULTI))
      .withQueryParam("attributes", ArrayValues(attributes, MULTI))
      .withQueryParam("attribute_relation", attributeRelation)
      .withQueryParam("catalog_visibility", catalogVisibility)
      .withQueryParam("rating", ArrayValues(rating, MULTI))
      .withQueryParam("calculate_price_range", calculatePriceRange)
      .withQueryParam("calculate_stock_status_counts", calculateStockStatusCounts)
      .withQueryParam("calculate_attribute_counts", ArrayValues(calculateAttributeCounts, MULTI))
      .withQueryParam("calculate_rating_counts", calculateRatingCounts)
      .withSuccessResponse[ProductCollectionData](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param search Beperk de resultaten tot resultaten die overeenkomen met een string.
   * @param after Beperk de respons op bronnen die zijn gemaakt na een bepaalde ISO8601 nalevingsdatum.
   * @param before Beperk de respons op bronnen die zijn gemaakt vóór een bepaalde ISO8601 nalevingsdatum.
   * @param dateColumn Wanneer een reactie wordt beperkt met na/voor, de datumkolom waarmee dit vergeleken moet worden.
   * @param exclude Zorg ervoor dat de resultaten specifieke ID's niet bevatten.
   * @param include Beperk resultaten tot specifieke id's.
   * @param offset Bepaal het resultaat door een specifiek aantal items in te stellen.
   * @param order Sorteer attribuut oplopend of aflopend.
   * @param orderby Sorteer collectie per object eigenschap.
   * @param parent Resultaten beperken tot die van specifieke hoofd ID's.
   * @param parentExclude Resultaten beperken tot alle items behalve die met een bepaalde parent ID.
   * @param `type` Beperk resultaten tot producten met een specifieke type.
   * @param sku Beperk resultaten tot producten uit een of meerdere specifieke artikelnummers. Gebruik komma's als scheidingsteken.
   * @param featured Beperk resultaten tot uitgelichte producten.
   * @param category Beperk resultaten tot producten toegewezen aan een categorie.
   * @param categoryOperator Operator om productcategorie termen te vergelijken.
   * @param tag Beperk resultaten tot producten met een specifieke toegewezen tag-ID.
   * @param tagOperator Operator vergelijkt producttags.
   * @param onSale Beperk resultaten met producten in de aanbieding.
   * @param minPrice Resultaatset beperken tot producten op basis van een minimumprijs, aangegeven met de kleinste valuta-eenheid.
   * @param maxPrice Resultaatset beperken tot producten op basis van een maximumprijs, aangegeven met de kleinste valuta-eenheid.
   * @param stockStatus Beperk resultaten tot producten met een specifieke voorraadstatus.
   * @param attributes Beperk resultaten tot producten met bepaalde algemene eigenschappen.
   * @param attributeRelation Het logische verband tussen eigenschappen wanneer op meerdere tegelijk wordt gefilterd.
   * @param catalogVisibility Bepaald of verborgen of zichtbare producten worden weergegeven.
   * @param rating Beperk resultaten tot producten met een bepaalde gemiddelde waardering.
   */
  def productsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int]): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.GET, baseUrl, "/products", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("after", after)
      .withQueryParam("before", before)
      .withQueryParam("date_column", dateColumn)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("parent", ArrayValues(parent, MULTI))
      .withQueryParam("parent_exclude", ArrayValues(parentExclude, MULTI))
      .withQueryParam("type", `type`)
      .withQueryParam("sku", sku)
      .withQueryParam("featured", featured)
      .withQueryParam("category", category)
      .withQueryParam("category_operator", categoryOperator)
      .withQueryParam("tag", tag)
      .withQueryParam("tag_operator", tagOperator)
      .withQueryParam("on_sale", onSale)
      .withQueryParam("min_price", minPrice)
      .withQueryParam("max_price", maxPrice)
      .withQueryParam("stock_status", ArrayValues(stockStatus, MULTI))
      .withQueryParam("attributes", ArrayValues(attributes, MULTI))
      .withQueryParam("attribute_relation", attributeRelation)
      .withQueryParam("catalog_visibility", catalogVisibility)
      .withQueryParam("rating", ArrayValues(rating, MULTI))
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unieke identificatie voor de gegevensbron.
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   */
  def productsIdGet(id: Int, context: Option[String] = None): ApiRequest[Product] =
    ApiRequest[Product](ApiMethods.GET, baseUrl, "/products/{id}", "application/json")
      .withQueryParam("context", context)
      .withPathParam("id", id)
      .withSuccessResponse[Product](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param offset Bepaal het resultaat door een specifiek aantal items in te stellen.
   * @param order Sorteer attribuut oplopend of aflopend.
   * @param orderby Sorteer collectie per object eigenschap.
   * @param categoryId Beperk resultaten tot beoordelingen van specifieke categorie ID's.
   * @param productId Beperk resultaten tot beoordelingen van specifieke product-ID's.
   */
  def productsReviewsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, categoryId: Option[String] = None, productId: Option[String] = None): ApiRequest[ProductReview] =
    ApiRequest[ProductReview](ApiMethods.GET, baseUrl, "/products/reviews", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("offset", offset)
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("category_id", categoryId)
      .withQueryParam("product_id", productId)
      .withSuccessResponse[ProductReview](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Toepassingsgebied waaronder de aanvraag wordt ingediend; bepaalt de velden die aanwezig zijn in de reactie.
   * @param page Huidige pagina van de collectie.
   * @param perPage Maximumaantal artikelen dat moet worden aangegeven in resultaat set. Heeft standaard geen limiet indien leeg gelaten.
   * @param search Beperk de resultaten tot resultaten die overeenkomen met een string.
   * @param exclude Zorg ervoor dat de resultaten specifieke ID's niet bevatten.
   * @param include Beperk resultaten tot specifieke id's.
   * @param order Oplopend of aflopend sorteren.
   * @param orderby Sorteren op trefwoordeigenschap.
   * @param hideEmpty Indien waar worden lege trefwoorden niet aangegeven.
   */
  def productsTagsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None): ApiRequest[Term] =
    ApiRequest[Term](ApiMethods.GET, baseUrl, "/products/tags", "application/json")
      .withQueryParam("context", context)
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("search", search)
      .withQueryParam("exclude", ArrayValues(exclude, MULTI))
      .withQueryParam("include", ArrayValues(include, MULTI))
      .withQueryParam("order", order)
      .withQueryParam("orderby", orderby)
      .withQueryParam("hide_empty", hideEmpty)
      .withSuccessResponse[Term](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace 
   * @param context 
   */
  def rootGet(namespace: Option[String] = None, context: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/", "application/json")
      .withQueryParam("namespace", namespace)
      .withQueryParam("context", context)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      



}

