/**
 * wc/v3
 * OpenAPI documented, based on generated OpenAPI document of the namespace wc/v3 with some manual fixes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.woocommerce.akkaclient.api

import org.woocommerce.akkaclient.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(Batch1Enums.DiscountType) :+
    new EnumNameSerializer(Batch13Enums.`Type`) :+
    new EnumNameSerializer(Batch13Enums.OrderBy) :+
    new EnumNameSerializer(Batch14Enums.`Type`) :+
    new EnumNameSerializer(Batch14Enums.OrderBy) :+
    new EnumNameSerializer(Batch15Enums.`Type`) :+
    new EnumNameSerializer(Batch15Enums.OrderBy) :+
    new EnumNameSerializer(Batch16Enums.Display) :+
    new EnumNameSerializer(Batch17Enums.Display) :+
    new EnumNameSerializer(Batch18Enums.Display) :+
    new EnumNameSerializer(Batch19Enums.Status) :+
    new EnumNameSerializer(Batch2Enums.DiscountType) :+
    new EnumNameSerializer(Batch20Enums.Status) :+
    new EnumNameSerializer(Batch21Enums.Status) :+
    new EnumNameSerializer(Batch28Enums.`Type`) :+
    new EnumNameSerializer(Batch28Enums.Status) :+
    new EnumNameSerializer(Batch28Enums.CatalogVisibility) :+
    new EnumNameSerializer(Batch28Enums.TaxStatus) :+
    new EnumNameSerializer(Batch28Enums.StockStatus) :+
    new EnumNameSerializer(Batch28Enums.Backorders) :+
    new EnumNameSerializer(Batch29Enums.`Type`) :+
    new EnumNameSerializer(Batch29Enums.Status) :+
    new EnumNameSerializer(Batch29Enums.CatalogVisibility) :+
    new EnumNameSerializer(Batch29Enums.TaxStatus) :+
    new EnumNameSerializer(Batch29Enums.StockStatus) :+
    new EnumNameSerializer(Batch29Enums.Backorders) :+
    new EnumNameSerializer(Batch3Enums.DiscountType) :+
    new EnumNameSerializer(Batch30Enums.`Type`) :+
    new EnumNameSerializer(Batch30Enums.Status) :+
    new EnumNameSerializer(Batch30Enums.CatalogVisibility) :+
    new EnumNameSerializer(Batch30Enums.TaxStatus) :+
    new EnumNameSerializer(Batch30Enums.StockStatus) :+
    new EnumNameSerializer(Batch30Enums.Backorders) :+
    new EnumNameSerializer(Batch31Enums.Status) :+
    new EnumNameSerializer(Batch31Enums.TaxStatus) :+
    new EnumNameSerializer(Batch31Enums.StockStatus) :+
    new EnumNameSerializer(Batch31Enums.Backorders) :+
    new EnumNameSerializer(Batch32Enums.Status) :+
    new EnumNameSerializer(Batch32Enums.TaxStatus) :+
    new EnumNameSerializer(Batch32Enums.StockStatus) :+
    new EnumNameSerializer(Batch32Enums.Backorders) :+
    new EnumNameSerializer(Batch33Enums.Status) :+
    new EnumNameSerializer(Batch33Enums.TaxStatus) :+
    new EnumNameSerializer(Batch33Enums.StockStatus) :+
    new EnumNameSerializer(Batch33Enums.Backorders) :+
    new EnumNameSerializer(Batch34Enums.`Class`) :+
    new EnumNameSerializer(Batch35Enums.`Class`) :+
    new EnumNameSerializer(Batch36Enums.`Class`) :+
    new EnumNameSerializer(Batch37Enums.Status) :+
    new EnumNameSerializer(Batch38Enums.Status) :+
    new EnumNameSerializer(Batch39Enums.Status) :+
    new EnumNameSerializer(Batch7Enums.Status) :+
    new EnumNameSerializer(Batch7Enums.Currency) :+
    new EnumNameSerializer(Batch8Enums.Status) :+
    new EnumNameSerializer(Batch8Enums.Currency) :+
    new EnumNameSerializer(Batch9Enums.Status) :+
    new EnumNameSerializer(Batch9Enums.Currency) :+
    new EnumNameSerializer(OrdersFeeLinesEnums.TaxStatus) :+
    new EnumNameSerializer(PaymentGatewaysIdSettingsEnums.`Type`) :+
    new EnumNameSerializer(ProductEnums.`Type`) :+
    new EnumNameSerializer(ProductEnums.Status) :+
    new EnumNameSerializer(ProductEnums.CatalogVisibility) :+
    new EnumNameSerializer(ProductEnums.TaxStatus) :+
    new EnumNameSerializer(ProductEnums.StockStatus) :+
    new EnumNameSerializer(ProductEnums.Backorders) :+
    new EnumNameSerializer(Product1Enums.`Type`) :+
    new EnumNameSerializer(Product1Enums.Status) :+
    new EnumNameSerializer(Product1Enums.CatalogVisibility) :+
    new EnumNameSerializer(Product1Enums.TaxStatus) :+
    new EnumNameSerializer(Product1Enums.StockStatus) :+
    new EnumNameSerializer(Product1Enums.Backorders) :+
    new EnumNameSerializer(Product2Enums.`Type`) :+
    new EnumNameSerializer(Product2Enums.Status) :+
    new EnumNameSerializer(Product2Enums.CatalogVisibility) :+
    new EnumNameSerializer(Product2Enums.TaxStatus) :+
    new EnumNameSerializer(Product2Enums.StockStatus) :+
    new EnumNameSerializer(Product2Enums.Backorders) :+
    new EnumNameSerializer(Product3Enums.`Type`) :+
    new EnumNameSerializer(Product3Enums.Status) :+
    new EnumNameSerializer(Product3Enums.CatalogVisibility) :+
    new EnumNameSerializer(Product3Enums.TaxStatus) :+
    new EnumNameSerializer(Product3Enums.StockStatus) :+
    new EnumNameSerializer(Product3Enums.Backorders) :+
    new EnumNameSerializer(Product4Enums.`Type`) :+
    new EnumNameSerializer(Product4Enums.Status) :+
    new EnumNameSerializer(Product4Enums.CatalogVisibility) :+
    new EnumNameSerializer(Product4Enums.TaxStatus) :+
    new EnumNameSerializer(Product4Enums.StockStatus) :+
    new EnumNameSerializer(Product4Enums.Backorders) :+
    new EnumNameSerializer(ProductAttributeEnums.`Type`) :+
    new EnumNameSerializer(ProductAttributeEnums.OrderBy) :+
    new EnumNameSerializer(ProductAttribute1Enums.`Type`) :+
    new EnumNameSerializer(ProductAttribute1Enums.OrderBy) :+
    new EnumNameSerializer(ProductAttribute2Enums.`Type`) :+
    new EnumNameSerializer(ProductAttribute2Enums.OrderBy) :+
    new EnumNameSerializer(ProductAttribute3Enums.`Type`) :+
    new EnumNameSerializer(ProductAttribute3Enums.OrderBy) :+
    new EnumNameSerializer(ProductAttribute4Enums.`Type`) :+
    new EnumNameSerializer(ProductAttribute4Enums.OrderBy) :+
    new EnumNameSerializer(ProductCatEnums.Display) :+
    new EnumNameSerializer(ProductCat1Enums.Display) :+
    new EnumNameSerializer(ProductCat2Enums.Display) :+
    new EnumNameSerializer(ProductCat3Enums.Display) :+
    new EnumNameSerializer(ProductCat4Enums.Display) :+
    new EnumNameSerializer(ProductReviewEnums.Status) :+
    new EnumNameSerializer(ProductReview1Enums.Status) :+
    new EnumNameSerializer(ProductReview2Enums.Status) :+
    new EnumNameSerializer(ProductReview3Enums.Status) :+
    new EnumNameSerializer(ProductReview4Enums.Status) :+
    new EnumNameSerializer(ProductVariationEnums.Status) :+
    new EnumNameSerializer(ProductVariationEnums.TaxStatus) :+
    new EnumNameSerializer(ProductVariationEnums.StockStatus) :+
    new EnumNameSerializer(ProductVariationEnums.Backorders) :+
    new EnumNameSerializer(ProductVariation1Enums.Status) :+
    new EnumNameSerializer(ProductVariation1Enums.TaxStatus) :+
    new EnumNameSerializer(ProductVariation1Enums.StockStatus) :+
    new EnumNameSerializer(ProductVariation1Enums.Backorders) :+
    new EnumNameSerializer(ProductVariation2Enums.Status) :+
    new EnumNameSerializer(ProductVariation2Enums.TaxStatus) :+
    new EnumNameSerializer(ProductVariation2Enums.StockStatus) :+
    new EnumNameSerializer(ProductVariation2Enums.Backorders) :+
    new EnumNameSerializer(ProductVariation3Enums.Status) :+
    new EnumNameSerializer(ProductVariation3Enums.TaxStatus) :+
    new EnumNameSerializer(ProductVariation3Enums.StockStatus) :+
    new EnumNameSerializer(ProductVariation3Enums.Backorders) :+
    new EnumNameSerializer(ProductVariation4Enums.Status) :+
    new EnumNameSerializer(ProductVariation4Enums.TaxStatus) :+
    new EnumNameSerializer(ProductVariation4Enums.StockStatus) :+
    new EnumNameSerializer(ProductVariation4Enums.Backorders) :+
    new EnumNameSerializer(SettingEnums.`Type`) :+
    new EnumNameSerializer(ShippingZoneLocationEnums.`Type`) :+
    new EnumNameSerializer(ShippingZoneLocation1Enums.`Type`) :+
    new EnumNameSerializer(ShippingZoneLocation2Enums.`Type`) :+
    new EnumNameSerializer(ShippingZoneLocation3Enums.`Type`) :+
    new EnumNameSerializer(ShippingZonesZoneIdMethodsSettingsEnums.`Type`) :+
    new EnumNameSerializer(ShopCouponEnums.DiscountType) :+
    new EnumNameSerializer(ShopCoupon1Enums.DiscountType) :+
    new EnumNameSerializer(ShopCoupon2Enums.DiscountType) :+
    new EnumNameSerializer(ShopCoupon3Enums.DiscountType) :+
    new EnumNameSerializer(ShopCoupon4Enums.DiscountType) :+
    new EnumNameSerializer(ShopOrderEnums.Status) :+
    new EnumNameSerializer(ShopOrderEnums.Currency) :+
    new EnumNameSerializer(ShopOrder1Enums.Status) :+
    new EnumNameSerializer(ShopOrder1Enums.Currency) :+
    new EnumNameSerializer(ShopOrder2Enums.Status) :+
    new EnumNameSerializer(ShopOrder2Enums.Currency) :+
    new EnumNameSerializer(ShopOrder3Enums.Status) :+
    new EnumNameSerializer(ShopOrder3Enums.Currency) :+
    new EnumNameSerializer(ShopOrder4Enums.Status) :+
    new EnumNameSerializer(ShopOrder4Enums.Currency) :+
    new EnumNameSerializer(TaxEnums.`Class`) :+
    new EnumNameSerializer(Tax1Enums.`Class`) :+
    new EnumNameSerializer(Tax2Enums.`Class`) :+
    new EnumNameSerializer(Tax3Enums.`Class`) :+
    new EnumNameSerializer(Tax4Enums.`Class`) :+
    new EnumNameSerializer(WebhookEnums.Status) :+
    new EnumNameSerializer(Webhook1Enums.Status) :+
    new EnumNameSerializer(Webhook2Enums.Status) :+
    new EnumNameSerializer(Webhook3Enums.Status) :+
    new EnumNameSerializer(Webhook4Enums.Status)

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E)
    extends Serializer[E#Value] {
    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
