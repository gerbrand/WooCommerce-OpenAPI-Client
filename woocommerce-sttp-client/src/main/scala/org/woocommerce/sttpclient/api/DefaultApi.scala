/**
 * wc/store
 * OpenAPI document of the namespace wc/store. Based on generated json document, with some changes and additions
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.woocommerce.sttpclient.api

import org.woocommerce.sttpclient.model.Attributes
import org.woocommerce.sttpclient.model.BillingAddress
import org.woocommerce.sttpclient.model.BillingAddress1
import org.woocommerce.sttpclient.model.BillingAddress2
import org.woocommerce.sttpclient.model.BillingAddress3
import org.woocommerce.sttpclient.model.CalculateAttributeCounts
import org.woocommerce.sttpclient.model.Cart
import org.woocommerce.sttpclient.model.CartCoupon
import org.woocommerce.sttpclient.model.CartItem
import org.woocommerce.sttpclient.model.Checkout
import java.time.OffsetDateTime
import org.woocommerce.sttpclient.model.Product
import org.woocommerce.sttpclient.model.ProductAttribute
import org.woocommerce.sttpclient.model.ProductCategory
import org.woocommerce.sttpclient.model.ProductCollectionData
import org.woocommerce.sttpclient.model.ProductReview
import org.woocommerce.sttpclient.model.Requests
import org.woocommerce.sttpclient.model.ShippingAddress
import org.woocommerce.sttpclient.model.ShippingAddress1
import org.woocommerce.sttpclient.model.ShippingAddress2
import org.woocommerce.sttpclient.model.ShippingAddress3
import org.woocommerce.sttpclient.model.Term
import org.woocommerce.sttpclient.model.Variation
import org.woocommerce.sttpclient.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object DefaultApi {

def apply(baseUrl: String = "https://www.software-creation.nl/wp-json/wc/v3") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 401 :  (Invalid username or password)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product 
   */
  def addProduct(username: String, password: String)(product: Option[Product] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products")
      .contentType("application/json")
      .auth.basic(username, password)
      .body(product)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param requests 
   * @param validation 
   */
  def batchPost(requests: Seq[Requests], validation: Option[String] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/batch?validation=${ validation }&requests=${ requests }")
      .contentType("application/json")
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id The cart item product or variation ID.
   * @param quantity Quantity of this item in the cart.
   * @param variation Chosen attributes (for variations).
   */
  def cartAddItemPost(id: Option[Int] = None, quantity: Option[Int] = None, variation: Seq[Variation]
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/add-item?id=${ id }&quantity=${ quantity }&variation=${ variation }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartApplyCouponPost(code: Option[String] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/apply-coupon?code=${ code }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartCouponsCodeDelete(code: String
): Request[Either[ResponseError[Exception], CartCoupon], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/cart/coupons/${code}")
      .contentType("application/json")
      .response(asJson[CartCoupon])

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartCouponsCodeGet(code: String, context: Option[String] = None
): Request[Either[ResponseError[Exception], CartCoupon], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/cart/coupons/${code}?context=${ context }")
      .contentType("application/json")
      .response(asJson[CartCoupon])

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartCouponsDelete(
): Request[Either[ResponseError[Exception], CartCoupon], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/cart/coupons")
      .contentType("application/json")
      .response(asJson[CartCoupon])

  /**
   * Expected answers:
   *   code 200 : Seq[CartCoupon] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartCouponsGet(context: Option[String] = None
): Request[Either[ResponseError[Exception], Seq[CartCoupon]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/cart/coupons?context=${ context }")
      .contentType("application/json")
      .response(asJson[Seq[CartCoupon]])

  /**
   * Expected answers:
   *   code 200 : CartCoupon (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code The coupon's unique code.
   * @param discountType The discount type for the coupon (e.g. percentage or fixed amount)
   */
  def cartCouponsPost(code: Option[String] = None, discountType: Option[String] = None
): Request[Either[ResponseError[Exception], CartCoupon], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/coupons?code=${ code }&discount_type=${ discountType }")
      .contentType("application/json")
      .response(asJson[CartCoupon])

  /**
   * Expected answers:
   *   code 200 : Any (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace Extension's name - this will be used to ensure the data in the request is routed appropriately.
   * @param data Additional data to pass to the extension
   */
  def cartExtensionsPost(namespace: Option[String] = None, data: Option[Any] = None
): Request[Either[ResponseError[Exception], Any], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/extensions?namespace=${ namespace }&data=${ data }")
      .contentType("application/json")
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartGet(context: Option[String] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/cart?context=${ context }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   */
  def cartItemsDelete(
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/cart/items")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : Seq[CartItem] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartItemsGet(context: Option[String] = None
): Request[Either[ResponseError[Exception], Seq[CartItem]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/cart/items?context=${ context }")
      .contentType("application/json")
      .response(asJson[Seq[CartItem]])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   */
  def cartItemsKeyDelete(key: String
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/cart/items/${key}")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def cartItemsKeyGet(key: String, context: Option[String] = None
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/cart/items/${key}?context=${ context }")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPatch(key: String, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/cart/items/${key}?extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPost(key: String, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/items/${key}?extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier for the item within the cart.
   * @param extensions 
   */
  def cartItemsKeyPut(key: String, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/cart/items/${key}?extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : CartItem (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param extensions 
   */
  def cartItemsPost(extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], CartItem], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/items?extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[CartItem])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param code Unique identifier for the coupon within the cart.
   */
  def cartRemoveCouponPost(code: Option[String] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/remove-coupon?code=${ code }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier (key) for the cart item.
   */
  def cartRemoveItemPost(key: Option[String] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/remove-item?key=${ key }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param packageId The ID of the package being shipped.
   * @param rateId The chosen rate ID for the package.
   */
  def cartSelectShippingRatePost(packageId: String, rateId: String
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/select-shipping-rate?package_id=${ packageId }&rate_id=${ rateId }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   */
  def cartUpdateCustomerPost(billingAddress: Option[BillingAddress] = None, shippingAddress: Option[ShippingAddress] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/update-customer?billing_address=${ billingAddress }&shipping_address=${ shippingAddress }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Cart (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param key Unique identifier (key) for the cart item to update.
   * @param quantity New quantity of the item in the cart.
   */
  def cartUpdateItemPost(key: Option[String] = None, quantity: Option[Int] = None
): Request[Either[ResponseError[Exception], Cart], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/cart/update-item?key=${ key }&quantity=${ quantity }")
      .contentType("application/json")
      .response(asJson[Cart])

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def checkoutGet(context: Option[String] = None
): Request[Either[ResponseError[Exception], Checkout], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/checkout?context=${ context }")
      .contentType("application/json")
      .response(asJson[Checkout])

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPatch(customerNote: Option[String] = None, billingAddress: Option[BillingAddress3] = None, shippingAddress: Option[ShippingAddress3] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], Checkout], Nothing] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/checkout?customer_note=${ customerNote }&billing_address=${ billingAddress }&shipping_address=${ shippingAddress }&payment_method=${ paymentMethod }&create_account=${ createAccount }&extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[Checkout])

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPost(customerNote: Option[String] = None, billingAddress: Option[BillingAddress2] = None, shippingAddress: Option[ShippingAddress2] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], Checkout], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/checkout?customer_note=${ customerNote }&billing_address=${ billingAddress }&shipping_address=${ shippingAddress }&payment_method=${ paymentMethod }&create_account=${ createAccount }&extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[Checkout])

  /**
   * Expected answers:
   *   code 200 : Checkout (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param customerNote Note added to the order by the customer during checkout.
   * @param billingAddress Billing address.
   * @param shippingAddress Shipping address.
   * @param paymentMethod The ID of the payment method being used to process the payment.
   * @param createAccount Whether to create a new user account as part of order processing.
   * @param extensions 
   */
  def checkoutPut(customerNote: Option[String] = None, billingAddress: Option[BillingAddress1] = None, shippingAddress: Option[ShippingAddress1] = None, paymentMethod: Option[String] = None, createAccount: Option[Boolean] = None, extensions: Option[Any] = None
): Request[Either[ResponseError[Exception], Checkout], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/checkout?customer_note=${ customerNote }&billing_address=${ billingAddress }&shipping_address=${ shippingAddress }&payment_method=${ paymentMethod }&create_account=${ createAccount }&extensions=${ extensions }")
      .contentType("application/json")
      .response(asJson[Checkout])

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param attributeId Unique identifier for the attribute.
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsAttributesAttributeIdTermsGet(attributeId: Int, context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None
): Request[Either[ResponseError[Exception], Term], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/attributes/${attributeId}/terms?context=${ context }&page=${ page }&per_page=${ perPage }&search=${ search }&exclude=${ exclude }&include=${ include }&order=${ order }&orderby=${ orderby }&hide_empty=${ hideEmpty }")
      .contentType("application/json")
      .response(asJson[Term])

  /**
   * Expected answers:
   *   code 200 : Seq[ProductAttribute] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesGet(context: Option[String] = None
): Request[Either[ResponseError[Exception], Seq[ProductAttribute]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/attributes?context=${ context }")
      .contentType("application/json")
      .response(asJson[Seq[ProductAttribute]])

  /**
   * Expected answers:
   *   code 200 : ProductAttribute (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsAttributesIdGet(id: Int, context: Option[String] = None
): Request[Either[ResponseError[Exception], ProductAttribute], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/attributes/${id}?context=${ context }")
      .contentType("application/json")
      .response(asJson[ProductAttribute])

  /**
   * Expected answers:
   *   code 200 : Seq[ProductCategory] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsCategoriesGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None
): Request[Either[ResponseError[Exception], Seq[ProductCategory]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/categories?context=${ context }&page=${ page }&per_page=${ perPage }&search=${ search }&exclude=${ exclude }&include=${ include }&order=${ order }&orderby=${ orderby }&hide_empty=${ hideEmpty }")
      .contentType("application/json")
      .response(asJson[Seq[ProductCategory]])

  /**
   * Expected answers:
   *   code 200 : ProductCategory (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsCategoriesIdGet(id: Int, context: Option[String] = None
): Request[Either[ResponseError[Exception], ProductCategory], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/categories/${id}?context=${ context }")
      .contentType("application/json")
      .response(asJson[ProductCategory])

  /**
   * Expected answers:
   *   code 200 : ProductCollectionData (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources created after a given ISO8601 compliant date.
   * @param before Limit response to resources created before a given ISO8601 compliant date.
   * @param dateColumn When limiting response using after/before, which date column to compare against.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param `type` Limit result set to products assigned a specific type.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param featured Limit result set to featured products.
   * @param category Limit result set to products assigned a specific category ID.
   * @param categoryOperator Operator to compare product category terms.
   * @param tag Limit result set to products assigned a specific tag ID.
   * @param tagOperator Operator to compare product tags.
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price, provided using the smallest unit of the currency.
   * @param maxPrice Limit result set to products based on a maximum price, provided using the smallest unit of the currency.
   * @param stockStatus Limit result set to products with specified stock status.
   * @param attributes Limit result set to products with selected global attributes.
   * @param attributeRelation The logical relationship between attributes when filtering across multiple at once.
   * @param catalogVisibility Determines if hidden or visible catalog products are shown.
   * @param rating Limit result set to products with a certain average rating.
   * @param calculatePriceRange If true, calculates the minimum and maximum product prices for the collection.
   * @param calculateStockStatusCounts If true, calculates stock counts for products in the collection.
   * @param calculateAttributeCounts If requested, calculates attribute term counts for products in the collection.
   * @param calculateRatingCounts If true, calculates rating counts for products in the collection.
   */
  def productsCollectionDataGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int], calculatePriceRange: Option[Boolean] = None, calculateStockStatusCounts: Option[Boolean] = None, calculateAttributeCounts: Seq[CalculateAttributeCounts], calculateRatingCounts: Option[Boolean] = None
): Request[Either[ResponseError[Exception], ProductCollectionData], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/collection-data?context=${ context }&page=${ page }&per_page=${ perPage }&search=${ search }&after=${ after }&before=${ before }&date_column=${ dateColumn }&exclude=${ exclude }&include=${ include }&offset=${ offset }&order=${ order }&orderby=${ orderby }&parent=${ parent }&parent_exclude=${ parentExclude }&type=${ `type` }&sku=${ sku }&featured=${ featured }&category=${ category }&category_operator=${ categoryOperator }&tag=${ tag }&tag_operator=${ tagOperator }&on_sale=${ onSale }&min_price=${ minPrice }&max_price=${ maxPrice }&stock_status=${ stockStatus }&attributes=${ attributes }&attribute_relation=${ attributeRelation }&catalog_visibility=${ catalogVisibility }&rating=${ rating }&calculate_price_range=${ calculatePriceRange }&calculate_stock_status_counts=${ calculateStockStatusCounts }&calculate_attribute_counts=${ calculateAttributeCounts }&calculate_rating_counts=${ calculateRatingCounts }")
      .contentType("application/json")
      .response(asJson[ProductCollectionData])

  /**
   * Expected answers:
   *   code 200 : Seq[Product] (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param after Limit response to resources created after a given ISO8601 compliant date.
   * @param before Limit response to resources created before a given ISO8601 compliant date.
   * @param dateColumn When limiting response using after/before, which date column to compare against.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param parent Limit result set to those of particular parent IDs.
   * @param parentExclude Limit result set to all items except those of a particular parent ID.
   * @param `type` Limit result set to products assigned a specific type.
   * @param sku Limit result set to products with specific SKU(s). Use commas to separate.
   * @param featured Limit result set to featured products.
   * @param category Limit result set to products assigned a specific category ID.
   * @param categoryOperator Operator to compare product category terms.
   * @param tag Limit result set to products assigned a specific tag ID.
   * @param tagOperator Operator to compare product tags.
   * @param onSale Limit result set to products on sale.
   * @param minPrice Limit result set to products based on a minimum price, provided using the smallest unit of the currency.
   * @param maxPrice Limit result set to products based on a maximum price, provided using the smallest unit of the currency.
   * @param stockStatus Limit result set to products with specified stock status.
   * @param attributes Limit result set to products with selected global attributes.
   * @param attributeRelation The logical relationship between attributes when filtering across multiple at once.
   * @param catalogVisibility Determines if hidden or visible catalog products are shown.
   * @param rating Limit result set to products with a certain average rating.
   */
  def productsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, after: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, dateColumn: Option[String] = None, exclude: Seq[Int], include: Seq[Int], offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, parent: Seq[Int], parentExclude: Seq[Int], `type`: Option[String] = None, sku: Option[String] = None, featured: Option[Boolean] = None, category: Option[String] = None, categoryOperator: Option[String] = None, tag: Option[String] = None, tagOperator: Option[String] = None, onSale: Option[Boolean] = None, minPrice: Option[String] = None, maxPrice: Option[String] = None, stockStatus: Seq[String], attributes: Seq[Attributes], attributeRelation: Option[String] = None, catalogVisibility: Option[String] = None, rating: Seq[Int]
): Request[Either[ResponseError[Exception], Seq[Product]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products?context=${ context }&page=${ page }&per_page=${ perPage }&search=${ search }&after=${ after }&before=${ before }&date_column=${ dateColumn }&exclude=${ exclude }&include=${ include }&offset=${ offset }&order=${ order }&orderby=${ orderby }&parent=${ parent }&parent_exclude=${ parentExclude }&type=${ `type` }&sku=${ sku }&featured=${ featured }&category=${ category }&category_operator=${ categoryOperator }&tag=${ tag }&tag_operator=${ tagOperator }&on_sale=${ onSale }&min_price=${ minPrice }&max_price=${ maxPrice }&stock_status=${ stockStatus }&attributes=${ attributes }&attribute_relation=${ attributeRelation }&catalog_visibility=${ catalogVisibility }&rating=${ rating }")
      .contentType("application/json")
      .response(asJson[Seq[Product]])

  /**
   * Expected answers:
   *   code 200 : Product (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param id Unique identifier for the resource.
   * @param context Scope under which the request is made; determines fields present in response.
   */
  def productsIdGet(id: Int, context: Option[String] = None
): Request[Either[ResponseError[Exception], Product], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${id}?context=${ context }")
      .contentType("application/json")
      .response(asJson[Product])

  /**
   * Expected answers:
   *   code 200 : ProductReview (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param offset Offset the result set by a specific number of items.
   * @param order Order sort attribute ascending or descending.
   * @param orderby Sort collection by object attribute.
   * @param categoryId Limit result set to reviews from specific category IDs.
   * @param productId Limit result set to reviews from specific product IDs.
   */
  def productsReviewsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, offset: Option[Int] = None, order: Option[String] = None, orderby: Option[String] = None, categoryId: Option[String] = None, productId: Option[String] = None
): Request[Either[ResponseError[Exception], ProductReview], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/reviews?context=${ context }&page=${ page }&per_page=${ perPage }&offset=${ offset }&order=${ order }&orderby=${ orderby }&category_id=${ categoryId }&product_id=${ productId }")
      .contentType("application/json")
      .response(asJson[ProductReview])

  /**
   * Expected answers:
   *   code 200 : Term (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param context Scope under which the request is made; determines fields present in response.
   * @param page Current page of the collection.
   * @param perPage Maximum number of items to be returned in result set. Defaults to no limit if left blank.
   * @param search Limit results to those matching a string.
   * @param exclude Ensure result set excludes specific IDs.
   * @param include Limit result set to specific ids.
   * @param order Sort ascending or descending.
   * @param orderby Sort by term property.
   * @param hideEmpty If true, empty terms will not be returned.
   */
  def productsTagsGet(context: Option[String] = None, page: Option[Int] = None, perPage: Option[Int] = None, search: Option[String] = None, exclude: Seq[Int], include: Seq[Int], order: Option[String] = None, orderby: Option[String] = None, hideEmpty: Option[Boolean] = None
): Request[Either[ResponseError[Exception], Term], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/tags?context=${ context }&page=${ page }&per_page=${ perPage }&search=${ search }&exclude=${ exclude }&include=${ include }&order=${ order }&orderby=${ orderby }&hide_empty=${ hideEmpty }")
      .contentType("application/json")
      .response(asJson[Term])

  /**
   * Expected answers:
   *   code 200 :  (OK)
   *   code 400 :  (Bad Request)
   *   code 404 :  (Not Found)
   * 
   * @param namespace 
   * @param context 
   */
  def rootGet(namespace: Option[String] = None, context: Option[String] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/?namespace=${ namespace }&context=${ context }")
      .contentType("application/json")
      .response(asJson[Unit])

}
